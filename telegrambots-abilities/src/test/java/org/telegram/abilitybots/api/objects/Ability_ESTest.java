/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 22 18:47:48 GMT 2018
 */

package org.telegram.abilitybots.api.objects;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.function.Consumer;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.telegram.abilitybots.api.objects.Ability;
import org.telegram.abilitybots.api.objects.Locality;
import org.telegram.abilitybots.api.objects.MessageContext;
import org.telegram.abilitybots.api.objects.Privacy;
import org.telegram.telegrambots.meta.api.objects.Update;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Ability_ESTest extends Ability_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Ability.AbilityBuilder ability_AbilityBuilder0 = Ability.builder();
      Predicate<Update>[] predicateArray0 = (Predicate<Update>[]) Array.newInstance(Predicate.class, 0);
      Ability.AbilityBuilder ability_AbilityBuilder1 = ability_AbilityBuilder0.reply((Consumer<Update>) null, predicateArray0);
      assertSame(ability_AbilityBuilder1, ability_AbilityBuilder0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Ability.AbilityBuilder ability_AbilityBuilder0 = Ability.builder();
      Locality locality0 = Locality.USER;
      Ability.AbilityBuilder ability_AbilityBuilder1 = ability_AbilityBuilder0.locality(locality0);
      Ability.AbilityBuilder ability_AbilityBuilder2 = ability_AbilityBuilder0.name("Zvp");
      Privacy privacy0 = Privacy.PUBLIC;
      ability_AbilityBuilder1.privacy(privacy0);
      // Undeclared exception!
      try { 
        ability_AbilityBuilder2.build();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Method action can't be empty. Please assign a function by using .action() method
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Ability.AbilityBuilder ability_AbilityBuilder0 = Ability.builder();
      Ability.AbilityBuilder ability_AbilityBuilder1 = ability_AbilityBuilder0.name(", chosenInlineQuery=");
      // Undeclared exception!
      try { 
        ability_AbilityBuilder1.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Method name cannot contain spaces
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Ability.AbilityBuilder ability_AbilityBuilder0 = Ability.builder();
      Ability.AbilityBuilder ability_AbilityBuilder1 = ability_AbilityBuilder0.action((Consumer<MessageContext>) null);
      assertSame(ability_AbilityBuilder0, ability_AbilityBuilder1);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Ability.AbilityBuilder ability_AbilityBuilder0 = Ability.builder();
      Ability.AbilityBuilder ability_AbilityBuilder1 = ability_AbilityBuilder0.input((-1));
      assertSame(ability_AbilityBuilder1, ability_AbilityBuilder0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Ability.AbilityBuilder ability_AbilityBuilder0 = Ability.builder();
      Locality locality0 = Locality.ALL;
      Ability.AbilityBuilder ability_AbilityBuilder1 = ability_AbilityBuilder0.locality(locality0);
      Ability.AbilityBuilder ability_AbilityBuilder2 = ability_AbilityBuilder0.name("Zvp");
      ability_AbilityBuilder2.input((-1));
      Privacy privacy0 = Privacy.GROUP_ADMIN;
      ability_AbilityBuilder1.privacy(privacy0);
      // Undeclared exception!
      try { 
        ability_AbilityBuilder2.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of arguments the method can handle CANNOT be negative. Use the number 0 if the method ignores the arguments OR uses as many as appended
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Ability.AbilityBuilder ability_AbilityBuilder0 = Ability.builder();
      Ability.AbilityBuilder ability_AbilityBuilder1 = ability_AbilityBuilder0.flag((Predicate<Update>[]) null);
      assertSame(ability_AbilityBuilder0, ability_AbilityBuilder1);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Ability.AbilityBuilder ability_AbilityBuilder0 = Ability.builder();
      Ability.AbilityBuilder ability_AbilityBuilder1 = ability_AbilityBuilder0.info("Fw@K@ssY");
      assertSame(ability_AbilityBuilder1, ability_AbilityBuilder0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Ability.AbilityBuilder ability_AbilityBuilder0 = Ability.builder();
      Ability.AbilityBuilder ability_AbilityBuilder1 = ability_AbilityBuilder0.post((Consumer<MessageContext>) null);
      assertSame(ability_AbilityBuilder0, ability_AbilityBuilder1);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Ability.AbilityBuilder ability_AbilityBuilder0 = Ability.builder();
      // Undeclared exception!
      try { 
        ability_AbilityBuilder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Method name cannot be empty
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }
}
