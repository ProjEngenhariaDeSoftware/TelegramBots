/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 22 18:49:15 GMT 2018
 */

package org.telegram.abilitybots.api.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.telegram.abilitybots.api.util.Pair;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Pair_ESTest extends Pair_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Pair<Object, Object> pair0 = Pair.of((Object) "~q", (Object) "~q");
      Pair<Object, Object> pair1 = Pair.of((Object) pair0, (Object) "~q");
      Object object0 = pair1.a();
      boolean boolean0 = pair0.equals(object0);
      assertTrue(boolean0);
      assertFalse(pair1.equals((Object)pair0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer((-799));
      Pair<Integer, Object> pair0 = Pair.of(integer0, (Object) null);
      Object object0 = pair0.b();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Pair<Object, String> pair0 = Pair.of((Object) null, "DEFAULT");
      Object object0 = pair0.a();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Pair<Object, Object> pair0 = Pair.of((Object) "", (Object) null);
      Pair<Object, String> pair1 = Pair.of((Object) pair0, "");
      Pair<Object, Pair<Object, Object>> pair2 = Pair.of((Object) pair0, pair0);
      boolean boolean0 = pair2.equals(pair1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Pair<Object, String> pair0 = Pair.of((Object) null, (String) null);
      Pair<String, Pair<Object, String>> pair1 = Pair.of("", pair0);
      Integer integer0 = new Integer((-1));
      Pair<Integer, String> pair2 = Pair.of(integer0, "");
      Pair<String, Pair<Integer, String>> pair3 = Pair.of((String) null, pair2);
      boolean boolean0 = pair1.equals(pair3);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Pair<Object, String> pair0 = Pair.of((Object) null, (String) null);
      Pair<String, String> pair1 = Pair.of("", (String) null);
      Pair<Pair<String, String>, Pair<Object, String>> pair2 = Pair.of(pair1, pair0);
      boolean boolean0 = pair2.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer((-374));
      Pair<Integer, String> pair0 = Pair.of(integer0, "F\"RZ^D38K");
      Pair<Integer, Object> pair1 = Pair.of(integer0, (Object) "F\"RZ^D38K");
      boolean boolean0 = pair0.equals(pair1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Pair<Object, Object> pair0 = Pair.of((Object) "", (Object) null);
      boolean boolean0 = pair0.equals("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Pair<Object, Object> pair0 = Pair.of((Object) "", (Object) null);
      Pair<Object, String> pair1 = Pair.of((Object) pair0, "");
      Object object0 = pair1.b();
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Pair<Object, Object> pair0 = Pair.of((Object) "*2qu g8W<^BWH(~WMZ", (Object) "*2qu g8W<^BWH(~WMZ");
      Pair pair1 = (Pair)pair0.a();
      // Undeclared exception!
      try { 
        pair1.b();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Pair<Object, Object> pair0 = Pair.of((Object) "", (Object) null);
      pair0.hashCode();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer integer0 = new Integer((-374));
      Pair<Integer, String> pair0 = Pair.of(integer0, "F\"RZ^D38K");
      String string0 = pair0.toString();
      assertEquals("Pair{a=-374, b=F\"RZ^D38K}", string0);
  }
}
