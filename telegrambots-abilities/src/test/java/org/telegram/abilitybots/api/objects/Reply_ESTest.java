/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 22 18:47:33 GMT 2018
 */

package org.telegram.abilitybots.api.objects;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.function.Consumer;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.telegram.abilitybots.api.objects.Reply;
import org.telegram.telegrambots.meta.api.objects.Update;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Reply_ESTest extends Reply_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Consumer<Update> consumer0 = (Consumer<Update>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        Reply.of(consumer0, (Predicate<Update>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Predicate<Update>[] predicateArray0 = (Predicate<Update>[]) Array.newInstance(Predicate.class, 1);
      Reply reply0 = Reply.of((Consumer<Update>) null, predicateArray0);
      Update update0 = mock(Update.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        reply0.isOkFor(update0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.telegram.abilitybots.api.objects.Reply", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Predicate<Update>[] predicateArray0 = (Predicate<Update>[]) Array.newInstance(Predicate.class, 0);
      Reply reply0 = Reply.of((Consumer<Update>) null, predicateArray0);
      // Undeclared exception!
      try { 
        reply0.actOn((Update) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.telegram.abilitybots.api.objects.Reply", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Consumer<Update> consumer0 = (Consumer<Update>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      doReturn("(iUBx'H!S", "(iUBx'H!S").when(consumer0).toString();
      Predicate<Update>[] predicateArray0 = (Predicate<Update>[]) Array.newInstance(Predicate.class, 0);
      Reply reply0 = Reply.of(consumer0, predicateArray0);
      Reply reply1 = Reply.of(reply0.action, predicateArray0);
      boolean boolean0 = reply1.equals(reply0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Consumer<Update> consumer0 = (Consumer<Update>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      doReturn("(iUBx'H!S").when(consumer0).toString();
      Predicate<Update>[] predicateArray0 = (Predicate<Update>[]) Array.newInstance(Predicate.class, 0);
      Reply reply0 = Reply.of(consumer0, predicateArray0);
      boolean boolean0 = reply0.equals(reply0.action);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Consumer<Update> consumer0 = (Consumer<Update>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      doReturn("").when(consumer0).toString();
      Predicate<Update>[] predicateArray0 = (Predicate<Update>[]) Array.newInstance(Predicate.class, 0);
      Reply reply0 = Reply.of(consumer0, predicateArray0);
      boolean boolean0 = reply0.equals(reply0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Consumer<Update> consumer0 = (Consumer<Update>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(consumer0).toString();
      Predicate<Update>[] predicateArray0 = (Predicate<Update>[]) Array.newInstance(Predicate.class, 0);
      Reply reply0 = Reply.of(consumer0, predicateArray0);
      boolean boolean0 = reply0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Consumer<Update> consumer0 = (Consumer<Update>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      doReturn("").when(consumer0).toString();
      Predicate<Update>[] predicateArray0 = (Predicate<Update>[]) Array.newInstance(Predicate.class, 0);
      Reply reply0 = Reply.of(consumer0, predicateArray0);
      reply0.hashCode();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Consumer<Update> consumer0 = (Consumer<Update>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      doReturn("").when(consumer0).toString();
      Predicate<Update>[] predicateArray0 = (Predicate<Update>[]) Array.newInstance(Predicate.class, 0);
      Reply reply0 = Reply.of(consumer0, predicateArray0);
      boolean boolean0 = reply0.isOkFor((Update) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Consumer<Update> consumer0 = (Consumer<Update>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      doReturn("", "bEx>!#F%jA").when(consumer0).toString();
      Predicate<Update>[] predicateArray0 = (Predicate<Update>[]) Array.newInstance(Predicate.class, 0);
      Reply reply0 = Reply.of(consumer0, predicateArray0);
      String string0 = reply0.toString();
      assertEquals("Reply{conditions=[], action=bEx>!#F%jA}", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Consumer<Update> consumer0 = (Consumer<Update>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(consumer0).toString();
      Predicate<Update>[] predicateArray0 = (Predicate<Update>[]) Array.newInstance(Predicate.class, 0);
      Update update0 = mock(Update.class, new ViolatedAssumptionAnswer());
      Reply reply0 = Reply.of(consumer0, predicateArray0);
      reply0.actOn(update0);
  }
}
