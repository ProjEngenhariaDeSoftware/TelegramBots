/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 22 18:49:25 GMT 2018
 */

package org.telegram.abilitybots.api.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Locale;
import java.util.MissingResourceException;
import java.util.function.Consumer;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.telegram.abilitybots.api.db.DBContext;
import org.telegram.abilitybots.api.objects.MessageContext;
import org.telegram.abilitybots.api.util.AbilityUtils;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.User;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbilityUtils_ESTest extends AbilityUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      // Undeclared exception!
      try { 
        AbilityUtils.getLocalizedMessage("AtomicInteger", "Could not retrieve update context origin (user/group)", (Object[]) null);
        fail("Expecting exception: MissingResourceException");
      
      } catch(MissingResourceException e) {
         //
         // Can't find resource for bundle java.util.PropertyResourceBundle, key AtomicInteger
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = AbilityUtils.stripTag("@rP");
      assertEquals("rp", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        AbilityUtils.stripTag((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.telegram.abilitybots.api.util.AbilityUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        AbilityUtils.shortName((User) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.telegram.abilitybots.api.util.AbilityUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      Object[] objectArray0 = new Object[5];
      // Undeclared exception!
      try { 
        AbilityUtils.getLocalizedMessage((String) null, locale0, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.PropertyResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        AbilityUtils.fullName((User) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.telegram.abilitybots.api.util.AbilityUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        AbilityUtils.getLocalizedMessage("messages", (Locale) null, objectArray0);
        fail("Expecting exception: MissingResourceException");
      
      } catch(MissingResourceException e) {
         //
         // Can't find resource for bundle java.util.PropertyResourceBundle, key messages
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer(135);
      Boolean boolean0 = Boolean.FALSE;
      User user0 = new User(integer0, "aatLW", boolean0, "aatLW", "aatLW", "@");
      String string0 = AbilityUtils.fullName(user0);
      assertEquals("aatLW aatLW", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      User user0 = new User();
      String string0 = AbilityUtils.fullName(user0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer(135);
      Boolean boolean0 = Boolean.FALSE;
      User user0 = new User(integer0, "aatLW", boolean0, "aatLW", "aatLW", "@");
      String string0 = AbilityUtils.shortName(user0);
      assertEquals("aatLW", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      User user0 = new User();
      String string0 = AbilityUtils.shortName(user0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        AbilityUtils.getLocalizedMessage((String) null, (String) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.PropertyResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Update update0 = new Update();
      // Undeclared exception!
      try { 
        AbilityUtils.isUserMessage(update0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not retrieve update context origin (user/group)
         //
         verifyException("org.telegram.abilitybots.api.util.AbilityUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        AbilityUtils.getChatId((Update) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not retrieve originating chat ID from update
         //
         verifyException("org.telegram.abilitybots.api.util.AbilityUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Update update0 = new Update();
      boolean boolean0 = AbilityUtils.isSuperGroupUpdate(update0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Update update0 = new Update();
      boolean boolean0 = AbilityUtils.isGroupUpdate(update0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Update update0 = new Update();
      // Undeclared exception!
      try { 
        AbilityUtils.getUser(update0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not retrieve originating user from update
         //
         verifyException("org.telegram.abilitybots.api.util.AbilityUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = AbilityUtils.stripTag("@");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = AbilityUtils.stripTag(">concShift");
      assertEquals(">concshift", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Consumer<MessageContext> consumer0 = AbilityUtils.commitTo((DBContext) null);
      assertNotNull(consumer0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Predicate<Update> predicate0 = AbilityUtils.isReplyTo(">concShift");
      assertNotNull(predicate0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = AbilityUtils.addTag("");
      assertEquals("@", string0);
  }
}
