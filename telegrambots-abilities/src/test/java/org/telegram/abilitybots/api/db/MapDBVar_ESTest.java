/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 22 18:49:07 GMT 2018
 */

package org.telegram.abilitybots.api.db;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.mapdb.Atomic;
import org.telegram.abilitybots.api.db.MapDBVar;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MapDBVar_ESTest extends MapDBVar_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MapDBVar<MapDBVar<Object>> mapDBVar0 = new MapDBVar<MapDBVar<Object>>((Atomic.Var<MapDBVar<Object>>) null);
      MapDBVar<Object> mapDBVar1 = new MapDBVar<Object>((Atomic.Var<Object>) null);
      // Undeclared exception!
      try { 
        mapDBVar0.set(mapDBVar1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.telegram.abilitybots.api.db.MapDBVar", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MapDBVar<Object> mapDBVar0 = new MapDBVar<Object>((Atomic.Var<Object>) null);
      // Undeclared exception!
      try { 
        mapDBVar0.get();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.telegram.abilitybots.api.db.MapDBVar", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Atomic.Var<String> atomic_Var0 = (Atomic.Var<String>) mock(Atomic.Var.class, new ViolatedAssumptionAnswer());
      MapDBVar<String> mapDBVar0 = new MapDBVar<String>(atomic_Var0);
      Atomic.Var<Object> atomic_Var1 = (Atomic.Var<Object>) mock(Atomic.Var.class, new ViolatedAssumptionAnswer());
      MapDBVar<Object> mapDBVar1 = new MapDBVar<Object>(atomic_Var1);
      boolean boolean0 = mapDBVar1.equals(mapDBVar0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Atomic.Var<String> atomic_Var0 = (Atomic.Var<String>) mock(Atomic.Var.class, new ViolatedAssumptionAnswer());
      MapDBVar<String> mapDBVar0 = new MapDBVar<String>(atomic_Var0);
      boolean boolean0 = mapDBVar0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Atomic.Var<Object> atomic_Var0 = (Atomic.Var<Object>) mock(Atomic.Var.class, new ViolatedAssumptionAnswer());
      doReturn("NV:X2").when(atomic_Var0).toString();
      MapDBVar<Object> mapDBVar0 = new MapDBVar<Object>(atomic_Var0);
      Atomic.Var<Object> atomic_Var1 = (Atomic.Var<Object>) mock(Atomic.Var.class, new ViolatedAssumptionAnswer());
      doReturn(mapDBVar0).when(atomic_Var1).get();
      MapDBVar<Object> mapDBVar1 = new MapDBVar<Object>(atomic_Var1);
      Object object0 = mapDBVar1.get();
      boolean boolean0 = mapDBVar0.equals(object0);
      assertTrue(boolean0);
      assertFalse(mapDBVar1.equals((Object)mapDBVar0));
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Atomic.Var<String> atomic_Var0 = (Atomic.Var<String>) mock(Atomic.Var.class, new ViolatedAssumptionAnswer());
      MapDBVar<String> mapDBVar0 = new MapDBVar<String>(atomic_Var0);
      boolean boolean0 = mapDBVar0.equals("w5 $ZiMCPR/b1~V\"'Cc");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Atomic.Var<Object> atomic_Var0 = (Atomic.Var<Object>) mock(Atomic.Var.class, new ViolatedAssumptionAnswer());
      doReturn("NV:X2").when(atomic_Var0).toString();
      MapDBVar<Object> mapDBVar0 = new MapDBVar<Object>(atomic_Var0);
      String string0 = mapDBVar0.toString();
      assertEquals("MapDBVar{var=NV:X2}", string0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Atomic.Var<Object> atomic_Var0 = (Atomic.Var<Object>) mock(Atomic.Var.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(atomic_Var0).get();
      MapDBVar<Object> mapDBVar0 = new MapDBVar<Object>(atomic_Var0);
      Object object0 = mapDBVar0.get();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Atomic.Var<Object> atomic_Var0 = (Atomic.Var<Object>) mock(Atomic.Var.class, new ViolatedAssumptionAnswer());
      MapDBVar<Object> mapDBVar0 = new MapDBVar<Object>(atomic_Var0);
      mapDBVar0.set(mapDBVar0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Atomic.Var<Object> atomic_Var0 = (Atomic.Var<Object>) mock(Atomic.Var.class, new ViolatedAssumptionAnswer());
      MapDBVar<Object> mapDBVar0 = new MapDBVar<Object>(atomic_Var0);
      mapDBVar0.hashCode();
  }
}
