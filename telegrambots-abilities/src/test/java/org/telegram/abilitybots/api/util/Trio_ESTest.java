/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 22 18:47:35 GMT 2018
 */

package org.telegram.abilitybots.api.util;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.telegram.abilitybots.api.util.Trio;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Trio_ESTest extends Trio_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer(893);
      Trio<Object, Integer, String> trio0 = Trio.of((Object) null, integer0, (String) null);
      String string0 = trio0.c();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer((-855));
      Trio<Integer, Object, Integer> trio0 = Trio.of(integer0, (Object) null, integer0);
      Object object0 = trio0.b();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer(1113);
      Trio<String, Integer, Object> trio0 = Trio.of("GPK2q,As}zqk", integer0, (Object) integer0);
      String string0 = trio0.a();
      assertEquals("GPK2q,As}zqk", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Trio<Object, Object, Object> trio0 = Trio.of((Object) integer0, (Object) integer0, (Object) integer0);
      Trio<Integer, Integer, Integer> trio1 = Trio.of(integer0, integer0, integer0);
      boolean boolean0 = trio1.equals(trio0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      Trio<Object, Object, Object> trio0 = Trio.of((Object) integer0, (Object) null, (Object) integer0);
      Trio<Object, Integer, Object> trio1 = Trio.of((Object) integer0, (Integer) null, (Object) trio0);
      boolean boolean0 = trio1.equals(trio0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer(4);
      Trio<String, Object, Integer> trio0 = Trio.of("", (Object) "", integer0);
      Trio<Object, Object, Object> trio1 = Trio.of((Object) "SQ", (Object) "SQ", (Object) trio0);
      Object object0 = trio1.c();
      Trio<String, Object, String> trio2 = Trio.of((String) null, object0, "Trio{a=0, b=-38, c=}");
      boolean boolean0 = trio1.equals(trio2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer(1);
      Trio<String, Object, Object> trio0 = Trio.of("", (Object) "F&@/LSYP}3W", (Object) integer0);
      Trio<Object, Integer, Object> trio1 = Trio.of((Object) "", integer0, (Object) null);
      boolean boolean0 = trio1.equals(trio0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      Trio<Integer, String, Integer> trio0 = Trio.of((Integer) null, "Trio{a=AUTO, b=AUTO, c=AUTO}", integer0);
      boolean boolean0 = trio0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer(1);
      Trio<Integer, Object, Integer> trio0 = Trio.of(integer0, (Object) integer0, integer0);
      boolean boolean0 = trio0.equals(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer(1);
      Trio<Integer, Object, Integer> trio0 = Trio.of(integer0, (Object) integer0, integer0);
      Trio<Integer, Object, String> trio1 = Trio.of(integer0, (Object) trio0, "2W* e");
      String string0 = trio1.toString();
      assertEquals("Trio{a=1, b=Trio{a=1, b=1, c=1}, c=2W* e}", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = new Integer(1);
      Trio<Integer, Object, Integer> trio0 = Trio.of(integer0, (Object) integer0, integer0);
      Trio<Object, Object, Integer> trio1 = Trio.of((Object) integer0, (Object) trio0, integer0);
      Object object0 = trio1.b();
      boolean boolean0 = trio0.equals(object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Trio<Object, Object, Object> trio0 = Trio.of((Object) integer0, (Object) integer0, (Object) integer0);
      trio0.hashCode();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      Trio<String, Object, Object> trio0 = Trio.of("a", (Object) "a", (Object) integer0);
      Trio<Object, Object, String> trio1 = Trio.of((Object) null, (Object) trio0, "PROPERTIES");
      Object object0 = trio1.a();
      assertNull(object0);
  }
}
