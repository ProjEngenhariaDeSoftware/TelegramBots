/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 26 12:48:44 GMT 2018
 */

package org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardButton;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class KeyboardButton_ESTest extends KeyboardButton_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      KeyboardButton keyboardButton0 = new KeyboardButton();
      String string0 = keyboardButton0.getText();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      KeyboardButton keyboardButton0 = new KeyboardButton("");
      String string0 = keyboardButton0.getText();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      KeyboardButton keyboardButton0 = new KeyboardButton("");
      Boolean boolean0 = new Boolean(true);
      keyboardButton0.setRequestLocation(boolean0);
      Boolean boolean1 = keyboardButton0.getRequestLocation();
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      KeyboardButton keyboardButton0 = new KeyboardButton("AUTO");
      Boolean boolean0 = Boolean.valueOf("b#1%P_<$!8fb");
      KeyboardButton keyboardButton1 = keyboardButton0.setRequestLocation(boolean0);
      Boolean boolean1 = keyboardButton1.getRequestLocation();
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      KeyboardButton keyboardButton0 = new KeyboardButton("nWH4A(woMBY0W");
      Boolean boolean0 = Boolean.TRUE;
      KeyboardButton keyboardButton1 = keyboardButton0.setRequestContact(boolean0);
      Boolean boolean1 = keyboardButton1.getRequestContact();
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      KeyboardButton keyboardButton0 = new KeyboardButton(", requestContact=");
      Boolean boolean0 = new Boolean("");
      KeyboardButton keyboardButton1 = keyboardButton0.setRequestContact(boolean0);
      Boolean boolean1 = keyboardButton1.getRequestContact();
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      KeyboardButton keyboardButton0 = new KeyboardButton();
      KeyboardButton keyboardButton1 = new KeyboardButton();
      boolean boolean0 = keyboardButton0.equals(keyboardButton1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      KeyboardButton keyboardButton0 = new KeyboardButton();
      KeyboardButton keyboardButton1 = new KeyboardButton();
      assertTrue(keyboardButton1.equals((Object)keyboardButton0));
      
      Boolean boolean0 = Boolean.TRUE;
      keyboardButton0.setRequestLocation(boolean0);
      boolean boolean1 = keyboardButton0.equals(keyboardButton1);
      assertFalse(keyboardButton1.equals((Object)keyboardButton0));
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      KeyboardButton keyboardButton0 = new KeyboardButton();
      KeyboardButton keyboardButton1 = new KeyboardButton();
      Boolean boolean0 = Boolean.TRUE;
      keyboardButton1.setRequestContact(boolean0);
      boolean boolean1 = keyboardButton0.equals(keyboardButton1);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      KeyboardButton keyboardButton0 = new KeyboardButton(", requestContact=");
      boolean boolean0 = keyboardButton0.equals("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      KeyboardButton keyboardButton0 = new KeyboardButton("$0I\"V>,(a");
      boolean boolean0 = keyboardButton0.equals(keyboardButton0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      KeyboardButton keyboardButton0 = new KeyboardButton("HmspOISVa");
      KeyboardButton keyboardButton1 = new KeyboardButton();
      boolean boolean0 = keyboardButton0.equals(keyboardButton1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      KeyboardButton keyboardButton0 = new KeyboardButton();
      Boolean boolean0 = Boolean.TRUE;
      keyboardButton0.setRequestContact(boolean0);
      keyboardButton0.setText("U\"9z?");
      Boolean boolean1 = Boolean.FALSE;
      KeyboardButton keyboardButton1 = keyboardButton0.setRequestLocation(boolean1);
      keyboardButton1.validate();
      assertTrue(keyboardButton1.getRequestContact());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      KeyboardButton keyboardButton0 = new KeyboardButton();
      Boolean boolean0 = Boolean.TRUE;
      keyboardButton0.setRequestContact(boolean0);
      keyboardButton0.setText("U\"9z?");
      KeyboardButton keyboardButton1 = keyboardButton0.setRequestLocation(boolean0);
      try { 
        keyboardButton1.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cant request contact and location at the same time
         //
         verifyException("org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardButton", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      KeyboardButton keyboardButton0 = new KeyboardButton("HmspOISVa");
      Boolean boolean0 = Boolean.FALSE;
      keyboardButton0.setRequestContact(boolean0);
      KeyboardButton keyboardButton1 = keyboardButton0.setRequestLocation(boolean0);
      keyboardButton1.validate();
      assertFalse(keyboardButton1.getRequestContact());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      KeyboardButton keyboardButton0 = new KeyboardButton("HmspOISVa");
      Boolean boolean0 = Boolean.FALSE;
      keyboardButton0.setRequestContact(boolean0);
      keyboardButton0.validate();
      assertFalse(keyboardButton0.getRequestContact());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      KeyboardButton keyboardButton0 = new KeyboardButton();
      KeyboardButton keyboardButton1 = keyboardButton0.setText("");
      try { 
        keyboardButton1.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Text parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardButton", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      KeyboardButton keyboardButton0 = new KeyboardButton("Cant request contact and location at the same time");
      keyboardButton0.validate();
      assertNull(keyboardButton0.getRequestLocation());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      KeyboardButton keyboardButton0 = new KeyboardButton(", requestContact=");
      keyboardButton0.hashCode();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      KeyboardButton keyboardButton0 = new KeyboardButton("Cant request contact and location at the same time");
      Boolean boolean0 = keyboardButton0.getRequestLocation();
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      KeyboardButton keyboardButton0 = new KeyboardButton("Cant request contact and location at the same time");
      String string0 = keyboardButton0.getText();
      assertEquals("Cant request contact and location at the same time", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      KeyboardButton keyboardButton0 = new KeyboardButton("Cant request contact and location at the same time");
      Boolean boolean0 = keyboardButton0.getRequestContact();
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      KeyboardButton keyboardButton0 = new KeyboardButton();
      try { 
        keyboardButton0.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Text parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardButton", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      KeyboardButton keyboardButton0 = new KeyboardButton("$0I\"V>,(a");
      String string0 = keyboardButton0.toString();
      assertEquals("KeyboardButton{text=$0I\"V>,(a, requestContact=null, requestLocation=null}", string0);
  }
}
