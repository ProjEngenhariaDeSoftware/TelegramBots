/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 26 13:07:28 GMT 2018
 */

package org.telegram.telegrambots.meta.api.objects.media;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;
import org.telegram.telegrambots.meta.api.objects.media.InputMedia;
import org.telegram.telegrambots.meta.api.objects.media.InputMediaAnimation;
import org.telegram.telegrambots.meta.api.objects.media.InputMediaAudio;
import org.telegram.telegrambots.meta.api.objects.media.InputMediaPhoto;
import org.telegram.telegrambots.meta.api.objects.media.InputMediaVideo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class InputMedia_ESTest extends InputMedia_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      InputMediaAudio inputMediaAudio0 = new InputMediaAudio();
      InputMedia<Object> inputMedia0 = inputMediaAudio0.setCaption("title");
      String string0 = inputMedia0.toString();
      assertEquals("InputMediaAudio{duration=null, performer=null, title=null, thumb=null} InputMedia{media='null', caption='title', parseMode='null', isNewMedia=false, mediaName='null', newMediaFile=null, newMediaStream=null}", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      InputMediaPhoto inputMediaPhoto0 = new InputMediaPhoto("type", "thumb");
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1), (-1));
      inputMediaPhoto0.setMedia((InputStream) byteArrayInputStream0, "type");
      inputMediaPhoto0.setParseMode("");
      assertEquals("attach://type", inputMediaPhoto0.getMedia());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      InputMediaAnimation inputMediaAnimation0 = new InputMediaAnimation();
      MockFile mockFile0 = new MockFile("5;.Xg&tSYC}'D");
      inputMediaAnimation0.setMedia((File) mockFile0, "media");
      inputMediaAnimation0.setCaption("<'S?EG)W+{_<");
      assertTrue(inputMediaAnimation0.isNewMedia());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      InputMediaAudio inputMediaAudio0 = new InputMediaAudio();
      InputMedia<Object> inputMedia0 = inputMediaAudio0.setCaption("title");
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      inputMedia0.setMedia((InputStream) sequenceInputStream0, "duration");
      boolean boolean0 = inputMedia0.isNewMedia();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      InputMediaVideo inputMediaVideo0 = new InputMediaVideo();
      String string0 = inputMediaVideo0.getType();
      assertEquals("video", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      InputMediaAudio inputMediaAudio0 = new InputMediaAudio();
      InputMedia<Object> inputMedia0 = inputMediaAudio0.setCaption("title");
      inputMedia0.setParseMode("caption");
      String string0 = inputMedia0.getParseMode();
      assertEquals("title", inputMedia0.getCaption());
      assertEquals("caption", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      InputMediaAudio inputMediaAudio0 = new InputMediaAudio();
      InputMedia<Object> inputMedia0 = inputMediaAudio0.setCaption("title");
      inputMediaAudio0.setParseMode("");
      String string0 = inputMedia0.getParseMode();
      assertEquals("", string0);
      assertEquals("title", inputMedia0.getCaption());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      InputMediaAudio inputMediaAudio0 = new InputMediaAudio();
      InputMedia<Object> inputMedia0 = inputMediaAudio0.setCaption("title");
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      inputMedia0.setMedia((InputStream) sequenceInputStream0, "duration");
      inputMedia0.getNewMediaStream();
      assertTrue(inputMedia0.isNewMedia());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      InputMediaAudio inputMediaAudio0 = new InputMediaAudio();
      InputMedia<Object> inputMedia0 = inputMediaAudio0.setCaption("title");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      inputMedia0.setMedia((InputStream) pipedInputStream0, "parse_mode");
      inputMedia0.getMediaName();
      assertTrue(inputMedia0.isNewMedia());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      InputMediaAudio inputMediaAudio0 = new InputMediaAudio();
      InputMedia<Object> inputMedia0 = inputMediaAudio0.setCaption("caption");
      MockFile mockFile0 = new MockFile("performer", "v>CC(S\"");
      inputMedia0.setMedia((File) mockFile0, "");
      inputMedia0.getMediaName();
      assertTrue(inputMedia0.isNewMedia());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      InputMediaAudio inputMediaAudio0 = new InputMediaAudio();
      InputMedia<Object> inputMedia0 = inputMediaAudio0.setCaption("title");
      MockFile mockFile0 = new MockFile("");
      inputMediaAudio0.setMedia((File) mockFile0, "?5I");
      inputMedia0.getMediaFile();
      assertTrue(inputMedia0.isNewMedia());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      InputMediaAudio inputMediaAudio0 = new InputMediaAudio();
      InputMedia<Object> inputMedia0 = inputMediaAudio0.setCaption("title");
      File file0 = MockFile.createTempFile("media", "attach://");
      inputMediaAudio0.setMedia(file0, (String) null);
      inputMedia0.getMediaFile();
      assertTrue(inputMedia0.isNewMedia());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      InputMediaAudio inputMediaAudio0 = new InputMediaAudio();
      InputMedia<Object> inputMedia0 = inputMediaAudio0.setCaption("title");
      MockFile mockFile0 = new MockFile("type");
      inputMedia0.setMedia((File) mockFile0, ")");
      inputMedia0.getMediaFile();
      assertTrue(inputMedia0.isNewMedia());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      InputMediaAudio inputMediaAudio0 = new InputMediaAudio();
      InputMedia<Object> inputMedia0 = inputMediaAudio0.setCaption("caption");
      inputMedia0.setMedia("");
      String string0 = inputMedia0.getMedia();
      assertEquals("", string0);
      assertEquals("caption", inputMedia0.getCaption());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      InputMediaAudio inputMediaAudio0 = new InputMediaAudio();
      InputMedia<Object> inputMedia0 = inputMediaAudio0.setCaption((String) null);
      String string0 = inputMedia0.getCaption();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      InputMediaAudio inputMediaAudio0 = new InputMediaAudio();
      InputMedia<Object> inputMedia0 = inputMediaAudio0.setCaption("title");
      inputMedia0.setCaption("");
      String string0 = inputMedia0.getCaption();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      InputMediaAudio inputMediaAudio0 = new InputMediaAudio();
      try { 
        inputMediaAudio0.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Media can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.objects.media.InputMedia", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      InputMediaVideo inputMediaVideo0 = new InputMediaVideo("", "");
      try { 
        inputMediaVideo0.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Media can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.objects.media.InputMedia", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      InputMediaAudio inputMediaAudio0 = new InputMediaAudio();
      inputMediaAudio0.setMedia((File) null, ">");
      try { 
        inputMediaAudio0.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Media can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.objects.media.InputMedia", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      InputMediaAudio inputMediaAudio0 = new InputMediaAudio();
      inputMediaAudio0.setMedia((File) null, "");
      try { 
        inputMediaAudio0.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Media name can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.objects.media.InputMedia", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      InputMediaPhoto inputMediaPhoto0 = new InputMediaPhoto();
      MockFile mockFile0 = new MockFile("type", "caption");
      inputMediaPhoto0.setMedia((File) mockFile0, (String) null);
      try { 
        inputMediaPhoto0.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Media name can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.objects.media.InputMedia", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      InputMediaPhoto inputMediaPhoto0 = new InputMediaPhoto("type", "thumb");
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 5, 5);
      inputMediaPhoto0.setMedia((InputStream) byteArrayInputStream0, "type");
      inputMediaPhoto0.validate();
      assertTrue(inputMediaPhoto0.isNewMedia());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      InputMediaAudio inputMediaAudio0 = new InputMediaAudio();
      InputMedia<Object> inputMedia0 = inputMediaAudio0.setCaption("title");
      inputMedia0.setMedia((InputStream) null, "Q?zYgaT0O:w^Zi&{");
      inputMedia0.getMedia();
      assertTrue(inputMedia0.isNewMedia());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      InputMediaAudio inputMediaAudio0 = new InputMediaAudio();
      InputMediaAudio inputMediaAudio1 = inputMediaAudio0.setMedia("(");
      assertFalse(inputMediaAudio1.isNewMedia());
      
      inputMediaAudio0.validate();
      assertEquals("(", inputMediaAudio0.getMedia());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      InputMediaAudio inputMediaAudio0 = new InputMediaAudio();
      InputMedia<Object> inputMedia0 = inputMediaAudio0.setCaption("title");
      inputMedia0.getMediaFile();
      assertEquals("title", inputMedia0.getCaption());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      InputMediaAudio inputMediaAudio0 = new InputMediaAudio();
      InputMedia<Object> inputMedia0 = inputMediaAudio0.setCaption("title");
      String string0 = inputMedia0.getMediaName();
      assertEquals("title", inputMedia0.getCaption());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      InputMediaPhoto inputMediaPhoto0 = new InputMediaPhoto();
      MockFile mockFile0 = new MockFile("media", "type");
      inputMediaPhoto0.setMedia((File) mockFile0, "type");
      inputMediaPhoto0.validate();
      assertTrue(inputMediaPhoto0.isNewMedia());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      InputMediaAudio inputMediaAudio0 = new InputMediaAudio();
      InputMedia<Object> inputMedia0 = inputMediaAudio0.setCaption("title");
      inputMedia0.getNewMediaStream();
      assertEquals("title", inputMedia0.getCaption());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      InputMediaAudio inputMediaAudio0 = new InputMediaAudio();
      InputMedia<Object> inputMedia0 = inputMediaAudio0.setCaption("title");
      inputMedia0.isNewMedia();
      assertEquals("title", inputMedia0.getCaption());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      InputMediaAudio inputMediaAudio0 = new InputMediaAudio();
      InputMedia<Object> inputMedia0 = inputMediaAudio0.setCaption("title");
      String string0 = inputMedia0.getParseMode();
      assertEquals("title", inputMedia0.getCaption());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      InputMediaAudio inputMediaAudio0 = new InputMediaAudio();
      InputMedia<Object> inputMedia0 = inputMediaAudio0.setCaption("title");
      String string0 = inputMedia0.getCaption();
      assertEquals("title", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      InputMediaAudio inputMediaAudio0 = new InputMediaAudio();
      InputMedia<Object> inputMedia0 = inputMediaAudio0.setCaption("title");
      String string0 = inputMedia0.getMedia();
      assertEquals("title", inputMedia0.getCaption());
      assertNull(string0);
  }
}
