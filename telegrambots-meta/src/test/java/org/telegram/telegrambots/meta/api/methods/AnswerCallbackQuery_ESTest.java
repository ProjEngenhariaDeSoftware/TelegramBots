/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 26 13:40:41 GMT 2018
 */

package org.telegram.telegrambots.meta.api.methods;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.telegram.telegrambots.meta.api.methods.AnswerCallbackQuery;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AnswerCallbackQuery_ESTest extends AnswerCallbackQuery_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AnswerCallbackQuery answerCallbackQuery0 = new AnswerCallbackQuery();
      AnswerCallbackQuery answerCallbackQuery1 = answerCallbackQuery0.setUrl("#tRX4hH!)");
      String string0 = answerCallbackQuery1.getUrl();
      assertEquals("#tRX4hH!)", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AnswerCallbackQuery answerCallbackQuery0 = new AnswerCallbackQuery();
      answerCallbackQuery0.setUrl("");
      String string0 = answerCallbackQuery0.getUrl();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AnswerCallbackQuery answerCallbackQuery0 = new AnswerCallbackQuery();
      AnswerCallbackQuery answerCallbackQuery1 = answerCallbackQuery0.setText("");
      String string0 = answerCallbackQuery1.getText();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AnswerCallbackQuery answerCallbackQuery0 = new AnswerCallbackQuery();
      Boolean boolean0 = Boolean.TRUE;
      AnswerCallbackQuery answerCallbackQuery1 = answerCallbackQuery0.setShowAlert(boolean0);
      Boolean boolean1 = answerCallbackQuery1.getShowAlert();
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AnswerCallbackQuery answerCallbackQuery0 = new AnswerCallbackQuery();
      Boolean boolean0 = Boolean.valueOf(", text='");
      AnswerCallbackQuery answerCallbackQuery1 = answerCallbackQuery0.setShowAlert(boolean0);
      Boolean boolean1 = answerCallbackQuery1.getShowAlert();
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AnswerCallbackQuery answerCallbackQuery0 = new AnswerCallbackQuery();
      AnswerCallbackQuery answerCallbackQuery1 = answerCallbackQuery0.setCallbackQueryId("answercallbackquery");
      String string0 = answerCallbackQuery1.getCallbackQueryId();
      assertEquals("answercallbackquery", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AnswerCallbackQuery answerCallbackQuery0 = new AnswerCallbackQuery();
      AnswerCallbackQuery answerCallbackQuery1 = answerCallbackQuery0.setCallbackQueryId("");
      String string0 = answerCallbackQuery1.getCallbackQueryId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AnswerCallbackQuery answerCallbackQuery0 = new AnswerCallbackQuery();
      Integer integer0 = new Integer(0);
      AnswerCallbackQuery answerCallbackQuery1 = answerCallbackQuery0.setCacheTime(integer0);
      Integer integer1 = answerCallbackQuery1.getCacheTime();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AnswerCallbackQuery answerCallbackQuery0 = new AnswerCallbackQuery();
      Integer integer0 = new Integer(262144);
      AnswerCallbackQuery answerCallbackQuery1 = answerCallbackQuery0.setCacheTime(integer0);
      Integer integer1 = answerCallbackQuery1.getCacheTime();
      assertEquals(262144, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AnswerCallbackQuery answerCallbackQuery0 = new AnswerCallbackQuery();
      Integer integer0 = new Integer((-995));
      AnswerCallbackQuery answerCallbackQuery1 = answerCallbackQuery0.setCacheTime(integer0);
      Integer integer1 = answerCallbackQuery1.getCacheTime();
      assertEquals((-995), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AnswerCallbackQuery answerCallbackQuery0 = new AnswerCallbackQuery();
      Integer integer0 = new Integer((-294));
      AnswerCallbackQuery answerCallbackQuery1 = answerCallbackQuery0.setCacheTime(integer0);
      Integer integer1 = answerCallbackQuery1.getCacheTime();
      assertEquals((-294), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AnswerCallbackQuery answerCallbackQuery0 = new AnswerCallbackQuery();
      // Undeclared exception!
      try { 
        answerCallbackQuery0.deserializeResponse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.JsonFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AnswerCallbackQuery answerCallbackQuery0 = new AnswerCallbackQuery();
      try { 
        answerCallbackQuery0.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // CallbackQueryId can't be null
         //
         verifyException("org.telegram.telegrambots.meta.api.methods.AnswerCallbackQuery", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AnswerCallbackQuery answerCallbackQuery0 = new AnswerCallbackQuery();
      String string0 = answerCallbackQuery0.getText();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AnswerCallbackQuery answerCallbackQuery0 = new AnswerCallbackQuery();
      answerCallbackQuery0.setText("answercallbackquery");
      String string0 = answerCallbackQuery0.getText();
      assertEquals("answercallbackquery", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AnswerCallbackQuery answerCallbackQuery0 = new AnswerCallbackQuery();
      String string0 = answerCallbackQuery0.toString();
      assertEquals("AnswerCallbackQuery{callbackQueryId='null', text='null', showAlert=null, url='null', cacheTime=null}", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AnswerCallbackQuery answerCallbackQuery0 = new AnswerCallbackQuery();
      answerCallbackQuery0.setCallbackQueryId("answercallbackquery");
      answerCallbackQuery0.validate();
      assertEquals("answercallbackquery", answerCallbackQuery0.getCallbackQueryId());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AnswerCallbackQuery answerCallbackQuery0 = new AnswerCallbackQuery();
      Integer integer0 = answerCallbackQuery0.getCacheTime();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AnswerCallbackQuery answerCallbackQuery0 = new AnswerCallbackQuery();
      String string0 = answerCallbackQuery0.getUrl();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AnswerCallbackQuery answerCallbackQuery0 = new AnswerCallbackQuery();
      Boolean boolean0 = answerCallbackQuery0.getShowAlert();
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AnswerCallbackQuery answerCallbackQuery0 = new AnswerCallbackQuery();
      String string0 = answerCallbackQuery0.getCallbackQueryId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AnswerCallbackQuery answerCallbackQuery0 = new AnswerCallbackQuery();
      String string0 = answerCallbackQuery0.getMethod();
      assertEquals("answercallbackquery", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AnswerCallbackQuery answerCallbackQuery0 = new AnswerCallbackQuery();
      Integer integer0 = new Integer(2782);
      answerCallbackQuery0.setCacheTime(integer0);
      Integer integer1 = answerCallbackQuery0.getCacheTime();
      assertEquals(2782, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AnswerCallbackQuery answerCallbackQuery0 = new AnswerCallbackQuery();
      try { 
        answerCallbackQuery0.deserializeResponse("answercallbackquery");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unable to deserialize response
         //
         verifyException("org.telegram.telegrambots.meta.api.methods.AnswerCallbackQuery", e);
      }
  }
}
