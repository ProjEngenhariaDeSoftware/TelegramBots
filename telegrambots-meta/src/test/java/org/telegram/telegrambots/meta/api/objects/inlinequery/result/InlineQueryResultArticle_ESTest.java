/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 26 13:16:56 GMT 2018
 */

package org.telegram.telegrambots.meta.api.objects.inlinequery.result;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.telegram.telegrambots.meta.api.objects.inlinequery.inputmessagecontent.InputMessageContent;
import org.telegram.telegrambots.meta.api.objects.inlinequery.inputmessagecontent.InputTextMessageContent;
import org.telegram.telegrambots.meta.api.objects.inlinequery.inputmessagecontent.InputVenueMessageContent;
import org.telegram.telegrambots.meta.api.objects.inlinequery.result.InlineQueryResultArticle;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class InlineQueryResultArticle_ESTest extends InlineQueryResultArticle_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      InlineQueryResultArticle inlineQueryResultArticle0 = new InlineQueryResultArticle();
      inlineQueryResultArticle0.setUrl(", inputMessageContent='");
      String string0 = inlineQueryResultArticle0.getUrl();
      assertEquals(", inputMessageContent='", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      InlineQueryResultArticle inlineQueryResultArticle0 = new InlineQueryResultArticle();
      inlineQueryResultArticle0.setUrl("");
      String string0 = inlineQueryResultArticle0.getUrl();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      InlineQueryResultArticle inlineQueryResultArticle0 = new InlineQueryResultArticle();
      inlineQueryResultArticle0.setTitle("I$HvUJEk>G`J7GO*V");
      String string0 = inlineQueryResultArticle0.getTitle();
      assertEquals("I$HvUJEk>G`J7GO*V", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      InlineQueryResultArticle inlineQueryResultArticle0 = new InlineQueryResultArticle();
      inlineQueryResultArticle0.setTitle("");
      String string0 = inlineQueryResultArticle0.getTitle();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      InlineQueryResultArticle inlineQueryResultArticle0 = new InlineQueryResultArticle();
      Integer integer0 = new Integer(0);
      inlineQueryResultArticle0.setThumbWidth(integer0);
      Integer integer1 = inlineQueryResultArticle0.getThumbWidth();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      InlineQueryResultArticle inlineQueryResultArticle0 = new InlineQueryResultArticle();
      Integer integer0 = new Integer((-2249));
      InlineQueryResultArticle inlineQueryResultArticle1 = inlineQueryResultArticle0.setThumbWidth(integer0);
      Integer integer1 = inlineQueryResultArticle1.getThumbWidth();
      assertEquals((-2249), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      InlineQueryResultArticle inlineQueryResultArticle0 = new InlineQueryResultArticle();
      inlineQueryResultArticle0.setThumbUrl("k! k(R_");
      String string0 = inlineQueryResultArticle0.getThumbUrl();
      assertEquals("k! k(R_", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      InlineQueryResultArticle inlineQueryResultArticle0 = new InlineQueryResultArticle();
      InlineQueryResultArticle inlineQueryResultArticle1 = inlineQueryResultArticle0.setThumbUrl("");
      String string0 = inlineQueryResultArticle1.getThumbUrl();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      InlineQueryResultArticle inlineQueryResultArticle0 = new InlineQueryResultArticle();
      Integer integer0 = new Integer(0);
      inlineQueryResultArticle0.setThumbHeight(integer0);
      Integer integer1 = inlineQueryResultArticle0.getThumbHeight();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      InlineQueryResultArticle inlineQueryResultArticle0 = new InlineQueryResultArticle();
      Integer integer0 = new Integer((-3917));
      inlineQueryResultArticle0.setThumbHeight(integer0);
      Integer integer1 = inlineQueryResultArticle0.getThumbHeight();
      assertEquals((-3917), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      InlineQueryResultArticle inlineQueryResultArticle0 = new InlineQueryResultArticle();
      InlineKeyboardMarkup inlineKeyboardMarkup0 = new InlineKeyboardMarkup();
      InlineQueryResultArticle inlineQueryResultArticle1 = inlineQueryResultArticle0.setReplyMarkup(inlineKeyboardMarkup0);
      InlineKeyboardMarkup inlineKeyboardMarkup1 = inlineQueryResultArticle1.getReplyMarkup();
      assertSame(inlineKeyboardMarkup0, inlineKeyboardMarkup1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      InlineQueryResultArticle inlineQueryResultArticle0 = new InlineQueryResultArticle();
      InputVenueMessageContent inputVenueMessageContent0 = new InputVenueMessageContent();
      inlineQueryResultArticle0.setInputMessageContent(inputVenueMessageContent0);
      InputVenueMessageContent inputVenueMessageContent1 = (InputVenueMessageContent)inlineQueryResultArticle0.getInputMessageContent();
      assertNull(inputVenueMessageContent1.getAddress());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      InlineQueryResultArticle inlineQueryResultArticle0 = new InlineQueryResultArticle();
      InlineQueryResultArticle inlineQueryResultArticle1 = inlineQueryResultArticle0.setId("ZgO?i~9w6{(1!t");
      String string0 = inlineQueryResultArticle1.getId();
      assertEquals("ZgO?i~9w6{(1!t", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      InlineQueryResultArticle inlineQueryResultArticle0 = new InlineQueryResultArticle();
      InlineQueryResultArticle inlineQueryResultArticle1 = inlineQueryResultArticle0.setId("");
      String string0 = inlineQueryResultArticle1.getId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      InlineQueryResultArticle inlineQueryResultArticle0 = new InlineQueryResultArticle();
      Boolean boolean0 = Boolean.valueOf(true);
      inlineQueryResultArticle0.setHideUrl(boolean0);
      Boolean boolean1 = inlineQueryResultArticle0.getHideUrl();
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      InlineQueryResultArticle inlineQueryResultArticle0 = new InlineQueryResultArticle();
      Boolean boolean0 = new Boolean("PK$sjI)");
      inlineQueryResultArticle0.setHideUrl(boolean0);
      Boolean boolean1 = inlineQueryResultArticle0.getHideUrl();
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      InlineQueryResultArticle inlineQueryResultArticle0 = new InlineQueryResultArticle();
      inlineQueryResultArticle0.setDescription("k! k(R_");
      String string0 = inlineQueryResultArticle0.getDescription();
      assertEquals("k! k(R_", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      InlineQueryResultArticle inlineQueryResultArticle0 = new InlineQueryResultArticle();
      inlineQueryResultArticle0.setDescription("");
      String string0 = inlineQueryResultArticle0.getDescription();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      InlineQueryResultArticle inlineQueryResultArticle0 = new InlineQueryResultArticle();
      InlineQueryResultArticle inlineQueryResultArticle1 = inlineQueryResultArticle0.setTitle("j");
      InlineQueryResultArticle inlineQueryResultArticle2 = inlineQueryResultArticle1.setId("j");
      InputTextMessageContent inputTextMessageContent0 = new InputTextMessageContent();
      inputTextMessageContent0.setMessageText("j");
      inlineQueryResultArticle2.setInputMessageContent(inputTextMessageContent0);
      inlineQueryResultArticle2.validate();
      assertSame(inlineQueryResultArticle1, inlineQueryResultArticle2);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      InlineQueryResultArticle inlineQueryResultArticle0 = new InlineQueryResultArticle();
      InlineQueryResultArticle inlineQueryResultArticle1 = inlineQueryResultArticle0.setTitle("vcard");
      InputTextMessageContent inputTextMessageContent0 = new InputTextMessageContent();
      inlineQueryResultArticle0.setInputMessageContent(inputTextMessageContent0);
      inlineQueryResultArticle1.setId("vcard");
      try { 
        inlineQueryResultArticle0.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // MessageText parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.objects.inlinequery.inputmessagecontent.InputTextMessageContent", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      InlineQueryResultArticle inlineQueryResultArticle0 = new InlineQueryResultArticle();
      InlineQueryResultArticle inlineQueryResultArticle1 = inlineQueryResultArticle0.setId("K-C6Gf?F,np/ErR");
      inlineQueryResultArticle1.setTitle("");
      try { 
        inlineQueryResultArticle0.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Title parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.objects.inlinequery.result.InlineQueryResultArticle", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      InlineQueryResultArticle inlineQueryResultArticle0 = new InlineQueryResultArticle();
      InlineQueryResultArticle inlineQueryResultArticle1 = inlineQueryResultArticle0.setTitle("vcard");
      inlineQueryResultArticle1.setId("vcard");
      try { 
        inlineQueryResultArticle0.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // InputMessageContent parameter can't be null
         //
         verifyException("org.telegram.telegrambots.meta.api.objects.inlinequery.result.InlineQueryResultArticle", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      InlineQueryResultArticle inlineQueryResultArticle0 = new InlineQueryResultArticle();
      InlineQueryResultArticle inlineQueryResultArticle1 = inlineQueryResultArticle0.setId("");
      try { 
        inlineQueryResultArticle1.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // ID parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.objects.inlinequery.result.InlineQueryResultArticle", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      InlineQueryResultArticle inlineQueryResultArticle0 = new InlineQueryResultArticle();
      inlineQueryResultArticle0.setId("vcard");
      try { 
        inlineQueryResultArticle0.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Title parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.objects.inlinequery.result.InlineQueryResultArticle", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      InlineQueryResultArticle inlineQueryResultArticle0 = new InlineQueryResultArticle();
      try { 
        inlineQueryResultArticle0.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // ID parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.objects.inlinequery.result.InlineQueryResultArticle", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      InlineQueryResultArticle inlineQueryResultArticle0 = new InlineQueryResultArticle();
      Integer integer0 = inlineQueryResultArticle0.getThumbHeight();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      InlineQueryResultArticle inlineQueryResultArticle0 = new InlineQueryResultArticle();
      Integer integer0 = inlineQueryResultArticle0.getThumbWidth();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      InlineQueryResultArticle inlineQueryResultArticle0 = new InlineQueryResultArticle();
      InlineKeyboardMarkup inlineKeyboardMarkup0 = inlineQueryResultArticle0.getReplyMarkup();
      assertNull(inlineKeyboardMarkup0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      InlineQueryResultArticle inlineQueryResultArticle0 = new InlineQueryResultArticle();
      InputMessageContent inputMessageContent0 = inlineQueryResultArticle0.getInputMessageContent();
      assertNull(inputMessageContent0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      InlineQueryResultArticle inlineQueryResultArticle0 = new InlineQueryResultArticle();
      InlineKeyboardMarkup inlineKeyboardMarkup0 = new InlineKeyboardMarkup();
      InlineQueryResultArticle inlineQueryResultArticle1 = inlineQueryResultArticle0.setReplyMarkup(inlineKeyboardMarkup0);
      InlineQueryResultArticle inlineQueryResultArticle2 = inlineQueryResultArticle1.setTitle("vcard");
      InputTextMessageContent inputTextMessageContent0 = new InputTextMessageContent();
      inputTextMessageContent0.setMessageText("vcard");
      inlineQueryResultArticle1.setInputMessageContent(inputTextMessageContent0);
      inlineQueryResultArticle2.setId("vcard");
      inlineQueryResultArticle0.validate();
      assertEquals("article", inlineQueryResultArticle0.getType());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      InlineQueryResultArticle inlineQueryResultArticle0 = new InlineQueryResultArticle();
      String string0 = inlineQueryResultArticle0.getTitle();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      InlineQueryResultArticle inlineQueryResultArticle0 = new InlineQueryResultArticle();
      Integer integer0 = new Integer(45);
      inlineQueryResultArticle0.setThumbHeight(integer0);
      Integer integer1 = inlineQueryResultArticle0.getThumbHeight();
      assertEquals(45, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      InlineQueryResultArticle inlineQueryResultArticle0 = new InlineQueryResultArticle();
      String string0 = inlineQueryResultArticle0.getType();
      assertEquals("article", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      InlineQueryResultArticle inlineQueryResultArticle0 = new InlineQueryResultArticle();
      String string0 = inlineQueryResultArticle0.getThumbUrl();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      InlineQueryResultArticle inlineQueryResultArticle0 = new InlineQueryResultArticle();
      String string0 = inlineQueryResultArticle0.getUrl();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      InlineQueryResultArticle inlineQueryResultArticle0 = new InlineQueryResultArticle();
      Boolean boolean0 = inlineQueryResultArticle0.getHideUrl();
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      InlineQueryResultArticle inlineQueryResultArticle0 = new InlineQueryResultArticle();
      String string0 = inlineQueryResultArticle0.getId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      InlineQueryResultArticle inlineQueryResultArticle0 = new InlineQueryResultArticle();
      Integer integer0 = new Integer(1695);
      inlineQueryResultArticle0.setThumbWidth(integer0);
      Integer integer1 = inlineQueryResultArticle0.getThumbWidth();
      assertEquals(1695, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      InlineQueryResultArticle inlineQueryResultArticle0 = new InlineQueryResultArticle();
      String string0 = inlineQueryResultArticle0.toString();
      assertEquals("InlineQueryResultArticle{type='article', id='null', title='null', inputMessageContent='null', replyMarkup='null', url='null', hideUrl=null, description='null', thumbUrl='null', thumbWidth=null, thumbHeight=null}", string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      InlineQueryResultArticle inlineQueryResultArticle0 = new InlineQueryResultArticle();
      String string0 = inlineQueryResultArticle0.getDescription();
      assertNull(string0);
  }
}
