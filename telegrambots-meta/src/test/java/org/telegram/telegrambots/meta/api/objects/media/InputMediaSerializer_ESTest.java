/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 26 12:37:18 GMT 2018
 */

package org.telegram.telegrambots.meta.api.objects.media;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.base.GeneratorBase;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.WriterBasedJsonGenerator;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataOutput;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.Writer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.junit.runner.RunWith;
import org.telegram.telegrambots.meta.api.objects.InputFile;
import org.telegram.telegrambots.meta.api.objects.media.InputMedia;
import org.telegram.telegrambots.meta.api.objects.media.InputMediaAnimation;
import org.telegram.telegrambots.meta.api.objects.media.InputMediaAudio;
import org.telegram.telegrambots.meta.api.objects.media.InputMediaDocument;
import org.telegram.telegrambots.meta.api.objects.media.InputMediaPhoto;
import org.telegram.telegrambots.meta.api.objects.media.InputMediaSerializer;
import org.telegram.telegrambots.meta.api.objects.media.InputMediaVideo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class InputMediaSerializer_ESTest extends InputMediaSerializer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      InputMediaSerializer inputMediaSerializer0 = new InputMediaSerializer();
      InputMedia<Integer> inputMedia0 = (InputMedia<Integer>) mock(InputMedia.class, new ViolatedAssumptionAnswer());
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "supports_streaming", true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1289), (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 0, false);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        inputMediaSerializer0.serializeWithType((InputMedia) inputMedia0, (JsonGenerator) uTF8JsonGenerator0, (SerializerProvider) defaultSerializerProvider_Impl0, (TypeSerializer) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      InputMediaSerializer inputMediaSerializer0 = new InputMediaSerializer();
      InputMediaAnimation inputMediaAnimation0 = new InputMediaAnimation("", "U*NG");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, inputMediaSerializer0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1), (ObjectCodec) null, mockPrintStream0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      uTF8JsonGenerator0.writeStartObject((Object) jsonGenerator_Feature0);
      try { 
        inputMediaSerializer0.serializeWithType((InputMedia) inputMediaAnimation0, (JsonGenerator) uTF8JsonGenerator0, (SerializerProvider) defaultSerializerProvider_Impl0, (TypeSerializer) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not start an object, expecting field name (context: Object)
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      InputMediaSerializer inputMediaSerializer0 = new InputMediaSerializer();
      InputMedia<Object> inputMedia0 = (InputMedia<Object>) mock(InputMedia.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(inputMedia0).getMedia();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, inputMedia0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      MockFile mockFile0 = new MockFile("JSON", "caption");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[2];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, objectMapper0, bufferedOutputStream0, byteArray0, 1, true);
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProvider();
      // Undeclared exception!
      inputMediaSerializer0.serialize((InputMedia) inputMedia0, (JsonGenerator) uTF8JsonGenerator0, serializerProvider0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      InputMediaSerializer inputMediaSerializer0 = new InputMediaSerializer();
      InputMedia<Integer> inputMedia0 = (InputMedia<Integer>) mock(InputMedia.class, new ViolatedAssumptionAnswer());
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        inputMediaSerializer0.serialize((InputMedia) inputMedia0, (JsonGenerator) null, (SerializerProvider) defaultSerializerProvider_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.telegram.telegrambots.meta.api.objects.media.InputMediaSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      InputMediaSerializer inputMediaSerializer0 = new InputMediaSerializer();
      InputMediaPhoto inputMediaPhoto0 = new InputMediaPhoto("R]'rW&t%V>]Y", "R]'rW&t%V>]Y");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0.BYTE_WRITE_ENCODING_BUFFER, false);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(inputMediaPhoto0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1138);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
      byte[] byteArray0 = new byte[2];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, objectReader0, filterOutputStream0, byteArray0, 3, false);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        inputMediaSerializer0.serialize((InputMedia) inputMediaPhoto0, (JsonGenerator) uTF8JsonGenerator0, (SerializerProvider) defaultSerializerProvider_Impl0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FilterOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      InputMediaSerializer inputMediaSerializer0 = new InputMediaSerializer();
      InputMedia<String> inputMedia0 = (InputMedia<String>) mock(InputMedia.class, new ViolatedAssumptionAnswer());
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "FAIL_ON_IGNORED_PROPERTIES", false);
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 22);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, objectMapper0, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 3, false);
      // Undeclared exception!
      try { 
        inputMediaSerializer0.serialize((InputMedia) inputMedia0, (JsonGenerator) uTF8JsonGenerator0, (SerializerProvider) defaultSerializerProvider_Impl0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      InputMediaSerializer inputMediaSerializer0 = new InputMediaSerializer();
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((DataOutput) null);
      InputMediaPhoto inputMediaPhoto0 = new InputMediaPhoto("media", "type");
      jsonGenerator0.writeStartObject();
      try { 
        inputMediaSerializer0.serialize((InputMedia) inputMediaPhoto0, jsonGenerator0, (SerializerProvider) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not start an object, expecting field name (context: Object)
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      InputMediaSerializer inputMediaSerializer0 = new InputMediaSerializer();
      InputMedia<Object> inputMedia0 = (InputMedia<Object>) mock(InputMedia.class, new ViolatedAssumptionAnswer());
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, inputMedia0, false);
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      ObjectReader objectReader0 = objectMapper0.reader(jsonNodeFactory0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, objectReader0, (Writer) null);
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProvider();
      InputMedia<String> inputMedia1 = (InputMedia<String>) mock(InputMedia.class, new ViolatedAssumptionAnswer());
      doReturn("parse_mode", "T]z").when(inputMedia1).getCaption();
      doReturn("parse_mode").when(inputMedia1).getMedia();
      doReturn("media", "").when(inputMedia1).getParseMode();
      doReturn("JSON").when(inputMedia1).getType();
      inputMediaSerializer0.serialize((InputMedia) inputMedia1, (JsonGenerator) writerBasedJsonGenerator0, serializerProvider0);
      assertEquals(60, writerBasedJsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      InputMediaSerializer inputMediaSerializer0 = new InputMediaSerializer();
      InputMediaVideo inputMediaVideo0 = new InputMediaVideo();
      MockFile mockFile0 = new MockFile("supports_streaming", "caption");
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((File) mockFile0, jsonEncoding0);
      Boolean boolean0 = new Boolean("thumb");
      inputMediaVideo0.setSupportsStreaming(boolean0);
      inputMediaSerializer0.serialize((InputMedia) inputMediaVideo0, jsonGenerator0, (SerializerProvider) null);
      assertEquals(56, jsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      InputMediaSerializer inputMediaSerializer0 = new InputMediaSerializer();
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) null);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      InputMediaVideo inputMediaVideo0 = new InputMediaVideo();
      InputMediaVideo inputMediaVideo1 = inputMediaVideo0.setWidth((Integer) ((GeneratorBase) jsonGenerator0).SURR1_LAST);
      inputMediaSerializer0.serialize((InputMedia) inputMediaVideo1, jsonGenerator0, (SerializerProvider) defaultSerializerProvider_Impl0);
      assertEquals(43, jsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      InputMediaSerializer inputMediaSerializer0 = new InputMediaSerializer();
      InputMediaVideo inputMediaVideo0 = new InputMediaVideo();
      MockFile mockFile0 = new MockFile("supports_streaming", "caption");
      Integer integer0 = new Integer(0);
      InputMediaVideo inputMediaVideo1 = inputMediaVideo0.setHeight(integer0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((File) mockFile0, jsonEncoding0);
      inputMediaSerializer0.serialize((InputMedia) inputMediaVideo1, jsonGenerator0, (SerializerProvider) null);
      assertEquals(40, jsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      InputMediaSerializer inputMediaSerializer0 = new InputMediaSerializer();
      InputMediaVideo inputMediaVideo0 = new InputMediaVideo();
      MockFile mockFile0 = new MockFile("supports_streaming", "caption");
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((File) mockFile0, jsonEncoding0);
      inputMediaVideo0.setDuration((Integer) ((GeneratorBase) jsonGenerator0).SURR2_LAST);
      inputMediaSerializer0.serialize((InputMedia) inputMediaVideo0, jsonGenerator0, (SerializerProvider) null);
      assertEquals(46, jsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      InputMediaSerializer inputMediaSerializer0 = new InputMediaSerializer();
      InputMediaVideo inputMediaVideo0 = new InputMediaVideo();
      InputFile inputFile0 = new InputFile();
      MockFile mockFile0 = new MockFile("supports_streaming", "caption");
      inputMediaVideo0.setThumb(inputFile0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((File) mockFile0, jsonEncoding0);
      inputMediaSerializer0.serialize((InputMedia) inputMediaVideo0, jsonGenerator0, (SerializerProvider) null);
      assertEquals(42, jsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      InputMediaSerializer inputMediaSerializer0 = new InputMediaSerializer();
      InputMediaDocument inputMediaDocument0 = new InputMediaDocument("", ".9Hq");
      InputFile inputFile0 = new InputFile("thumb");
      InputMediaDocument inputMediaDocument1 = inputMediaDocument0.setThumb(inputFile0);
      JsonFactory jsonFactory0 = new JsonFactory();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) pipedOutputStream0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      inputMediaSerializer0.serialize((InputMedia) inputMediaDocument1, jsonGenerator0, (SerializerProvider) defaultSerializerProvider_Impl0);
      assertEquals(63, jsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      InputMediaSerializer inputMediaSerializer0 = new InputMediaSerializer();
      InputMediaDocument inputMediaDocument0 = new InputMediaDocument("", ".9Hq");
      JsonFactory jsonFactory0 = new JsonFactory();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) pipedOutputStream0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      inputMediaSerializer0.serialize((InputMedia) inputMediaDocument0, jsonGenerator0, (SerializerProvider) defaultSerializerProvider_Impl0);
      assertEquals(47, jsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      InputMediaSerializer inputMediaSerializer0 = new InputMediaSerializer();
      InputMediaAnimation inputMediaAnimation0 = new InputMediaAnimation();
      Integer integer0 = new Integer(2047);
      InputMediaAnimation inputMediaAnimation1 = inputMediaAnimation0.setWidth(integer0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) null);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      inputMediaSerializer0.serialize((InputMedia) inputMediaAnimation1, jsonGenerator0, (SerializerProvider) defaultSerializerProvider_Impl0);
      assertEquals(46, jsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      InputMediaSerializer inputMediaSerializer0 = new InputMediaSerializer();
      InputMediaAnimation inputMediaAnimation0 = new InputMediaAnimation();
      JsonFactory jsonFactory0 = new JsonFactory();
      MockFile mockFile0 = new MockFile("height");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((DataOutput) dataOutputStream0, jsonEncoding0);
      inputMediaAnimation0.setHeight((Integer) ((GeneratorBase) jsonGenerator0).SURR2_LAST);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      inputMediaSerializer0.serialize((InputMedia) inputMediaAnimation0, jsonGenerator0, (SerializerProvider) defaultSerializerProvider_Impl0);
      assertEquals(48, jsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      InputMediaSerializer inputMediaSerializer0 = new InputMediaSerializer();
      InputMediaAnimation inputMediaAnimation0 = new InputMediaAnimation();
      Integer integer0 = new Integer(2047);
      inputMediaAnimation0.setDuration(integer0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) null);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      inputMediaSerializer0.serialize((InputMedia) inputMediaAnimation0, jsonGenerator0, (SerializerProvider) defaultSerializerProvider_Impl0);
      assertEquals(49, jsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      InputMediaSerializer inputMediaSerializer0 = new InputMediaSerializer();
      InputMediaAnimation inputMediaAnimation0 = new InputMediaAnimation();
      InputFile inputFile0 = new InputFile();
      InputMediaAnimation inputMediaAnimation1 = inputMediaAnimation0.setThumb(inputFile0);
      JsonFactory jsonFactory0 = new JsonFactory();
      MockFile mockFile0 = new MockFile("height");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((DataOutput) dataOutputStream0, jsonEncoding0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      inputMediaSerializer0.serialize((InputMedia) inputMediaAnimation1, jsonGenerator0, (SerializerProvider) defaultSerializerProvider_Impl0);
      assertEquals(46, jsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      InputMediaSerializer inputMediaSerializer0 = new InputMediaSerializer();
      InputMediaAudio inputMediaAudio0 = new InputMediaAudio("(CTRL-CHAR, code ", (String) null);
      InputMediaAudio inputMediaAudio1 = inputMediaAudio0.setTitle("media");
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("parse_mode");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0, true);
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((Writer) mockPrintWriter0);
      inputMediaSerializer0.serialize((InputMedia) inputMediaAudio1, jsonGenerator0, (SerializerProvider) null);
      assertEquals(60, jsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      InputMediaSerializer inputMediaSerializer0 = new InputMediaSerializer();
      InputMediaAudio inputMediaAudio0 = new InputMediaAudio("(CTRL-CHAR, code ", (String) null);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("parse_mode");
      Integer integer0 = new Integer(0);
      inputMediaAudio0.setDuration(integer0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0, true);
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((Writer) mockPrintWriter0);
      inputMediaSerializer0.serialize((InputMedia) inputMediaAudio0, jsonGenerator0, (SerializerProvider) null);
      assertEquals(57, jsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      InputMediaSerializer inputMediaSerializer0 = new InputMediaSerializer();
      InputMediaAudio inputMediaAudio0 = new InputMediaAudio("(CTRL-CHAR, code ", (String) null);
      InputFile inputFile0 = new InputFile();
      inputMediaAudio0.setThumb(inputFile0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("parse_mode");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0, true);
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((Writer) mockPrintWriter0);
      inputMediaSerializer0.serialize((InputMedia) inputMediaAudio0, jsonGenerator0, (SerializerProvider) null);
      assertEquals(57, jsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      InputMediaSerializer inputMediaSerializer0 = new InputMediaSerializer();
      InputMedia<Object> inputMedia0 = (InputMedia<Object>) mock(InputMedia.class, new ViolatedAssumptionAnswer());
      doReturn("2", "2").when(inputMedia0).getCaption();
      doReturn("").when(inputMedia0).getMedia();
      doReturn("", (String) null).when(inputMedia0).getParseMode();
      doReturn("").when(inputMedia0).getType();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, inputMedia0, false);
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      ObjectReader objectReader0 = objectMapper0.reader(jsonNodeFactory0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, objectReader0, (Writer) null);
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProvider();
      inputMediaSerializer0.serializeWithType((InputMedia) inputMedia0, (JsonGenerator) writerBasedJsonGenerator0, serializerProvider0, (TypeSerializer) null);
      //  // Unstable assertion: assertEquals(47, writerBasedJsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      InputMediaSerializer inputMediaSerializer0 = new InputMediaSerializer();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        inputMediaSerializer0.serializeWithType((InputMedia) null, (JsonGenerator) null, (SerializerProvider) defaultSerializerProvider_Impl0, (TypeSerializer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.telegram.telegrambots.meta.api.objects.media.InputMediaSerializer", e);
      }
  }
}
