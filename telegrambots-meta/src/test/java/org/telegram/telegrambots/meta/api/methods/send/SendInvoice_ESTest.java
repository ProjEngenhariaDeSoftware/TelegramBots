/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 26 12:43:47 GMT 2018
 */

package org.telegram.telegrambots.meta.api.methods.send;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.telegram.telegrambots.meta.api.methods.send.SendInvoice;
import org.telegram.telegrambots.meta.api.objects.payments.LabeledPrice;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SendInvoice_ESTest extends SendInvoice_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Integer integer0 = new Integer(0);
      LinkedList<LabeledPrice> linkedList0 = new LinkedList<LabeledPrice>();
      SendInvoice sendInvoice0 = new SendInvoice(integer0, "ChatId parameter can't be empty", "ChatId parameter can't be empty", "ChatId parameter can't be empty", "ChatId parameter can't be empty", "", "ChatId parameter can't be empty", linkedList0);
      String string0 = sendInvoice0.getTitle();
      assertEquals("", sendInvoice0.getStartParameter());
      assertEquals("ChatId parameter can't be empty", sendInvoice0.getDescription());
      assertEquals("ChatId parameter can't be empty", string0);
      assertEquals("ChatId parameter can't be empty", sendInvoice0.getCurrency());
      assertEquals("ChatId parameter can't be empty", sendInvoice0.getPayload());
      assertEquals("ChatId parameter can't be empty", sendInvoice0.getProviderToken());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Integer integer0 = new Integer(0);
      LinkedList<LabeledPrice> linkedList0 = new LinkedList<LabeledPrice>();
      SendInvoice sendInvoice0 = new SendInvoice(integer0, "", "", "", "4", "is_flexible", "", linkedList0);
      String string0 = sendInvoice0.getTitle();
      assertEquals("", sendInvoice0.getCurrency());
      assertEquals("", sendInvoice0.getDescription());
      assertEquals("is_flexible", sendInvoice0.getStartParameter());
      assertEquals("", string0);
      assertEquals("4", sendInvoice0.getProviderToken());
      assertEquals("", sendInvoice0.getPayload());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Integer integer0 = new Integer(0);
      LinkedList<LabeledPrice> linkedList0 = new LinkedList<LabeledPrice>();
      SendInvoice sendInvoice0 = new SendInvoice(integer0, "W0|9Ji)-t2(b", "W0|9Ji)-t2(b", "W0|9Ji)-t2(b", "value not one of declared Enum instance names: %s", "", "W0|9Ji)-t2(b", linkedList0);
      assertEquals("", sendInvoice0.getStartParameter());
      
      SendInvoice sendInvoice1 = sendInvoice0.setStartParameter("sendinvoice");
      sendInvoice1.getStartParameter();
      assertEquals("value not one of declared Enum instance names: %s", sendInvoice0.getProviderToken());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      SendInvoice sendInvoice0 = new SendInvoice();
      Integer integer0 = new Integer(39);
      sendInvoice0.setReplyToMessageId(integer0);
      Integer integer1 = sendInvoice0.getReplyToMessageId();
      assertEquals(39, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Integer integer0 = new Integer(0);
      LinkedList<LabeledPrice> linkedList0 = new LinkedList<LabeledPrice>();
      SendInvoice sendInvoice0 = new SendInvoice(integer0, "ChatId parameter can't be empty", "ChatId parameter can't be empty", "", "description", "\"?H}1Ay,", "y#@kRT/R8A9-", linkedList0);
      SendInvoice sendInvoice1 = sendInvoice0.setReplyToMessageId(integer0);
      sendInvoice1.getReplyToMessageId();
      assertEquals("ChatId parameter can't be empty", sendInvoice1.getDescription());
      assertEquals("ChatId parameter can't be empty", sendInvoice1.getTitle());
      assertEquals("", sendInvoice1.getPayload());
      assertEquals("description", sendInvoice1.getProviderToken());
      assertEquals("\"?H}1Ay,", sendInvoice1.getStartParameter());
      assertEquals("y#@kRT/R8A9-", sendInvoice1.getCurrency());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      SendInvoice sendInvoice0 = new SendInvoice();
      Integer integer0 = new Integer((-1434));
      sendInvoice0.setReplyToMessageId(integer0);
      Integer integer1 = sendInvoice0.getReplyToMessageId();
      assertEquals((-1434), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      SendInvoice sendInvoice0 = new SendInvoice();
      Integer integer0 = new Integer((-13));
      sendInvoice0.setReplyToMessageId(integer0);
      Integer integer1 = sendInvoice0.getReplyToMessageId();
      assertEquals((-13), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Integer integer0 = new Integer(809);
      LinkedList<LabeledPrice> linkedList0 = new LinkedList<LabeledPrice>();
      SendInvoice sendInvoice0 = new SendInvoice(integer0, "", "``k^N/A.r", "``k^N/A.r", "READ_ENUMS_USING_TO_STRING", "READ_ENUMS_USING_TO_STRING", ")i-i,Zbb)c&{G[7N$H*", linkedList0);
      InlineKeyboardMarkup inlineKeyboardMarkup0 = new InlineKeyboardMarkup();
      sendInvoice0.setReplyMarkup(inlineKeyboardMarkup0);
      sendInvoice0.getReplyMarkup();
      assertEquals("``k^N/A.r", sendInvoice0.getDescription());
      assertEquals(")i-i,Zbb)c&{G[7N$H*", sendInvoice0.getCurrency());
      assertEquals("", sendInvoice0.getTitle());
      assertEquals("READ_ENUMS_USING_TO_STRING", sendInvoice0.getProviderToken());
      assertEquals("READ_ENUMS_USING_TO_STRING", sendInvoice0.getStartParameter());
      assertEquals("``k^N/A.r", sendInvoice0.getPayload());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Integer integer0 = new Integer(0);
      LinkedList<LabeledPrice> linkedList0 = new LinkedList<LabeledPrice>();
      SendInvoice sendInvoice0 = new SendInvoice(integer0, "", "", "", "4", "is_flexible", "", linkedList0);
      String string0 = sendInvoice0.getProviderToken();
      assertEquals("", sendInvoice0.getCurrency());
      assertEquals("is_flexible", sendInvoice0.getStartParameter());
      assertEquals("4", string0);
      assertEquals("", sendInvoice0.getDescription());
      assertEquals("", sendInvoice0.getPayload());
      assertEquals("", sendInvoice0.getTitle());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      SendInvoice sendInvoice0 = new SendInvoice();
      SendInvoice sendInvoice1 = sendInvoice0.setProviderToken("");
      String string0 = sendInvoice1.getProviderToken();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      SendInvoice sendInvoice0 = new SendInvoice();
      SendInvoice sendInvoice1 = sendInvoice0.setProviderData("");
      String string0 = sendInvoice1.getProviderData();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      SendInvoice sendInvoice0 = new SendInvoice();
      LinkedList<LabeledPrice> linkedList0 = new LinkedList<LabeledPrice>();
      SendInvoice sendInvoice1 = sendInvoice0.setPrices(linkedList0);
      List<LabeledPrice> list0 = sendInvoice1.getPrices();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Integer integer0 = new Integer(0);
      LinkedList<LabeledPrice> linkedList0 = new LinkedList<LabeledPrice>();
      SendInvoice sendInvoice0 = new SendInvoice(integer0, "E", "E", "E", "E", "E", "E", linkedList0);
      LabeledPrice labeledPrice0 = new LabeledPrice("sendinvoice", integer0);
      linkedList0.add(labeledPrice0);
      sendInvoice0.getPrices();
      assertEquals("E", sendInvoice0.getDescription());
      assertEquals("E", sendInvoice0.getStartParameter());
      assertEquals("E", sendInvoice0.getTitle());
      assertEquals("E", sendInvoice0.getCurrency());
      assertEquals("E", sendInvoice0.getPayload());
      assertEquals("E", sendInvoice0.getProviderToken());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      SendInvoice sendInvoice0 = new SendInvoice();
      Integer integer0 = new Integer(0);
      SendInvoice sendInvoice1 = sendInvoice0.setPhotoWidth(integer0);
      Integer integer1 = sendInvoice1.getPhotoWidth();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      SendInvoice sendInvoice0 = new SendInvoice();
      Integer integer0 = new Integer(14);
      sendInvoice0.setPhotoWidth(integer0);
      Integer integer1 = sendInvoice0.getPhotoWidth();
      assertEquals(14, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Integer integer0 = new Integer((-10));
      LinkedList<LabeledPrice> linkedList0 = new LinkedList<LabeledPrice>();
      SendInvoice sendInvoice0 = new SendInvoice(integer0, "prices", "prices", "prices", "", "prices", "", linkedList0);
      sendInvoice0.setPhotoWidth(integer0);
      sendInvoice0.getPhotoWidth();
      assertEquals("prices", sendInvoice0.getPayload());
      assertEquals("prices", sendInvoice0.getTitle());
      assertEquals("prices", sendInvoice0.getDescription());
      assertEquals("prices", sendInvoice0.getStartParameter());
      assertEquals("", sendInvoice0.getCurrency());
      assertEquals("", sendInvoice0.getProviderToken());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      SendInvoice sendInvoice0 = new SendInvoice();
      sendInvoice0.setPhotoUrl("sendinvoice");
      String string0 = sendInvoice0.getPhotoUrl();
      assertEquals("sendinvoice", string0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      SendInvoice sendInvoice0 = new SendInvoice();
      sendInvoice0.setPhotoUrl("");
      String string0 = sendInvoice0.getPhotoUrl();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      SendInvoice sendInvoice0 = new SendInvoice();
      Integer integer0 = new Integer(0);
      SendInvoice sendInvoice1 = sendInvoice0.setPhotoSize(integer0);
      Integer integer1 = sendInvoice1.getPhotoSize();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      SendInvoice sendInvoice0 = new SendInvoice();
      Integer integer0 = new Integer(384);
      sendInvoice0.setPhotoSize(integer0);
      Integer integer1 = sendInvoice0.getPhotoSize();
      assertEquals(384, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      SendInvoice sendInvoice0 = new SendInvoice();
      Integer integer0 = new Integer(0);
      sendInvoice0.setPhotoHeight(integer0);
      Integer integer1 = sendInvoice0.getPhotoHeight();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      SendInvoice sendInvoice0 = new SendInvoice();
      Integer integer0 = new Integer(833);
      sendInvoice0.setPhotoHeight(integer0);
      Integer integer1 = sendInvoice0.getPhotoHeight();
      assertEquals(833, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Integer integer0 = new Integer((-13));
      LinkedList<LabeledPrice> linkedList0 = new LinkedList<LabeledPrice>();
      SendInvoice sendInvoice0 = new SendInvoice(integer0, "Rm", "uYj,", ", replyMarkup=", "uYj,", "}6uk^w3Q><WD&5", "}6uk^w3Q><WD&5", linkedList0);
      SendInvoice sendInvoice1 = sendInvoice0.setPhotoHeight(integer0);
      sendInvoice1.getPhotoHeight();
      assertEquals(", replyMarkup=", sendInvoice1.getPayload());
      assertEquals("}6uk^w3Q><WD&5", sendInvoice1.getCurrency());
      assertEquals("uYj,", sendInvoice1.getProviderToken());
      assertEquals("Rm", sendInvoice1.getTitle());
      assertEquals("}6uk^w3Q><WD&5", sendInvoice1.getStartParameter());
      assertEquals("uYj,", sendInvoice1.getDescription());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Integer integer0 = new Integer(200);
      LinkedList<LabeledPrice> linkedList0 = new LinkedList<LabeledPrice>();
      SendInvoice sendInvoice0 = new SendInvoice(integer0, "not a valid representation: %s", "not a valid representation: %s", "Zy", "not a valid representation: %s", "com.fasterxml.jackson.databind.type.MapLikeType", "", linkedList0);
      String string0 = sendInvoice0.getPayload();
      assertEquals("com.fasterxml.jackson.databind.type.MapLikeType", sendInvoice0.getStartParameter());
      assertEquals("not a valid representation: %s", sendInvoice0.getTitle());
      assertEquals("not a valid representation: %s", sendInvoice0.getProviderToken());
      assertEquals("Zy", string0);
      assertEquals("not a valid representation: %s", sendInvoice0.getDescription());
      assertEquals("", sendInvoice0.getCurrency());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      SendInvoice sendInvoice0 = new SendInvoice();
      sendInvoice0.setPayload("");
      String string0 = sendInvoice0.getPayload();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      SendInvoice sendInvoice0 = new SendInvoice();
      Boolean boolean0 = new Boolean(true);
      sendInvoice0.setNeedShippingAddress(boolean0);
      Boolean boolean1 = sendInvoice0.getNeedShippingAddress();
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      SendInvoice sendInvoice0 = new SendInvoice();
      Boolean boolean0 = new Boolean(", prices=");
      sendInvoice0.setNeedShippingAddress(boolean0);
      Boolean boolean1 = sendInvoice0.getNeedShippingAddress();
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Integer integer0 = new Integer(53);
      LinkedList<LabeledPrice> linkedList0 = new LinkedList<LabeledPrice>();
      SendInvoice sendInvoice0 = new SendInvoice(integer0, "qnn_)", "", "qnn_)", "qnn_)", "description", "", linkedList0);
      Boolean boolean0 = Boolean.valueOf("qnn_)");
      sendInvoice0.setNeedPhoneNumber(boolean0);
      sendInvoice0.getNeedPhoneNumber();
      assertEquals("", sendInvoice0.getCurrency());
      assertEquals("qnn_)", sendInvoice0.getProviderToken());
      assertEquals("description", sendInvoice0.getStartParameter());
      assertEquals("qnn_)", sendInvoice0.getTitle());
      assertEquals("qnn_)", sendInvoice0.getPayload());
      assertEquals("", sendInvoice0.getDescription());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      SendInvoice sendInvoice0 = new SendInvoice();
      Boolean boolean0 = Boolean.valueOf(true);
      sendInvoice0.setNeedName(boolean0);
      Boolean boolean1 = sendInvoice0.getNeedName();
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      SendInvoice sendInvoice0 = new SendInvoice();
      Boolean boolean0 = Boolean.valueOf("");
      SendInvoice sendInvoice1 = sendInvoice0.setNeedName(boolean0);
      Boolean boolean1 = sendInvoice1.getNeedName();
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      SendInvoice sendInvoice0 = new SendInvoice();
      Boolean boolean0 = Boolean.valueOf(true);
      sendInvoice0.setNeedEmail(boolean0);
      Boolean boolean1 = sendInvoice0.getNeedEmail();
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      SendInvoice sendInvoice0 = new SendInvoice();
      Boolean boolean0 = Boolean.FALSE;
      sendInvoice0.setNeedEmail(boolean0);
      Boolean boolean1 = sendInvoice0.getNeedEmail();
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Integer integer0 = new Integer((-725));
      LinkedList<LabeledPrice> linkedList0 = new LinkedList<LabeledPrice>();
      SendInvoice sendInvoice0 = new SendInvoice(integer0, "O x,jxc2A)u", "O x,jxc2A)u", "O x,jxc2A)u", "O x,jxc2A)u", "O x,jxc2A)u", "O x,jxc2A)u", linkedList0);
      Boolean boolean0 = Boolean.valueOf(true);
      SendInvoice sendInvoice1 = sendInvoice0.setFlexible(boolean0);
      sendInvoice1.getFlexible();
      assertEquals("O x,jxc2A)u", sendInvoice1.getCurrency());
      assertEquals("O x,jxc2A)u", sendInvoice1.getPayload());
      assertEquals("O x,jxc2A)u", sendInvoice1.getProviderToken());
      assertEquals("O x,jxc2A)u", sendInvoice1.getStartParameter());
      assertEquals("O x,jxc2A)u", sendInvoice1.getTitle());
      assertEquals("O x,jxc2A)u", sendInvoice1.getDescription());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Integer integer0 = new Integer((-725));
      LinkedList<LabeledPrice> linkedList0 = new LinkedList<LabeledPrice>();
      SendInvoice sendInvoice0 = new SendInvoice(integer0, "O x,jxc2A)u", "O x,jxc2A)u", "O x,jxc2A)u", "O x,jxc2A)u", "O x,jxc2A)u", "O x,jxc2A)u", linkedList0);
      Boolean boolean0 = Boolean.valueOf(false);
      SendInvoice sendInvoice1 = sendInvoice0.setFlexible(boolean0);
      sendInvoice1.getFlexible();
      assertEquals("O x,jxc2A)u", sendInvoice1.getProviderToken());
      assertEquals("O x,jxc2A)u", sendInvoice1.getStartParameter());
      assertEquals("O x,jxc2A)u", sendInvoice1.getDescription());
      assertEquals("O x,jxc2A)u", sendInvoice1.getCurrency());
      assertEquals("O x,jxc2A)u", sendInvoice1.getPayload());
      assertEquals("O x,jxc2A)u", sendInvoice1.getTitle());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      SendInvoice sendInvoice0 = new SendInvoice();
      Boolean boolean0 = new Boolean(true);
      SendInvoice sendInvoice1 = sendInvoice0.setDisableNotification(boolean0);
      Boolean boolean1 = sendInvoice1.getDisableNotification();
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      SendInvoice sendInvoice0 = new SendInvoice();
      Boolean boolean0 = Boolean.valueOf(false);
      SendInvoice sendInvoice1 = sendInvoice0.setDisableNotification(boolean0);
      Boolean boolean1 = sendInvoice1.getDisableNotification();
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      SendInvoice sendInvoice0 = new SendInvoice();
      String string0 = sendInvoice0.getDescription();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Integer integer0 = new Integer(0);
      LinkedList<LabeledPrice> linkedList0 = new LinkedList<LabeledPrice>();
      SendInvoice sendInvoice0 = new SendInvoice(integer0, "ChatId parameter can't be empty", "ChatId parameter can't be empty", "ChatId parameter can't be empty", "ChatId parameter can't be empty", "", "ChatId parameter can't be empty", linkedList0);
      String string0 = sendInvoice0.getDescription();
      assertEquals("", sendInvoice0.getStartParameter());
      assertEquals("ChatId parameter can't be empty", sendInvoice0.getTitle());
      assertEquals("ChatId parameter can't be empty", string0);
      assertEquals("ChatId parameter can't be empty", sendInvoice0.getCurrency());
      assertEquals("ChatId parameter can't be empty", sendInvoice0.getPayload());
      assertEquals("ChatId parameter can't be empty", sendInvoice0.getProviderToken());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Integer integer0 = new Integer((-31));
      LinkedList<LabeledPrice> linkedList0 = new LinkedList<LabeledPrice>();
      SendInvoice sendInvoice0 = new SendInvoice(integer0, "&Fk!lj_I/;[Y20", "&Fk!lj_I/;[Y20", "&Fk!lj_I/;[Y20", "date", "", "", linkedList0);
      String string0 = sendInvoice0.getCurrency();
      assertEquals("&Fk!lj_I/;[Y20", sendInvoice0.getTitle());
      assertEquals("date", sendInvoice0.getProviderToken());
      assertEquals("&Fk!lj_I/;[Y20", sendInvoice0.getPayload());
      assertEquals("", string0);
      assertEquals("", sendInvoice0.getStartParameter());
      assertEquals("&Fk!lj_I/;[Y20", sendInvoice0.getDescription());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      SendInvoice sendInvoice0 = new SendInvoice();
      Integer integer0 = new Integer(1);
      sendInvoice0.setChatId(integer0);
      Integer integer1 = sendInvoice0.getChatId();
      assertEquals(1, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      SendInvoice sendInvoice0 = new SendInvoice();
      Integer integer0 = new Integer(0);
      sendInvoice0.setChatId(integer0);
      Integer integer1 = sendInvoice0.getChatId();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Integer integer0 = new Integer(56320);
      LinkedList<LabeledPrice> linkedList0 = new LinkedList<LabeledPrice>();
      SendInvoice sendInvoice0 = new SendInvoice(integer0, ", needShippingAddress=", "", "c;R[2+AVSdV_", "", "c;R[2+AVSdV_", ",?1:T~mb]", linkedList0);
      sendInvoice0.getChatId();
      assertEquals("c;R[2+AVSdV_", sendInvoice0.getStartParameter());
      assertEquals("", sendInvoice0.getDescription());
      assertEquals("", sendInvoice0.getProviderToken());
      assertEquals(", needShippingAddress=", sendInvoice0.getTitle());
      assertEquals(",?1:T~mb]", sendInvoice0.getCurrency());
      assertEquals("c;R[2+AVSdV_", sendInvoice0.getPayload());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      SendInvoice sendInvoice0 = new SendInvoice();
      Integer integer0 = Integer.valueOf((-2805));
      SendInvoice sendInvoice1 = sendInvoice0.setChatId(integer0);
      Integer integer1 = sendInvoice1.getChatId();
      assertEquals((-2805), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Integer integer0 = new Integer(56315);
      LinkedList<LabeledPrice> linkedList0 = new LinkedList<LabeledPrice>();
      SendInvoice sendInvoice0 = new SendInvoice(integer0, ", needShippingAddress=", "", "c;R[2+AVSdV_", "", "c;R[2+AVSdV_", ",?1:T~mb]", linkedList0);
      sendInvoice0.getChatId();
      assertEquals(",?1:T~mb]", sendInvoice0.getCurrency());
      assertEquals("", sendInvoice0.getDescription());
      assertEquals("c;R[2+AVSdV_", sendInvoice0.getStartParameter());
      assertEquals("c;R[2+AVSdV_", sendInvoice0.getPayload());
      assertEquals("", sendInvoice0.getProviderToken());
      assertEquals(", needShippingAddress=", sendInvoice0.getTitle());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      SendInvoice sendInvoice0 = new SendInvoice();
      // Undeclared exception!
      try { 
        sendInvoice0.setTitle((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      SendInvoice sendInvoice0 = new SendInvoice();
      // Undeclared exception!
      try { 
        sendInvoice0.setStartParameter((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      SendInvoice sendInvoice0 = new SendInvoice();
      // Undeclared exception!
      try { 
        sendInvoice0.setProviderToken((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      SendInvoice sendInvoice0 = new SendInvoice();
      // Undeclared exception!
      try { 
        sendInvoice0.setPayload((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      SendInvoice sendInvoice0 = new SendInvoice();
      // Undeclared exception!
      try { 
        sendInvoice0.setDescription((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      SendInvoice sendInvoice0 = new SendInvoice();
      // Undeclared exception!
      try { 
        sendInvoice0.setCurrency((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      SendInvoice sendInvoice0 = new SendInvoice();
      // Undeclared exception!
      try { 
        sendInvoice0.setChatId((Integer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      SendInvoice sendInvoice0 = new SendInvoice();
      // Undeclared exception!
      try { 
        sendInvoice0.deserializeResponse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.JsonFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      LinkedList<LabeledPrice> linkedList0 = new LinkedList<LabeledPrice>();
      SendInvoice sendInvoice0 = null;
      try {
        sendInvoice0 = new SendInvoice((Integer) null, "1]T", "1]T", "1]T", "1]T", "1]T", "", linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Integer integer0 = new Integer(0);
      LinkedList<LabeledPrice> linkedList0 = new LinkedList<LabeledPrice>();
      SendInvoice sendInvoice0 = new SendInvoice(integer0, "4", "4", "4", "4", "4", "4", linkedList0);
      LabeledPrice labeledPrice0 = new LabeledPrice("sendinvoice", integer0);
      linkedList0.add(labeledPrice0);
      InlineKeyboardMarkup inlineKeyboardMarkup0 = new InlineKeyboardMarkup();
      sendInvoice0.setReplyMarkup(inlineKeyboardMarkup0);
      sendInvoice0.validate();
      assertEquals("4", sendInvoice0.getCurrency());
      assertEquals("4", sendInvoice0.getDescription());
      assertEquals("4", sendInvoice0.getProviderToken());
      assertEquals("4", sendInvoice0.getStartParameter());
      assertEquals("4", sendInvoice0.getPayload());
      assertEquals("4", sendInvoice0.getTitle());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Integer integer0 = new Integer(0);
      LinkedList<LabeledPrice> linkedList0 = new LinkedList<LabeledPrice>();
      SendInvoice sendInvoice0 = new SendInvoice(integer0, "4", "4", "4", "4", "4", "4", linkedList0);
      LabeledPrice labeledPrice0 = new LabeledPrice("sendinvoice", integer0);
      linkedList0.add(labeledPrice0);
      sendInvoice0.validate();
      assertEquals("4", sendInvoice0.getProviderToken());
      assertEquals("4", sendInvoice0.getCurrency());
      assertEquals("4", sendInvoice0.getDescription());
      assertEquals("4", sendInvoice0.getStartParameter());
      assertEquals("4", sendInvoice0.getPayload());
      assertEquals("4", sendInvoice0.getTitle());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Integer integer0 = new Integer(0);
      LinkedList<LabeledPrice> linkedList0 = new LinkedList<LabeledPrice>();
      SendInvoice sendInvoice0 = new SendInvoice(integer0, "v;", "v;", "v;", "v;", "jWR)bM", "jWR)bM", linkedList0);
      linkedList0.add((LabeledPrice) null);
      // Undeclared exception!
      try { 
        sendInvoice0.validate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.telegram.telegrambots.meta.api.methods.send.SendInvoice", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Integer integer0 = new Integer(0);
      LinkedList<LabeledPrice> linkedList0 = new LinkedList<LabeledPrice>();
      SendInvoice sendInvoice0 = new SendInvoice(integer0, "v;", "v;", "v;", "v;", "jWR)bM", "jWR)bM", linkedList0);
      try { 
        sendInvoice0.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Prices parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.methods.send.SendInvoice", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Integer integer0 = new Integer(43);
      LinkedList<LabeledPrice> linkedList0 = new LinkedList<LabeledPrice>();
      SendInvoice sendInvoice0 = new SendInvoice(integer0, "&riL'LqPH'", "&riL'LqPH'", "&riL'LqPH'", "&riL'LqPH'", "&riL'LqPH'", "&riL'LqPH'", linkedList0);
      sendInvoice0.setCurrency("");
      try { 
        sendInvoice0.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Currency parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.methods.send.SendInvoice", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      SendInvoice sendInvoice0 = new SendInvoice();
      SendInvoice sendInvoice1 = sendInvoice0.setTitle("]b9|}p");
      sendInvoice1.setDescription("sendinvoice");
      SendInvoice sendInvoice2 = sendInvoice1.setStartParameter("]b9|}p");
      sendInvoice1.setCurrency("ZU a");
      SendInvoice sendInvoice3 = sendInvoice2.setProviderToken("sendinvoice");
      Integer integer0 = new Integer(15);
      SendInvoice sendInvoice4 = sendInvoice3.setChatId(integer0);
      sendInvoice4.setPayload("sendinvoice");
      try { 
        sendInvoice1.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Prices parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.methods.send.SendInvoice", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Integer integer0 = new Integer(0);
      LinkedList<LabeledPrice> linkedList0 = new LinkedList<LabeledPrice>();
      SendInvoice sendInvoice0 = new SendInvoice(integer0, "ChatId parameter can't be empty", "ChatId parameter can't be empty", "ChatId parameter can't be empty", "ChatId parameter can't be empty", "", "ChatId parameter can't be empty", linkedList0);
      try { 
        sendInvoice0.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // StartParameter parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.methods.send.SendInvoice", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      SendInvoice sendInvoice0 = new SendInvoice();
      SendInvoice sendInvoice1 = sendInvoice0.setTitle("]b9|}p");
      SendInvoice sendInvoice2 = sendInvoice1.setDescription("sendinvoice");
      sendInvoice1.setStartParameter("sendinvoice");
      SendInvoice sendInvoice3 = sendInvoice2.setProviderToken("sendinvoice");
      Integer integer0 = new Integer(15);
      SendInvoice sendInvoice4 = sendInvoice3.setChatId(integer0);
      sendInvoice4.setPayload("com.fasterxml.jackson.databind.cfg.ContextAttributes$Impl");
      try { 
        sendInvoice1.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Currency parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.methods.send.SendInvoice", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Integer integer0 = new Integer((-10));
      LinkedList<LabeledPrice> linkedList0 = new LinkedList<LabeledPrice>();
      SendInvoice sendInvoice0 = new SendInvoice(integer0, "prices", "prices", "prices", "", "prices", "", linkedList0);
      try { 
        sendInvoice0.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // ProviderToken parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.methods.send.SendInvoice", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      SendInvoice sendInvoice0 = new SendInvoice();
      SendInvoice sendInvoice1 = sendInvoice0.setTitle("]b9|}p");
      sendInvoice1.setDescription("sendinvoice");
      SendInvoice sendInvoice2 = sendInvoice0.setProviderToken("sendinvoice");
      Integer integer0 = new Integer(15);
      SendInvoice sendInvoice3 = sendInvoice2.setChatId(integer0);
      sendInvoice3.setPayload("com.fasterxml.jackson.databind.cfg.ContextAttributes$Impl");
      try { 
        sendInvoice1.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // StartParameter parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.methods.send.SendInvoice", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Integer integer0 = new Integer((-24));
      LinkedList<LabeledPrice> linkedList0 = new LinkedList<LabeledPrice>();
      SendInvoice sendInvoice0 = new SendInvoice(integer0, "Can not pass null KeyDeserializers", "Can not pass null KeyDeserializers", "", "Can not pass null KeyDeserializers", "Can not pass null KeyDeserializers", "", linkedList0);
      try { 
        sendInvoice0.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Payload parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.methods.send.SendInvoice", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      SendInvoice sendInvoice0 = new SendInvoice();
      SendInvoice sendInvoice1 = sendInvoice0.setTitle("]b9|}p");
      SendInvoice sendInvoice2 = sendInvoice1.setDescription("sendinvoice");
      Integer integer0 = new Integer(15);
      SendInvoice sendInvoice3 = sendInvoice2.setChatId(integer0);
      sendInvoice3.setPayload("com.fasterxml.jackson.databind.cfg.ContextAttributes$Impl");
      try { 
        sendInvoice1.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // ProviderToken parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.methods.send.SendInvoice", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      SendInvoice sendInvoice0 = new SendInvoice();
      SendInvoice sendInvoice1 = sendInvoice0.setTitle("sendinvoice");
      sendInvoice0.setDescription("");
      Integer integer0 = new Integer(15);
      sendInvoice0.setChatId(integer0);
      try { 
        sendInvoice1.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Description parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.methods.send.SendInvoice", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      SendInvoice sendInvoice0 = new SendInvoice();
      SendInvoice sendInvoice1 = sendInvoice0.setTitle("]b9|}p");
      sendInvoice1.setDescription("sendinvoice");
      Integer integer0 = new Integer(15);
      sendInvoice1.setChatId(integer0);
      try { 
        sendInvoice1.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Payload parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.methods.send.SendInvoice", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Integer integer0 = new Integer(0);
      LinkedList<LabeledPrice> linkedList0 = new LinkedList<LabeledPrice>();
      SendInvoice sendInvoice0 = new SendInvoice(integer0, "", "O%VZB@>_X", "O%VZB@>_X", "O%VZB@>_X", "O%VZB@>_X", "O%VZB@>_X", linkedList0);
      try { 
        sendInvoice0.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Title parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.methods.send.SendInvoice", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      SendInvoice sendInvoice0 = new SendInvoice();
      SendInvoice sendInvoice1 = sendInvoice0.setTitle("]b9|}p");
      Integer integer0 = new Integer(15);
      sendInvoice1.setChatId(integer0);
      try { 
        sendInvoice1.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Description parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.methods.send.SendInvoice", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      SendInvoice sendInvoice0 = new SendInvoice();
      try { 
        sendInvoice0.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // ChatId parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.methods.send.SendInvoice", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      SendInvoice sendInvoice0 = new SendInvoice();
      Integer integer0 = new Integer(15);
      sendInvoice0.setChatId(integer0);
      try { 
        sendInvoice0.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Title parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.methods.send.SendInvoice", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Integer integer0 = new Integer((-10));
      LinkedList<LabeledPrice> linkedList0 = new LinkedList<LabeledPrice>();
      SendInvoice sendInvoice0 = new SendInvoice(integer0, "prices", "prices", "prices", "", "prices", "", linkedList0);
      try { 
        sendInvoice0.deserializeResponse("sendinvoice");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unable to deserialize response
         //
         verifyException("org.telegram.telegrambots.meta.api.methods.send.SendInvoice", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      SendInvoice sendInvoice0 = new SendInvoice();
      String string0 = sendInvoice0.getMethod();
      assertEquals("sendinvoice", string0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      SendInvoice sendInvoice0 = new SendInvoice();
      String string0 = sendInvoice0.getProviderToken();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      SendInvoice sendInvoice0 = new SendInvoice();
      InlineKeyboardMarkup inlineKeyboardMarkup0 = sendInvoice0.getReplyMarkup();
      assertNull(inlineKeyboardMarkup0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Integer integer0 = new Integer((-725));
      LinkedList<LabeledPrice> linkedList0 = new LinkedList<LabeledPrice>();
      SendInvoice sendInvoice0 = new SendInvoice(integer0, "| x,jxc2A)u", "| x,jxc2A)u", "| x,jxc2A)u", "| x,jxc2A)u", "| x,jxc2A)u", "| x,jxc2A)u", linkedList0);
      sendInvoice0.getFlexible();
      assertEquals("| x,jxc2A)u", sendInvoice0.getPayload());
      assertEquals("| x,jxc2A)u", sendInvoice0.getProviderToken());
      assertEquals("| x,jxc2A)u", sendInvoice0.getCurrency());
      assertEquals("| x,jxc2A)u", sendInvoice0.getDescription());
      assertEquals("| x,jxc2A)u", sendInvoice0.getTitle());
      assertEquals("| x,jxc2A)u", sendInvoice0.getStartParameter());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      SendInvoice sendInvoice0 = new SendInvoice();
      String string0 = sendInvoice0.getPhotoUrl();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Integer integer0 = new Integer((-10));
      LinkedList<LabeledPrice> linkedList0 = new LinkedList<LabeledPrice>();
      SendInvoice sendInvoice0 = new SendInvoice(integer0, "prices", "prices", "prices", "", "prices", "", linkedList0);
      sendInvoice0.getPhotoWidth();
      assertEquals("prices", sendInvoice0.getTitle());
      assertEquals("prices", sendInvoice0.getPayload());
      assertEquals("prices", sendInvoice0.getDescription());
      assertEquals("", sendInvoice0.getCurrency());
      assertEquals("", sendInvoice0.getProviderToken());
      assertEquals("prices", sendInvoice0.getStartParameter());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      SendInvoice sendInvoice0 = new SendInvoice();
      Integer integer0 = sendInvoice0.getReplyToMessageId();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      SendInvoice sendInvoice0 = new SendInvoice();
      Boolean boolean0 = sendInvoice0.getDisableNotification();
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Integer integer0 = new Integer(0);
      LinkedList<LabeledPrice> linkedList0 = new LinkedList<LabeledPrice>();
      SendInvoice sendInvoice0 = new SendInvoice(integer0, "", "", "", "4", "is_flexible", "", linkedList0);
      String string0 = sendInvoice0.getDescription();
      assertEquals("", sendInvoice0.getPayload());
      assertEquals("4", sendInvoice0.getProviderToken());
      assertEquals("", sendInvoice0.getTitle());
      assertEquals("", string0);
      assertEquals("is_flexible", sendInvoice0.getStartParameter());
      assertEquals("", sendInvoice0.getCurrency());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      SendInvoice sendInvoice0 = new SendInvoice();
      String string0 = sendInvoice0.getProviderData();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      SendInvoice sendInvoice0 = new SendInvoice();
      Boolean boolean0 = sendInvoice0.getNeedPhoneNumber();
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      SendInvoice sendInvoice0 = new SendInvoice();
      // Undeclared exception!
      try { 
        sendInvoice0.setPrices((List<LabeledPrice>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      SendInvoice sendInvoice0 = new SendInvoice();
      Integer integer0 = sendInvoice0.getChatId();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      SendInvoice sendInvoice0 = new SendInvoice();
      List<LabeledPrice> list0 = sendInvoice0.getPrices();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      SendInvoice sendInvoice0 = new SendInvoice();
      String string0 = sendInvoice0.getPayload();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      SendInvoice sendInvoice0 = new SendInvoice();
      Boolean boolean0 = Boolean.TRUE;
      SendInvoice sendInvoice1 = sendInvoice0.setNeedPhoneNumber(boolean0);
      Boolean boolean1 = sendInvoice1.getNeedPhoneNumber();
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      SendInvoice sendInvoice0 = new SendInvoice();
      String string0 = sendInvoice0.getCurrency();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      SendInvoice sendInvoice0 = new SendInvoice();
      String string0 = sendInvoice0.getTitle();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      SendInvoice sendInvoice0 = new SendInvoice();
      sendInvoice0.setCurrency("sendinvoice");
      String string0 = sendInvoice0.getCurrency();
      assertEquals("sendinvoice", string0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      SendInvoice sendInvoice0 = new SendInvoice();
      sendInvoice0.setProviderData("sendinvoice");
      String string0 = sendInvoice0.getProviderData();
      assertEquals("sendinvoice", string0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      SendInvoice sendInvoice0 = new SendInvoice();
      Integer integer0 = sendInvoice0.getPhotoHeight();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      SendInvoice sendInvoice0 = new SendInvoice();
      Integer integer0 = new Integer((-3326));
      sendInvoice0.setPhotoSize(integer0);
      Integer integer1 = sendInvoice0.getPhotoSize();
      assertEquals((-3326), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      SendInvoice sendInvoice0 = new SendInvoice();
      Boolean boolean0 = sendInvoice0.getNeedName();
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      SendInvoice sendInvoice0 = new SendInvoice();
      String string0 = sendInvoice0.toString();
      assertEquals("SendInvoice{chatId=null, title='null', description='null', payload='null', providerToken='null', startParameter='null', currency='null', prices=null, photoUrl='null', photoSize=null, photoWidth=null, photoHeight=null, needName=null, needPhoneNumber=null, needEmail=null, needShippingAddress=null, isFlexible=null, disableNotification=null, replyToMessageId=null, replyMarkup=null, providerData='null'}", string0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      SendInvoice sendInvoice0 = new SendInvoice();
      Boolean boolean0 = sendInvoice0.getNeedEmail();
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      SendInvoice sendInvoice0 = new SendInvoice();
      Integer integer0 = sendInvoice0.getPhotoSize();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      SendInvoice sendInvoice0 = new SendInvoice();
      sendInvoice0.setStartParameter("");
      String string0 = sendInvoice0.getStartParameter();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      SendInvoice sendInvoice0 = new SendInvoice();
      Boolean boolean0 = sendInvoice0.getNeedShippingAddress();
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      SendInvoice sendInvoice0 = new SendInvoice();
      String string0 = sendInvoice0.getStartParameter();
      assertNull(string0);
  }
}
