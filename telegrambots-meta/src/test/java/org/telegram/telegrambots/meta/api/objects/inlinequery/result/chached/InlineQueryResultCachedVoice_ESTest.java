/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 26 13:20:20 GMT 2018
 */

package org.telegram.telegrambots.meta.api.objects.inlinequery.result.chached;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.telegram.telegrambots.meta.api.objects.inlinequery.inputmessagecontent.InputContactMessageContent;
import org.telegram.telegrambots.meta.api.objects.inlinequery.inputmessagecontent.InputMessageContent;
import org.telegram.telegrambots.meta.api.objects.inlinequery.inputmessagecontent.InputTextMessageContent;
import org.telegram.telegrambots.meta.api.objects.inlinequery.result.chached.InlineQueryResultCachedVoice;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class InlineQueryResultCachedVoice_ESTest extends InlineQueryResultCachedVoice_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      InlineQueryResultCachedVoice inlineQueryResultCachedVoice0 = new InlineQueryResultCachedVoice();
      inlineQueryResultCachedVoice0.setVoiceFileId("5SvcFyv");
      String string0 = inlineQueryResultCachedVoice0.getVoiceFileId();
      assertEquals("5SvcFyv", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      InlineQueryResultCachedVoice inlineQueryResultCachedVoice0 = new InlineQueryResultCachedVoice();
      inlineQueryResultCachedVoice0.setVoiceFileId("");
      String string0 = inlineQueryResultCachedVoice0.getVoiceFileId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      InlineQueryResultCachedVoice inlineQueryResultCachedVoice0 = new InlineQueryResultCachedVoice();
      InlineQueryResultCachedVoice inlineQueryResultCachedVoice1 = inlineQueryResultCachedVoice0.setTitle("3xE{'s/VINe@");
      String string0 = inlineQueryResultCachedVoice1.getTitle();
      assertEquals("3xE{'s/VINe@", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      InlineQueryResultCachedVoice inlineQueryResultCachedVoice0 = new InlineQueryResultCachedVoice();
      inlineQueryResultCachedVoice0.setTitle("");
      String string0 = inlineQueryResultCachedVoice0.getTitle();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      InlineQueryResultCachedVoice inlineQueryResultCachedVoice0 = new InlineQueryResultCachedVoice();
      InlineQueryResultCachedVoice inlineQueryResultCachedVoice1 = inlineQueryResultCachedVoice0.setParseMode("*TXfEh");
      String string0 = inlineQueryResultCachedVoice1.getParseMode();
      assertEquals("*TXfEh", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      InlineQueryResultCachedVoice inlineQueryResultCachedVoice0 = new InlineQueryResultCachedVoice();
      InlineQueryResultCachedVoice inlineQueryResultCachedVoice1 = inlineQueryResultCachedVoice0.setParseMode("");
      String string0 = inlineQueryResultCachedVoice1.getParseMode();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      InlineQueryResultCachedVoice inlineQueryResultCachedVoice0 = new InlineQueryResultCachedVoice();
      InputTextMessageContent inputTextMessageContent0 = new InputTextMessageContent();
      inlineQueryResultCachedVoice0.setInputMessageContent(inputTextMessageContent0);
      InputTextMessageContent inputTextMessageContent1 = (InputTextMessageContent)inlineQueryResultCachedVoice0.getInputMessageContent();
      assertNull(inputTextMessageContent1.getMessageText());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      InlineQueryResultCachedVoice inlineQueryResultCachedVoice0 = new InlineQueryResultCachedVoice();
      inlineQueryResultCachedVoice0.setId("UY");
      String string0 = inlineQueryResultCachedVoice0.getId();
      assertEquals("UY", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      InlineQueryResultCachedVoice inlineQueryResultCachedVoice0 = new InlineQueryResultCachedVoice();
      InlineQueryResultCachedVoice inlineQueryResultCachedVoice1 = inlineQueryResultCachedVoice0.setId("");
      String string0 = inlineQueryResultCachedVoice1.getId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      InlineQueryResultCachedVoice inlineQueryResultCachedVoice0 = new InlineQueryResultCachedVoice();
      InlineQueryResultCachedVoice inlineQueryResultCachedVoice1 = inlineQueryResultCachedVoice0.setCaption("sEL0_040>*ge%=9:");
      String string0 = inlineQueryResultCachedVoice1.getCaption();
      assertEquals("sEL0_040>*ge%=9:", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      InlineQueryResultCachedVoice inlineQueryResultCachedVoice0 = new InlineQueryResultCachedVoice();
      InlineQueryResultCachedVoice inlineQueryResultCachedVoice1 = inlineQueryResultCachedVoice0.setCaption("");
      String string0 = inlineQueryResultCachedVoice1.getCaption();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      InlineQueryResultCachedVoice inlineQueryResultCachedVoice0 = new InlineQueryResultCachedVoice();
      InlineQueryResultCachedVoice inlineQueryResultCachedVoice1 = inlineQueryResultCachedVoice0.setId("!#");
      inlineQueryResultCachedVoice1.setVoiceFileId("!#");
      InlineKeyboardMarkup inlineKeyboardMarkup0 = new InlineKeyboardMarkup();
      LinkedList<List<InlineKeyboardButton>> linkedList0 = new LinkedList<List<InlineKeyboardButton>>();
      linkedList0.add((List<InlineKeyboardButton>) null);
      InlineKeyboardMarkup inlineKeyboardMarkup1 = inlineKeyboardMarkup0.setKeyboard(linkedList0);
      inlineQueryResultCachedVoice0.setReplyMarkup(inlineKeyboardMarkup1);
      // Undeclared exception!
      try { 
        inlineQueryResultCachedVoice1.validate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      InlineQueryResultCachedVoice inlineQueryResultCachedVoice0 = new InlineQueryResultCachedVoice();
      InlineKeyboardMarkup inlineKeyboardMarkup0 = new InlineKeyboardMarkup();
      InlineQueryResultCachedVoice inlineQueryResultCachedVoice1 = inlineQueryResultCachedVoice0.setVoiceFileId("a");
      inlineQueryResultCachedVoice0.setId("a");
      inlineQueryResultCachedVoice1.setReplyMarkup(inlineKeyboardMarkup0);
      inlineQueryResultCachedVoice0.validate();
      assertNull(inlineQueryResultCachedVoice0.getTitle());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      InlineQueryResultCachedVoice inlineQueryResultCachedVoice0 = new InlineQueryResultCachedVoice();
      inlineQueryResultCachedVoice0.setVoiceFileId("a");
      inlineQueryResultCachedVoice0.setId("a");
      InputContactMessageContent inputContactMessageContent0 = new InputContactMessageContent();
      inlineQueryResultCachedVoice0.setInputMessageContent(inputContactMessageContent0);
      try { 
        inlineQueryResultCachedVoice0.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // PhoneNumber parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.objects.inlinequery.inputmessagecontent.InputContactMessageContent", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      InlineQueryResultCachedVoice inlineQueryResultCachedVoice0 = new InlineQueryResultCachedVoice();
      InlineQueryResultCachedVoice inlineQueryResultCachedVoice1 = inlineQueryResultCachedVoice0.setVoiceFileId("");
      inlineQueryResultCachedVoice1.setId("GpgA/");
      try { 
        inlineQueryResultCachedVoice0.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // VoiceFileId parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.objects.inlinequery.result.chached.InlineQueryResultCachedVoice", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      InlineQueryResultCachedVoice inlineQueryResultCachedVoice0 = new InlineQueryResultCachedVoice();
      inlineQueryResultCachedVoice0.setId("");
      try { 
        inlineQueryResultCachedVoice0.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // ID parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.objects.inlinequery.result.chached.InlineQueryResultCachedVoice", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      InlineQueryResultCachedVoice inlineQueryResultCachedVoice0 = new InlineQueryResultCachedVoice();
      try { 
        inlineQueryResultCachedVoice0.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // ID parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.objects.inlinequery.result.chached.InlineQueryResultCachedVoice", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      InlineQueryResultCachedVoice inlineQueryResultCachedVoice0 = new InlineQueryResultCachedVoice();
      InlineKeyboardMarkup inlineKeyboardMarkup0 = inlineQueryResultCachedVoice0.getReplyMarkup();
      assertNull(inlineKeyboardMarkup0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      InlineQueryResultCachedVoice inlineQueryResultCachedVoice0 = new InlineQueryResultCachedVoice();
      String string0 = inlineQueryResultCachedVoice0.getId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      InlineQueryResultCachedVoice inlineQueryResultCachedVoice0 = new InlineQueryResultCachedVoice();
      String string0 = inlineQueryResultCachedVoice0.toString();
      assertEquals("InlineQueryResultCachedVoice{type='voice', id='null', voiceFileId='null', title='null', inputMessageContent=null, replyMarkup=null, caption='null', parseMode='null'}", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      InlineQueryResultCachedVoice inlineQueryResultCachedVoice0 = new InlineQueryResultCachedVoice();
      String string0 = inlineQueryResultCachedVoice0.getVoiceFileId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      InlineQueryResultCachedVoice inlineQueryResultCachedVoice0 = new InlineQueryResultCachedVoice();
      inlineQueryResultCachedVoice0.setId("a");
      try { 
        inlineQueryResultCachedVoice0.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // VoiceFileId parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.objects.inlinequery.result.chached.InlineQueryResultCachedVoice", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      InlineQueryResultCachedVoice inlineQueryResultCachedVoice0 = new InlineQueryResultCachedVoice();
      String string0 = inlineQueryResultCachedVoice0.getCaption();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      InlineQueryResultCachedVoice inlineQueryResultCachedVoice0 = new InlineQueryResultCachedVoice();
      String string0 = inlineQueryResultCachedVoice0.getParseMode();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      InlineQueryResultCachedVoice inlineQueryResultCachedVoice0 = new InlineQueryResultCachedVoice();
      InlineKeyboardMarkup inlineKeyboardMarkup0 = new InlineKeyboardMarkup();
      inlineQueryResultCachedVoice0.setReplyMarkup(inlineKeyboardMarkup0);
      InlineKeyboardMarkup inlineKeyboardMarkup1 = inlineQueryResultCachedVoice0.getReplyMarkup();
      assertSame(inlineKeyboardMarkup1, inlineKeyboardMarkup0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      InlineQueryResultCachedVoice inlineQueryResultCachedVoice0 = new InlineQueryResultCachedVoice();
      InlineQueryResultCachedVoice inlineQueryResultCachedVoice1 = inlineQueryResultCachedVoice0.setVoiceFileId("a");
      inlineQueryResultCachedVoice0.setId("a");
      inlineQueryResultCachedVoice1.validate();
      assertSame(inlineQueryResultCachedVoice1, inlineQueryResultCachedVoice0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      InlineQueryResultCachedVoice inlineQueryResultCachedVoice0 = new InlineQueryResultCachedVoice();
      String string0 = inlineQueryResultCachedVoice0.getTitle();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      InlineQueryResultCachedVoice inlineQueryResultCachedVoice0 = new InlineQueryResultCachedVoice();
      String string0 = inlineQueryResultCachedVoice0.getType();
      assertEquals("voice", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      InlineQueryResultCachedVoice inlineQueryResultCachedVoice0 = new InlineQueryResultCachedVoice();
      InputMessageContent inputMessageContent0 = inlineQueryResultCachedVoice0.getInputMessageContent();
      assertNull(inputMessageContent0);
  }
}
