/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 26 13:32:28 GMT 2018
 */

package org.telegram.telegrambots.meta.api.methods.send;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FileDescriptor;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.junit.runner.RunWith;
import org.telegram.telegrambots.meta.api.methods.send.SendPhoto;
import org.telegram.telegrambots.meta.api.objects.InputFile;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboard;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardRemove;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SendPhoto_ESTest extends SendPhoto_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SendPhoto sendPhoto0 = new SendPhoto();
      InputFile inputFile0 = new InputFile("photo");
      SendPhoto sendPhoto1 = sendPhoto0.setPhoto(inputFile0);
      assertNull(sendPhoto1.getDisableNotification());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SendPhoto sendPhoto0 = new SendPhoto();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      SendPhoto sendPhoto1 = sendPhoto0.setPhoto("photo", (InputStream) mockFileInputStream0);
      assertSame(sendPhoto0, sendPhoto1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SendPhoto sendPhoto0 = new SendPhoto();
      Integer integer0 = new Integer(44);
      sendPhoto0.setReplyToMessageId(integer0);
      Integer integer1 = sendPhoto0.getReplyToMessageId();
      assertEquals(44, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SendPhoto sendPhoto0 = new SendPhoto();
      Integer integer0 = new Integer((-1498));
      sendPhoto0.setReplyToMessageId(integer0);
      Integer integer1 = sendPhoto0.getReplyToMessageId();
      assertEquals((-1498), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SendPhoto sendPhoto0 = new SendPhoto();
      Integer integer0 = new Integer((-1));
      sendPhoto0.setReplyToMessageId(integer0);
      Integer integer1 = sendPhoto0.getReplyToMessageId();
      assertEquals((-1), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SendPhoto sendPhoto0 = new SendPhoto();
      ReplyKeyboardMarkup replyKeyboardMarkup0 = new ReplyKeyboardMarkup();
      SendPhoto sendPhoto1 = sendPhoto0.setReplyMarkup(replyKeyboardMarkup0);
      ReplyKeyboardMarkup replyKeyboardMarkup1 = (ReplyKeyboardMarkup)sendPhoto1.getReplyMarkup();
      assertNull(replyKeyboardMarkup1.getSelective());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SendPhoto sendPhoto0 = new SendPhoto();
      MockFile mockFile0 = new MockFile("chat_id");
      sendPhoto0.setPhoto((File) mockFile0);
      InputFile inputFile0 = sendPhoto0.getPhoto();
      assertEquals("chat_id", inputFile0.getMediaName());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SendPhoto sendPhoto0 = new SendPhoto();
      SendPhoto sendPhoto1 = sendPhoto0.setPhoto("zwYInNPn@0/");
      InputFile inputFile0 = sendPhoto1.getPhoto();
      assertNull(inputFile0.getMediaName());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SendPhoto sendPhoto0 = new SendPhoto();
      sendPhoto0.setParseMode("SendPhoto{chatId='");
      String string0 = sendPhoto0.getParseMode();
      assertEquals("SendPhoto{chatId='", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SendPhoto sendPhoto0 = new SendPhoto();
      sendPhoto0.setChatId("");
      String string0 = sendPhoto0.getChatId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SendPhoto sendPhoto0 = new SendPhoto();
      sendPhoto0.setCaption("sendphoto");
      String string0 = sendPhoto0.getCaption();
      assertEquals("sendphoto", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SendPhoto sendPhoto0 = new SendPhoto();
      sendPhoto0.setCaption("");
      String string0 = sendPhoto0.getCaption();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SendPhoto sendPhoto0 = new SendPhoto();
      // Undeclared exception!
      try { 
        sendPhoto0.setPhoto((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file cannot be null!
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SendPhoto sendPhoto0 = new SendPhoto();
      // Undeclared exception!
      try { 
        sendPhoto0.setChatId((Long) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SendPhoto sendPhoto0 = new SendPhoto();
      // Undeclared exception!
      try { 
        sendPhoto0.deserializeResponse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.JsonFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SendPhoto sendPhoto0 = new SendPhoto();
      ReplyKeyboardRemove replyKeyboardRemove0 = new ReplyKeyboardRemove();
      SendPhoto sendPhoto1 = sendPhoto0.setReplyMarkup(replyKeyboardRemove0);
      SendPhoto sendPhoto2 = sendPhoto1.setChatId("disable_notification");
      File file0 = MockFile.createTempFile("chat_id", "photo");
      sendPhoto2.setPhoto(file0);
      sendPhoto1.validate();
      assertEquals("disable_notification", sendPhoto1.getChatId());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SendPhoto sendPhoto0 = new SendPhoto();
      SendPhoto sendPhoto1 = sendPhoto0.setChatId("disable_notification");
      File file0 = MockFile.createTempFile("chat_id", "photo");
      sendPhoto1.setPhoto(file0);
      sendPhoto0.validate();
      assertEquals("disable_notification", sendPhoto0.getChatId());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SendPhoto sendPhoto0 = new SendPhoto();
      try { 
        sendPhoto0.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // ChatId parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.methods.send.SendPhoto", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SendPhoto sendPhoto0 = new SendPhoto();
      Long long0 = new Long((-1613L));
      SendPhoto sendPhoto1 = sendPhoto0.setChatId(long0);
      try { 
        sendPhoto1.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Photo parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.methods.send.SendPhoto", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SendPhoto sendPhoto0 = new SendPhoto();
      try { 
        sendPhoto0.deserializeResponse("photo");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unable to deserialize response
         //
         verifyException("org.telegram.telegrambots.meta.api.methods.send.SendPhoto", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SendPhoto sendPhoto0 = new SendPhoto();
      Integer integer0 = new Integer(0);
      SendPhoto sendPhoto1 = sendPhoto0.setReplyToMessageId(integer0);
      Integer integer1 = sendPhoto1.getReplyToMessageId();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SendPhoto sendPhoto0 = new SendPhoto();
      String string0 = sendPhoto0.getCaption();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SendPhoto sendPhoto0 = new SendPhoto();
      sendPhoto0.enableNotification();
      Boolean boolean0 = sendPhoto0.getDisableNotification();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SendPhoto sendPhoto0 = new SendPhoto();
      Long long0 = new Long((-2061L));
      SendPhoto sendPhoto1 = sendPhoto0.setChatId(long0);
      String string0 = sendPhoto1.getChatId();
      assertEquals("-2061", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SendPhoto sendPhoto0 = new SendPhoto();
      // Undeclared exception!
      try { 
        sendPhoto0.setPhoto((InputFile) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // photo cannot be null!
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SendPhoto sendPhoto0 = new SendPhoto();
      ReplyKeyboard replyKeyboard0 = sendPhoto0.getReplyMarkup();
      assertNull(replyKeyboard0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SendPhoto sendPhoto0 = new SendPhoto();
      String string0 = sendPhoto0.getChatId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SendPhoto sendPhoto0 = new SendPhoto();
      Boolean boolean0 = sendPhoto0.getDisableNotification();
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SendPhoto sendPhoto0 = new SendPhoto();
      String string0 = sendPhoto0.getParseMode();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SendPhoto sendPhoto0 = new SendPhoto();
      Integer integer0 = sendPhoto0.getReplyToMessageId();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SendPhoto sendPhoto0 = new SendPhoto();
      InputFile inputFile0 = sendPhoto0.getPhoto();
      assertNull(inputFile0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SendPhoto sendPhoto0 = new SendPhoto();
      SendPhoto sendPhoto1 = sendPhoto0.setParseMode("");
      String string0 = sendPhoto1.getParseMode();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SendPhoto sendPhoto0 = new SendPhoto();
      sendPhoto0.disableNotification();
      Boolean boolean0 = sendPhoto0.getDisableNotification();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SendPhoto sendPhoto0 = new SendPhoto();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      // Undeclared exception!
      try { 
        sendPhoto0.setPhoto((String) null, (InputStream) pipedInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // photoName cannot be null!
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SendPhoto sendPhoto0 = new SendPhoto();
      String string0 = sendPhoto0.toString();
      assertEquals("SendPhoto{chatId='null', photo=null, caption='null', disableNotification=null, replyToMessageId=null, replyMarkup=null, parseMode='null'}", string0);
  }
}
