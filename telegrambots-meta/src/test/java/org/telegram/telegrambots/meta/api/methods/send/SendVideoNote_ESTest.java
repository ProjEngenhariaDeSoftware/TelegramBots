/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 26 13:24:06 GMT 2018
 */

package org.telegram.telegrambots.meta.api.methods.send;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.junit.runner.RunWith;
import org.telegram.telegrambots.meta.api.methods.send.SendVideoNote;
import org.telegram.telegrambots.meta.api.objects.InputFile;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ForceReplyKeyboard;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboard;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SendVideoNote_ESTest extends SendVideoNote_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SendVideoNote sendVideoNote0 = new SendVideoNote("", "");
      InputFile inputFile0 = new InputFile("9E'%d/+~(&l-");
      SendVideoNote sendVideoNote1 = sendVideoNote0.setVideoNote(inputFile0);
      assertEquals("", sendVideoNote1.getChatId());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer(0);
      File file0 = MockFile.createTempFile("t8I8Ur#~\"Y", "org.telegram.telegrambots.meta.api.methods.send.SendVideoNote");
      SendVideoNote sendVideoNote0 = new SendVideoNote(integer0, file0);
      SendVideoNote sendVideoNote1 = sendVideoNote0.setVideoNote(file0);
      assertSame(sendVideoNote1, sendVideoNote0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      SendVideoNote sendVideoNote0 = new SendVideoNote("", mockFile0);
      sendVideoNote0.getVideoNote();
      assertEquals("", sendVideoNote0.getChatId());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SendVideoNote sendVideoNote0 = new SendVideoNote("Maximum Java array size (2GB) exceeded by `ByteArrayBuilder`", "Maximum Java array size (2GB) exceeded by `ByteArrayBuilder`");
      InputFile inputFile0 = sendVideoNote0.getVideoNote();
      assertEquals("Maximum Java array size (2GB) exceeded by `ByteArrayBuilder`", inputFile0.getAttachName());
      assertEquals("Maximum Java array size (2GB) exceeded by `ByteArrayBuilder`", sendVideoNote0.getChatId());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Long long0 = new Long(1L);
      SendVideoNote sendVideoNote0 = new SendVideoNote(long0, "string value");
      MockFile mockFile0 = new MockFile("length", "w!TceQdd=#");
      InputFile inputFile0 = new InputFile(mockFile0, "string value");
      sendVideoNote0.setThumb(inputFile0);
      InputFile inputFile1 = sendVideoNote0.getThumb();
      assertTrue(inputFile1.isNew());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SendVideoNote sendVideoNote0 = new SendVideoNote("<C", "<C");
      InputFile inputFile0 = new InputFile("thumb");
      SendVideoNote sendVideoNote1 = sendVideoNote0.setThumb(inputFile0);
      sendVideoNote1.getThumb();
      assertEquals("<C", sendVideoNote1.getChatId());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SendVideoNote sendVideoNote0 = new SendVideoNote("last_name", "5 S<nBpFB");
      Integer integer0 = new Integer(0);
      sendVideoNote0.setReplyToMessageId(integer0);
      sendVideoNote0.getReplyToMessageId();
      assertEquals("last_name", sendVideoNote0.getChatId());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SendVideoNote sendVideoNote0 = new SendVideoNote("<C", "<C");
      Integer integer0 = new Integer(125);
      sendVideoNote0.setReplyToMessageId(integer0);
      sendVideoNote0.getReplyToMessageId();
      assertEquals("<C", sendVideoNote0.getChatId());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Long long0 = new Long(1L);
      SendVideoNote sendVideoNote0 = new SendVideoNote(long0, "string value");
      ForceReplyKeyboard forceReplyKeyboard0 = new ForceReplyKeyboard();
      SendVideoNote sendVideoNote1 = sendVideoNote0.setReplyMarkup(forceReplyKeyboard0);
      ReplyKeyboard replyKeyboard0 = sendVideoNote1.getReplyMarkup();
      assertSame(forceReplyKeyboard0, replyKeyboard0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Long long0 = new Long(0L);
      SendVideoNote sendVideoNote0 = new SendVideoNote(long0, "d_8%fhR}gG}F@");
      Integer integer0 = new Integer(0);
      SendVideoNote sendVideoNote1 = sendVideoNote0.setLength(integer0);
      Integer integer1 = sendVideoNote1.getLength();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      File file0 = MockFile.createTempFile("thumb", ", thumb=");
      SendVideoNote sendVideoNote0 = new SendVideoNote("bt[d", file0);
      Integer integer0 = new Integer(4975);
      sendVideoNote0.setLength(integer0);
      sendVideoNote0.getLength();
      assertEquals("bt[d", sendVideoNote0.getChatId());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SendVideoNote sendVideoNote0 = new SendVideoNote("video_note", "VALUE_STRING");
      Integer integer0 = new Integer((-333));
      sendVideoNote0.setLength(integer0);
      sendVideoNote0.getLength();
      assertEquals("video_note", sendVideoNote0.getChatId());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SendVideoNote sendVideoNote0 = new SendVideoNote("", "");
      Integer integer0 = new Integer(0);
      sendVideoNote0.setDuration(integer0);
      sendVideoNote0.getDuration();
      assertEquals("", sendVideoNote0.getChatId());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SendVideoNote sendVideoNote0 = new SendVideoNote("", "h.#CHUAq");
      Integer integer0 = new Integer(39);
      sendVideoNote0.setDuration(integer0);
      sendVideoNote0.getDuration();
      assertEquals("", sendVideoNote0.getChatId());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Integer integer0 = new Integer((-834));
      File file0 = MockFile.createTempFile("com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer", "com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer", (File) null);
      SendVideoNote sendVideoNote0 = new SendVideoNote(integer0, file0);
      sendVideoNote0.setDuration(integer0);
      Integer integer1 = sendVideoNote0.getDuration();
      assertEquals((-834), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SendVideoNote sendVideoNote0 = new SendVideoNote("", "");
      sendVideoNote0.enableNotification();
      Boolean boolean0 = sendVideoNote0.getDisableNotification();
      assertFalse(boolean0);
      assertEquals("", sendVideoNote0.getChatId());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SendVideoNote sendVideoNote0 = new SendVideoNote();
      String string0 = sendVideoNote0.getChatId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      SendVideoNote sendVideoNote0 = new SendVideoNote("", mockFile0);
      String string0 = sendVideoNote0.getChatId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Long long0 = new Long((-9223372036854775808L));
      SendVideoNote sendVideoNote0 = new SendVideoNote(long0, " Oj\"QfIXrJssci");
      // Undeclared exception!
      try { 
        sendVideoNote0.setVideoNote(" Oj\"QfIXrJssci", (InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // inputStream cannot be null!
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SendVideoNote sendVideoNote0 = new SendVideoNote();
      // Undeclared exception!
      try { 
        sendVideoNote0.setChatId((Long) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SendVideoNote sendVideoNote0 = new SendVideoNote("w)Z1T:j", "");
      // Undeclared exception!
      try { 
        sendVideoNote0.deserializeResponse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.JsonFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SendVideoNote sendVideoNote0 = null;
      try {
        sendVideoNote0 = new SendVideoNote("", "PQ}Ay`m#", (InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // inputStream cannot be null!
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SendVideoNote sendVideoNote0 = null;
      try {
        sendVideoNote0 = new SendVideoNote((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SendVideoNote sendVideoNote0 = null;
      try {
        sendVideoNote0 = new SendVideoNote("T].5tJ}IBhnh", (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file cannot be null!
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SendVideoNote sendVideoNote0 = null;
      try {
        sendVideoNote0 = new SendVideoNote((String) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SendVideoNote sendVideoNote0 = null;
      try {
        sendVideoNote0 = new SendVideoNote((Long) null, "UVWX _=|9");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Integer integer0 = new Integer((-1000));
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(mockFileInputStream0, mockFileInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      SendVideoNote sendVideoNote0 = null;
      try {
        sendVideoNote0 = new SendVideoNote(integer0, (String) null, dataInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // videoName cannot be null!
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (byte)0);
      SendVideoNote sendVideoNote0 = null;
      try {
        sendVideoNote0 = new SendVideoNote((Integer) null, "A", byteArrayInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Integer integer0 = new Integer(0);
      SendVideoNote sendVideoNote0 = null;
      try {
        sendVideoNote0 = new SendVideoNote(integer0, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file cannot be null!
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MockFile mockFile0 = new MockFile("3*5hsAV/j");
      SendVideoNote sendVideoNote0 = null;
      try {
        sendVideoNote0 = new SendVideoNote((Integer) null, mockFile0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SendVideoNote sendVideoNote0 = new SendVideoNote("", "h.#CHUAq");
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      SendVideoNote sendVideoNote1 = sendVideoNote0.setVideoNote("/H/$9 ", (InputStream) mockFileInputStream0);
      assertEquals("", sendVideoNote1.getChatId());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(1270);
      SendVideoNote sendVideoNote0 = new SendVideoNote("", "", pipedInputStream0);
      // Undeclared exception!
      try { 
        sendVideoNote0.setVideoNote((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file cannot be null!
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      File file0 = MockFile.createTempFile("bt[d", "bt[d");
      SendVideoNote sendVideoNote0 = new SendVideoNote("bt[d", file0);
      ReplyKeyboardMarkup replyKeyboardMarkup0 = new ReplyKeyboardMarkup();
      sendVideoNote0.setReplyMarkup(replyKeyboardMarkup0);
      sendVideoNote0.validate();
      assertEquals("bt[d", sendVideoNote0.getChatId());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Integer integer0 = new Integer(1);
      MockFile mockFile0 = new MockFile(" [truncated]", " [truncated]");
      SendVideoNote sendVideoNote0 = new SendVideoNote(integer0, mockFile0);
      InputFile inputFile0 = new InputFile(mockFile0, "thumb");
      sendVideoNote0.setThumb(inputFile0);
      sendVideoNote0.validate();
      assertNull(sendVideoNote0.getLength());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SendVideoNote sendVideoNote0 = new SendVideoNote();
      sendVideoNote0.setChatId("thumb");
      try { 
        sendVideoNote0.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // VideoNote parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.methods.send.SendVideoNote", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SendVideoNote sendVideoNote0 = new SendVideoNote();
      try { 
        sendVideoNote0.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // ChatId parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.methods.send.SendVideoNote", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Integer integer0 = new Integer((-5230));
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      SendVideoNote sendVideoNote0 = new SendVideoNote(integer0, "uMR@}F<hA&$Ir", sequenceInputStream0);
      sendVideoNote0.validate();
      assertNull(sendVideoNote0.getLength());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      SendVideoNote sendVideoNote0 = new SendVideoNote("negative size: ", "negative size: ", sequenceInputStream0);
      try { 
        sendVideoNote0.deserializeResponse("negative size: ");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unable to deserialize response
         //
         verifyException("org.telegram.telegrambots.meta.api.methods.send.SendVideoNote", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SendVideoNote sendVideoNote0 = new SendVideoNote();
      InputFile inputFile0 = sendVideoNote0.getVideoNote();
      assertNull(inputFile0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SendVideoNote sendVideoNote0 = new SendVideoNote();
      sendVideoNote0.disableNotification();
      Boolean boolean0 = sendVideoNote0.getDisableNotification();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SendVideoNote sendVideoNote0 = new SendVideoNote("VK~BGST&qNCTKh", "VK~BGST&qNCTKh");
      sendVideoNote0.getDuration();
      assertEquals("VK~BGST&qNCTKh", sendVideoNote0.getChatId());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Integer integer0 = new Integer((-5230));
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      SendVideoNote sendVideoNote0 = new SendVideoNote(integer0, "uMR@}F<hA&$Ir", sequenceInputStream0);
      String string0 = sendVideoNote0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      File file0 = MockFile.createTempFile("bt[d", "bt[d");
      SendVideoNote sendVideoNote0 = new SendVideoNote("bt[d", file0);
      String string0 = sendVideoNote0.getChatId();
      assertEquals("bt[d", string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Integer integer0 = new Integer((-5230));
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      SendVideoNote sendVideoNote0 = new SendVideoNote(integer0, "uMR@}F<hA&$Ir", sequenceInputStream0);
      sendVideoNote0.setReplyToMessageId(integer0);
      Integer integer1 = sendVideoNote0.getReplyToMessageId();
      assertEquals((-5230), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Integer integer0 = new Integer((-5230));
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      SendVideoNote sendVideoNote0 = new SendVideoNote(integer0, "uMR@}F<hA&$Ir", sequenceInputStream0);
      Integer integer1 = sendVideoNote0.getReplyToMessageId();
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SendVideoNote sendVideoNote0 = new SendVideoNote();
      Long long0 = new Long((-1L));
      SendVideoNote sendVideoNote1 = sendVideoNote0.setChatId(long0);
      assertNull(sendVideoNote1.getDisableNotification());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Integer integer0 = new Integer((-5230));
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      SendVideoNote sendVideoNote0 = new SendVideoNote(integer0, "uMR@}F<hA&$Ir", sequenceInputStream0);
      ReplyKeyboard replyKeyboard0 = sendVideoNote0.getReplyMarkup();
      assertNull(replyKeyboard0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SendVideoNote sendVideoNote0 = new SendVideoNote();
      // Undeclared exception!
      try { 
        sendVideoNote0.setVideoNote((InputFile) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // videoNote cannot be null!
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      File file0 = MockFile.createTempFile("bt[d", "bt[d");
      SendVideoNote sendVideoNote0 = new SendVideoNote("bt[d", file0);
      sendVideoNote0.getLength();
      assertEquals("bt[d", sendVideoNote0.getChatId());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Integer integer0 = new Integer((-5230));
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      SendVideoNote sendVideoNote0 = new SendVideoNote(integer0, "uMR@}F<hA&$Ir", sequenceInputStream0);
      Boolean boolean0 = sendVideoNote0.getDisableNotification();
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      SendVideoNote sendVideoNote0 = null;
      try {
        sendVideoNote0 = new SendVideoNote((String) null, (String) null, bufferedInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Integer integer0 = new Integer((-5230));
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      SendVideoNote sendVideoNote0 = new SendVideoNote(integer0, "uMR@}F<hA&$Ir", sequenceInputStream0);
      SendVideoNote sendVideoNote1 = sendVideoNote0.setVideoNote("{mu3|)/8Z&Dyru^EG");
      assertSame(sendVideoNote0, sendVideoNote1);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      File file0 = MockFile.createTempFile("bt[d", "bt[d");
      SendVideoNote sendVideoNote0 = new SendVideoNote("bt[d", file0);
      sendVideoNote0.getThumb();
      assertEquals("bt[d", sendVideoNote0.getChatId());
  }
}
