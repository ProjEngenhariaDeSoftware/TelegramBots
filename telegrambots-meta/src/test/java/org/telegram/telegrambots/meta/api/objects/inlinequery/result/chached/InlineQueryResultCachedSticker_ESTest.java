/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 26 13:18:41 GMT 2018
 */

package org.telegram.telegrambots.meta.api.objects.inlinequery.result.chached;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.telegram.telegrambots.meta.api.objects.inlinequery.inputmessagecontent.InputLocationMessageContent;
import org.telegram.telegrambots.meta.api.objects.inlinequery.inputmessagecontent.InputMessageContent;
import org.telegram.telegrambots.meta.api.objects.inlinequery.inputmessagecontent.InputVenueMessageContent;
import org.telegram.telegrambots.meta.api.objects.inlinequery.result.chached.InlineQueryResultCachedSticker;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class InlineQueryResultCachedSticker_ESTest extends InlineQueryResultCachedSticker_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      InlineQueryResultCachedSticker inlineQueryResultCachedSticker0 = new InlineQueryResultCachedSticker();
      inlineQueryResultCachedSticker0.setStickerFileId("K|");
      String string0 = inlineQueryResultCachedSticker0.getStickerFileId();
      assertEquals("K|", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      InlineQueryResultCachedSticker inlineQueryResultCachedSticker0 = new InlineQueryResultCachedSticker();
      inlineQueryResultCachedSticker0.setStickerFileId("");
      String string0 = inlineQueryResultCachedSticker0.getStickerFileId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      InlineQueryResultCachedSticker inlineQueryResultCachedSticker0 = new InlineQueryResultCachedSticker();
      InputLocationMessageContent inputLocationMessageContent0 = new InputLocationMessageContent();
      InlineQueryResultCachedSticker inlineQueryResultCachedSticker1 = inlineQueryResultCachedSticker0.setInputMessageContent(inputLocationMessageContent0);
      InputLocationMessageContent inputLocationMessageContent1 = (InputLocationMessageContent)inlineQueryResultCachedSticker1.getInputMessageContent();
      assertNull(inputLocationMessageContent1.getLongitude());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      InlineQueryResultCachedSticker inlineQueryResultCachedSticker0 = new InlineQueryResultCachedSticker();
      inlineQueryResultCachedSticker0.setId("QI6a");
      String string0 = inlineQueryResultCachedSticker0.getId();
      assertEquals("QI6a", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      InlineQueryResultCachedSticker inlineQueryResultCachedSticker0 = new InlineQueryResultCachedSticker();
      inlineQueryResultCachedSticker0.setId("");
      String string0 = inlineQueryResultCachedSticker0.getId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      InlineQueryResultCachedSticker inlineQueryResultCachedSticker0 = new InlineQueryResultCachedSticker();
      InlineQueryResultCachedSticker inlineQueryResultCachedSticker1 = inlineQueryResultCachedSticker0.setId("82c`siu`GHrIk");
      InlineKeyboardMarkup inlineKeyboardMarkup0 = new InlineKeyboardMarkup();
      inlineQueryResultCachedSticker0.setReplyMarkup(inlineKeyboardMarkup0);
      InlineQueryResultCachedSticker inlineQueryResultCachedSticker2 = inlineQueryResultCachedSticker1.setStickerFileId("82c`siu`GHrIk");
      inlineQueryResultCachedSticker2.validate();
      assertSame(inlineQueryResultCachedSticker0, inlineQueryResultCachedSticker2);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      InputVenueMessageContent inputVenueMessageContent0 = new InputVenueMessageContent();
      InlineQueryResultCachedSticker inlineQueryResultCachedSticker0 = new InlineQueryResultCachedSticker();
      inlineQueryResultCachedSticker0.setStickerFileId("=");
      InlineQueryResultCachedSticker inlineQueryResultCachedSticker1 = inlineQueryResultCachedSticker0.setInputMessageContent(inputVenueMessageContent0);
      InlineQueryResultCachedSticker inlineQueryResultCachedSticker2 = inlineQueryResultCachedSticker1.setId("=");
      try { 
        inlineQueryResultCachedSticker2.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Latitude parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.objects.inlinequery.inputmessagecontent.InputVenueMessageContent", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      InlineQueryResultCachedSticker inlineQueryResultCachedSticker0 = new InlineQueryResultCachedSticker();
      InlineQueryResultCachedSticker inlineQueryResultCachedSticker1 = inlineQueryResultCachedSticker0.setId("82c`siu`GHrIk");
      InlineQueryResultCachedSticker inlineQueryResultCachedSticker2 = inlineQueryResultCachedSticker1.setStickerFileId("82c`siu`GHrIk");
      inlineQueryResultCachedSticker2.validate();
      assertSame(inlineQueryResultCachedSticker1, inlineQueryResultCachedSticker2);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      InlineQueryResultCachedSticker inlineQueryResultCachedSticker0 = new InlineQueryResultCachedSticker();
      inlineQueryResultCachedSticker0.setStickerFileId("");
      inlineQueryResultCachedSticker0.setId("z.w;");
      try { 
        inlineQueryResultCachedSticker0.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // StickerFileId parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.objects.inlinequery.result.chached.InlineQueryResultCachedSticker", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      InlineQueryResultCachedSticker inlineQueryResultCachedSticker0 = new InlineQueryResultCachedSticker();
      InlineQueryResultCachedSticker inlineQueryResultCachedSticker1 = inlineQueryResultCachedSticker0.setId("");
      try { 
        inlineQueryResultCachedSticker1.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // ID parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.objects.inlinequery.result.chached.InlineQueryResultCachedSticker", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      InlineQueryResultCachedSticker inlineQueryResultCachedSticker0 = new InlineQueryResultCachedSticker();
      inlineQueryResultCachedSticker0.setId("z.w;");
      try { 
        inlineQueryResultCachedSticker0.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // StickerFileId parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.objects.inlinequery.result.chached.InlineQueryResultCachedSticker", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      InlineQueryResultCachedSticker inlineQueryResultCachedSticker0 = new InlineQueryResultCachedSticker();
      try { 
        inlineQueryResultCachedSticker0.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // ID parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.objects.inlinequery.result.chached.InlineQueryResultCachedSticker", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      InlineQueryResultCachedSticker inlineQueryResultCachedSticker0 = new InlineQueryResultCachedSticker();
      InputMessageContent inputMessageContent0 = inlineQueryResultCachedSticker0.getInputMessageContent();
      assertNull(inputMessageContent0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      InlineQueryResultCachedSticker inlineQueryResultCachedSticker0 = new InlineQueryResultCachedSticker();
      String string0 = inlineQueryResultCachedSticker0.toString();
      assertEquals("InlineQueryResultCachedSticker{type='sticker', id='null', sticker_file_id='null', inputMessageContent='null', replyMarkup='null'}", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      InlineQueryResultCachedSticker inlineQueryResultCachedSticker0 = new InlineQueryResultCachedSticker();
      InlineKeyboardMarkup inlineKeyboardMarkup0 = new InlineKeyboardMarkup();
      inlineQueryResultCachedSticker0.setReplyMarkup(inlineKeyboardMarkup0);
      InlineKeyboardMarkup inlineKeyboardMarkup1 = inlineQueryResultCachedSticker0.getReplyMarkup();
      assertSame(inlineKeyboardMarkup1, inlineKeyboardMarkup0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      InlineQueryResultCachedSticker inlineQueryResultCachedSticker0 = new InlineQueryResultCachedSticker();
      String string0 = inlineQueryResultCachedSticker0.getStickerFileId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      InlineQueryResultCachedSticker inlineQueryResultCachedSticker0 = new InlineQueryResultCachedSticker();
      String string0 = inlineQueryResultCachedSticker0.getId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      InlineQueryResultCachedSticker inlineQueryResultCachedSticker0 = new InlineQueryResultCachedSticker();
      String string0 = inlineQueryResultCachedSticker0.getType();
      assertEquals("sticker", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      InlineQueryResultCachedSticker inlineQueryResultCachedSticker0 = new InlineQueryResultCachedSticker();
      InlineKeyboardMarkup inlineKeyboardMarkup0 = inlineQueryResultCachedSticker0.getReplyMarkup();
      assertNull(inlineKeyboardMarkup0);
  }
}
