/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 26 13:01:39 GMT 2018
 */

package org.telegram.telegrambots.meta.api.objects.inlinequery.result.chached;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.telegram.telegrambots.meta.api.objects.inlinequery.inputmessagecontent.InputContactMessageContent;
import org.telegram.telegrambots.meta.api.objects.inlinequery.inputmessagecontent.InputMessageContent;
import org.telegram.telegrambots.meta.api.objects.inlinequery.inputmessagecontent.InputTextMessageContent;
import org.telegram.telegrambots.meta.api.objects.inlinequery.result.chached.InlineQueryResultCachedDocument;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class InlineQueryResultCachedDocument_ESTest extends InlineQueryResultCachedDocument_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      InlineQueryResultCachedDocument inlineQueryResultCachedDocument0 = new InlineQueryResultCachedDocument();
      InlineQueryResultCachedDocument inlineQueryResultCachedDocument1 = inlineQueryResultCachedDocument0.setTitle("t");
      String string0 = inlineQueryResultCachedDocument1.getTitle();
      assertEquals("t", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      InlineQueryResultCachedDocument inlineQueryResultCachedDocument0 = new InlineQueryResultCachedDocument();
      InlineQueryResultCachedDocument inlineQueryResultCachedDocument1 = inlineQueryResultCachedDocument0.setTitle("");
      String string0 = inlineQueryResultCachedDocument1.getTitle();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      InlineQueryResultCachedDocument inlineQueryResultCachedDocument0 = new InlineQueryResultCachedDocument();
      InlineKeyboardMarkup inlineKeyboardMarkup0 = new InlineKeyboardMarkup();
      inlineQueryResultCachedDocument0.setReplyMarkup(inlineKeyboardMarkup0);
      InlineKeyboardMarkup inlineKeyboardMarkup1 = inlineQueryResultCachedDocument0.getReplyMarkup();
      assertSame(inlineKeyboardMarkup1, inlineKeyboardMarkup0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      InlineQueryResultCachedDocument inlineQueryResultCachedDocument0 = new InlineQueryResultCachedDocument();
      InlineQueryResultCachedDocument inlineQueryResultCachedDocument1 = inlineQueryResultCachedDocument0.setParseMode("");
      String string0 = inlineQueryResultCachedDocument1.getParseMode();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      InlineQueryResultCachedDocument inlineQueryResultCachedDocument0 = new InlineQueryResultCachedDocument();
      InputContactMessageContent inputContactMessageContent0 = new InputContactMessageContent();
      inlineQueryResultCachedDocument0.setInputMessageContent(inputContactMessageContent0);
      InputMessageContent inputMessageContent0 = inlineQueryResultCachedDocument0.getInputMessageContent();
      assertSame(inputMessageContent0, inputContactMessageContent0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      InlineQueryResultCachedDocument inlineQueryResultCachedDocument0 = new InlineQueryResultCachedDocument();
      InlineQueryResultCachedDocument inlineQueryResultCachedDocument1 = inlineQueryResultCachedDocument0.setId("KZ#|>");
      String string0 = inlineQueryResultCachedDocument1.getId();
      assertEquals("KZ#|>", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      InlineQueryResultCachedDocument inlineQueryResultCachedDocument0 = new InlineQueryResultCachedDocument();
      InlineQueryResultCachedDocument inlineQueryResultCachedDocument1 = inlineQueryResultCachedDocument0.setId("");
      String string0 = inlineQueryResultCachedDocument1.getId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      InlineQueryResultCachedDocument inlineQueryResultCachedDocument0 = new InlineQueryResultCachedDocument();
      inlineQueryResultCachedDocument0.setDocumentFileId("% Xv{jZ^;~x0");
      String string0 = inlineQueryResultCachedDocument0.getDocumentFileId();
      assertEquals("% Xv{jZ^;~x0", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      InlineQueryResultCachedDocument inlineQueryResultCachedDocument0 = new InlineQueryResultCachedDocument();
      inlineQueryResultCachedDocument0.setDocumentFileId("");
      String string0 = inlineQueryResultCachedDocument0.getDocumentFileId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      InlineQueryResultCachedDocument inlineQueryResultCachedDocument0 = new InlineQueryResultCachedDocument();
      inlineQueryResultCachedDocument0.setDescription("title");
      String string0 = inlineQueryResultCachedDocument0.getDescription();
      assertEquals("title", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      InlineQueryResultCachedDocument inlineQueryResultCachedDocument0 = new InlineQueryResultCachedDocument();
      inlineQueryResultCachedDocument0.setDescription("");
      String string0 = inlineQueryResultCachedDocument0.getDescription();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      InlineQueryResultCachedDocument inlineQueryResultCachedDocument0 = new InlineQueryResultCachedDocument();
      InlineQueryResultCachedDocument inlineQueryResultCachedDocument1 = inlineQueryResultCachedDocument0.setCaption("By6F4a9P,&}");
      String string0 = inlineQueryResultCachedDocument1.getCaption();
      assertEquals("By6F4a9P,&}", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      InlineQueryResultCachedDocument inlineQueryResultCachedDocument0 = new InlineQueryResultCachedDocument();
      inlineQueryResultCachedDocument0.setCaption("");
      String string0 = inlineQueryResultCachedDocument0.getCaption();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      InlineQueryResultCachedDocument inlineQueryResultCachedDocument0 = new InlineQueryResultCachedDocument();
      InlineQueryResultCachedDocument inlineQueryResultCachedDocument1 = inlineQueryResultCachedDocument0.setTitle(", address='");
      InlineQueryResultCachedDocument inlineQueryResultCachedDocument2 = inlineQueryResultCachedDocument1.setId(", address='");
      InputTextMessageContent inputTextMessageContent0 = new InputTextMessageContent();
      InlineQueryResultCachedDocument inlineQueryResultCachedDocument3 = inlineQueryResultCachedDocument2.setInputMessageContent(inputTextMessageContent0);
      inlineQueryResultCachedDocument3.setDocumentFileId(", address='");
      try { 
        inlineQueryResultCachedDocument2.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // MessageText parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.objects.inlinequery.inputmessagecontent.InputTextMessageContent", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      InlineQueryResultCachedDocument inlineQueryResultCachedDocument0 = new InlineQueryResultCachedDocument();
      inlineQueryResultCachedDocument0.setTitle("");
      InlineQueryResultCachedDocument inlineQueryResultCachedDocument1 = inlineQueryResultCachedDocument0.setDocumentFileId("iZFNpK6A{<8 !2Aj!Q");
      inlineQueryResultCachedDocument0.setId("iZFNpK6A{<8 !2Aj!Q");
      try { 
        inlineQueryResultCachedDocument1.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Title parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.objects.inlinequery.result.chached.InlineQueryResultCachedDocument", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      InlineQueryResultCachedDocument inlineQueryResultCachedDocument0 = new InlineQueryResultCachedDocument();
      InlineQueryResultCachedDocument inlineQueryResultCachedDocument1 = inlineQueryResultCachedDocument0.setDocumentFileId("% Xv{jZ^;~x0");
      InlineQueryResultCachedDocument inlineQueryResultCachedDocument2 = inlineQueryResultCachedDocument1.setTitle("% Xv{jZ^;~x0");
      inlineQueryResultCachedDocument2.setId("% Xv{jZ^;~x0");
      inlineQueryResultCachedDocument2.validate();
      assertEquals("% Xv{jZ^;~x0", inlineQueryResultCachedDocument2.getTitle());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      InlineQueryResultCachedDocument inlineQueryResultCachedDocument0 = new InlineQueryResultCachedDocument();
      inlineQueryResultCachedDocument0.setDocumentFileId("");
      inlineQueryResultCachedDocument0.setId("2)u,9'");
      try { 
        inlineQueryResultCachedDocument0.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // DocumentFileId parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.objects.inlinequery.result.chached.InlineQueryResultCachedDocument", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      InlineQueryResultCachedDocument inlineQueryResultCachedDocument0 = new InlineQueryResultCachedDocument();
      InlineQueryResultCachedDocument inlineQueryResultCachedDocument1 = inlineQueryResultCachedDocument0.setId("");
      try { 
        inlineQueryResultCachedDocument1.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // ID parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.objects.inlinequery.result.chached.InlineQueryResultCachedDocument", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      InlineQueryResultCachedDocument inlineQueryResultCachedDocument0 = new InlineQueryResultCachedDocument();
      inlineQueryResultCachedDocument0.setId("% Xv{jZ^;~x0");
      try { 
        inlineQueryResultCachedDocument0.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // DocumentFileId parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.objects.inlinequery.result.chached.InlineQueryResultCachedDocument", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      InlineQueryResultCachedDocument inlineQueryResultCachedDocument0 = new InlineQueryResultCachedDocument();
      try { 
        inlineQueryResultCachedDocument0.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // ID parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.objects.inlinequery.result.chached.InlineQueryResultCachedDocument", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      InlineQueryResultCachedDocument inlineQueryResultCachedDocument0 = new InlineQueryResultCachedDocument();
      String string0 = inlineQueryResultCachedDocument0.getParseMode();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      InlineQueryResultCachedDocument inlineQueryResultCachedDocument0 = new InlineQueryResultCachedDocument();
      InputMessageContent inputMessageContent0 = inlineQueryResultCachedDocument0.getInputMessageContent();
      assertNull(inputMessageContent0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      InlineQueryResultCachedDocument inlineQueryResultCachedDocument0 = new InlineQueryResultCachedDocument();
      InlineQueryResultCachedDocument inlineQueryResultCachedDocument1 = inlineQueryResultCachedDocument0.setParseMode("% Xv{jZ^;~x0");
      String string0 = inlineQueryResultCachedDocument1.getParseMode();
      assertEquals("% Xv{jZ^;~x0", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      InlineQueryResultCachedDocument inlineQueryResultCachedDocument0 = new InlineQueryResultCachedDocument();
      String string0 = inlineQueryResultCachedDocument0.getCaption();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      InlineQueryResultCachedDocument inlineQueryResultCachedDocument0 = new InlineQueryResultCachedDocument();
      InlineQueryResultCachedDocument inlineQueryResultCachedDocument1 = inlineQueryResultCachedDocument0.setDocumentFileId("% Xv{jZ^;~x0");
      inlineQueryResultCachedDocument1.setId("% Xv{jZ^;~x0");
      try { 
        inlineQueryResultCachedDocument0.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Title parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.objects.inlinequery.result.chached.InlineQueryResultCachedDocument", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      InlineQueryResultCachedDocument inlineQueryResultCachedDocument0 = new InlineQueryResultCachedDocument();
      String string0 = inlineQueryResultCachedDocument0.toString();
      assertEquals("InlineQueryResultCachedDocument{type='document', id='null', title='null', documentFileId='null', description='null', caption='null', replyMarkup=null, inputMessageContent=null, parseMode='null'}", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      InlineQueryResultCachedDocument inlineQueryResultCachedDocument0 = new InlineQueryResultCachedDocument();
      String string0 = inlineQueryResultCachedDocument0.getDescription();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      InlineQueryResultCachedDocument inlineQueryResultCachedDocument0 = new InlineQueryResultCachedDocument();
      String string0 = inlineQueryResultCachedDocument0.getId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      InlineQueryResultCachedDocument inlineQueryResultCachedDocument0 = new InlineQueryResultCachedDocument();
      InlineKeyboardMarkup inlineKeyboardMarkup0 = new InlineKeyboardMarkup();
      InlineQueryResultCachedDocument inlineQueryResultCachedDocument1 = inlineQueryResultCachedDocument0.setReplyMarkup(inlineKeyboardMarkup0);
      InlineQueryResultCachedDocument inlineQueryResultCachedDocument2 = inlineQueryResultCachedDocument1.setTitle("title");
      inlineQueryResultCachedDocument2.setDocumentFileId("title");
      inlineQueryResultCachedDocument2.setId("title");
      inlineQueryResultCachedDocument1.validate();
      assertSame(inlineQueryResultCachedDocument0, inlineQueryResultCachedDocument1);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      InlineQueryResultCachedDocument inlineQueryResultCachedDocument0 = new InlineQueryResultCachedDocument();
      String string0 = inlineQueryResultCachedDocument0.getType();
      assertEquals("document", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      InlineQueryResultCachedDocument inlineQueryResultCachedDocument0 = new InlineQueryResultCachedDocument();
      String string0 = inlineQueryResultCachedDocument0.getDocumentFileId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      InlineQueryResultCachedDocument inlineQueryResultCachedDocument0 = new InlineQueryResultCachedDocument();
      InlineKeyboardMarkup inlineKeyboardMarkup0 = inlineQueryResultCachedDocument0.getReplyMarkup();
      assertNull(inlineKeyboardMarkup0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      InlineQueryResultCachedDocument inlineQueryResultCachedDocument0 = new InlineQueryResultCachedDocument();
      String string0 = inlineQueryResultCachedDocument0.getTitle();
      assertNull(string0);
  }
}
