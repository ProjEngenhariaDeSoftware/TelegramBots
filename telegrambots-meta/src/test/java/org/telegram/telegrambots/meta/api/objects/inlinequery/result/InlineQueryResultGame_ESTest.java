/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 26 13:28:25 GMT 2018
 */

package org.telegram.telegrambots.meta.api.objects.inlinequery.result;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.telegram.telegrambots.meta.api.objects.inlinequery.result.InlineQueryResultGame;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class InlineQueryResultGame_ESTest extends InlineQueryResultGame_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      InlineQueryResultGame inlineQueryResultGame0 = new InlineQueryResultGame();
      inlineQueryResultGame0.setId("b");
      String string0 = inlineQueryResultGame0.getId();
      assertEquals("b", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      InlineQueryResultGame inlineQueryResultGame0 = new InlineQueryResultGame();
      inlineQueryResultGame0.setId("");
      String string0 = inlineQueryResultGame0.getId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      InlineQueryResultGame inlineQueryResultGame0 = new InlineQueryResultGame();
      inlineQueryResultGame0.setGameShortName("CallbackGame{}");
      String string0 = inlineQueryResultGame0.getGameShortName();
      assertEquals("CallbackGame{}", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      InlineQueryResultGame inlineQueryResultGame0 = new InlineQueryResultGame();
      inlineQueryResultGame0.setGameShortName("");
      String string0 = inlineQueryResultGame0.getGameShortName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      InlineQueryResultGame inlineQueryResultGame0 = new InlineQueryResultGame();
      InlineQueryResultGame inlineQueryResultGame1 = inlineQueryResultGame0.setId("GameShortName parameter can't be empty");
      inlineQueryResultGame1.setGameShortName("R");
      InlineKeyboardMarkup inlineKeyboardMarkup0 = new InlineKeyboardMarkup();
      LinkedList<List<InlineKeyboardButton>> linkedList0 = new LinkedList<List<InlineKeyboardButton>>();
      linkedList0.add((List<InlineKeyboardButton>) null);
      InlineKeyboardMarkup inlineKeyboardMarkup1 = inlineKeyboardMarkup0.setKeyboard(linkedList0);
      inlineQueryResultGame0.setReplyMarkup(inlineKeyboardMarkup1);
      // Undeclared exception!
      try { 
        inlineQueryResultGame1.validate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      InlineQueryResultGame inlineQueryResultGame0 = new InlineQueryResultGame();
      InlineQueryResultGame inlineQueryResultGame1 = inlineQueryResultGame0.setId("GameShortName parameter can't be empty");
      inlineQueryResultGame1.setGameShortName("H");
      InlineKeyboardMarkup inlineKeyboardMarkup0 = new InlineKeyboardMarkup();
      inlineQueryResultGame1.setReplyMarkup(inlineKeyboardMarkup0);
      inlineQueryResultGame1.validate();
      assertEquals("GameShortName parameter can't be empty", inlineQueryResultGame1.getId());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      InlineQueryResultGame inlineQueryResultGame0 = new InlineQueryResultGame();
      InlineQueryResultGame inlineQueryResultGame1 = inlineQueryResultGame0.setId("type");
      inlineQueryResultGame0.setGameShortName("");
      try { 
        inlineQueryResultGame1.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // GameShortName parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.objects.inlinequery.result.InlineQueryResultGame", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      InlineQueryResultGame inlineQueryResultGame0 = new InlineQueryResultGame();
      InlineQueryResultGame inlineQueryResultGame1 = inlineQueryResultGame0.setId("GameShortName parameter can't be empty");
      inlineQueryResultGame1.setGameShortName("H");
      inlineQueryResultGame1.validate();
      assertSame(inlineQueryResultGame1, inlineQueryResultGame0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      InlineQueryResultGame inlineQueryResultGame0 = new InlineQueryResultGame();
      InlineQueryResultGame inlineQueryResultGame1 = inlineQueryResultGame0.setId("");
      try { 
        inlineQueryResultGame1.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // ID parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.objects.inlinequery.result.InlineQueryResultGame", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      InlineQueryResultGame inlineQueryResultGame0 = new InlineQueryResultGame();
      try { 
        inlineQueryResultGame0.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // ID parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.objects.inlinequery.result.InlineQueryResultGame", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      InlineQueryResultGame inlineQueryResultGame0 = new InlineQueryResultGame();
      String string0 = inlineQueryResultGame0.getId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      InlineQueryResultGame inlineQueryResultGame0 = new InlineQueryResultGame();
      InlineQueryResultGame inlineQueryResultGame1 = inlineQueryResultGame0.setId("GameShortName parameter can't be empty");
      try { 
        inlineQueryResultGame1.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // GameShortName parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.objects.inlinequery.result.InlineQueryResultGame", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      InlineQueryResultGame inlineQueryResultGame0 = new InlineQueryResultGame();
      InlineKeyboardMarkup inlineKeyboardMarkup0 = new InlineKeyboardMarkup();
      inlineQueryResultGame0.setReplyMarkup(inlineKeyboardMarkup0);
      InlineKeyboardMarkup inlineKeyboardMarkup1 = inlineQueryResultGame0.getReplyMarkup();
      assertSame(inlineKeyboardMarkup1, inlineKeyboardMarkup0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      InlineQueryResultGame inlineQueryResultGame0 = new InlineQueryResultGame();
      InlineKeyboardMarkup inlineKeyboardMarkup0 = inlineQueryResultGame0.getReplyMarkup();
      assertNull(inlineKeyboardMarkup0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      InlineQueryResultGame inlineQueryResultGame0 = new InlineQueryResultGame();
      String string0 = inlineQueryResultGame0.toString();
      assertEquals("InlineQueryResultGame{type='game', id='null', gameShortName='null', replyMarkup=null}", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      InlineQueryResultGame inlineQueryResultGame0 = new InlineQueryResultGame();
      String string0 = inlineQueryResultGame0.getGameShortName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      InlineQueryResultGame inlineQueryResultGame0 = new InlineQueryResultGame();
      String string0 = inlineQueryResultGame0.getType();
      assertEquals("game", string0);
  }
}
