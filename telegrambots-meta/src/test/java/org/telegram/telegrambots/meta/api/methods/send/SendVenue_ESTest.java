/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 26 13:02:02 GMT 2018
 */

package org.telegram.telegrambots.meta.api.methods.send;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.telegram.telegrambots.meta.api.methods.send.SendVenue;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboard;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardRemove;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SendVenue_ESTest extends SendVenue_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SendVenue sendVenue0 = new SendVenue();
      sendVenue0.setTitle("sendVenue");
      String string0 = sendVenue0.getTitle();
      assertEquals("sendVenue", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SendVenue sendVenue0 = new SendVenue();
      sendVenue0.setTitle("");
      String string0 = sendVenue0.getTitle();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SendVenue sendVenue0 = new SendVenue();
      Integer integer0 = new Integer(0);
      SendVenue sendVenue1 = sendVenue0.setReplyToMessageId(integer0);
      Integer integer1 = sendVenue1.getReplyToMessageId();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SendVenue sendVenue0 = new SendVenue();
      Integer integer0 = Integer.valueOf((-4783));
      SendVenue sendVenue1 = sendVenue0.setReplyToMessageId(integer0);
      Integer integer1 = sendVenue1.getReplyToMessageId();
      assertEquals((-4783), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SendVenue sendVenue0 = new SendVenue();
      Integer integer0 = new Integer(660);
      sendVenue0.setReplyToMessageId(integer0);
      Integer integer1 = sendVenue0.getReplyToMessageId();
      assertEquals(660, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SendVenue sendVenue0 = new SendVenue();
      ReplyKeyboardRemove replyKeyboardRemove0 = new ReplyKeyboardRemove();
      SendVenue sendVenue1 = sendVenue0.setReplyMarkup(replyKeyboardRemove0);
      ReplyKeyboardRemove replyKeyboardRemove1 = (ReplyKeyboardRemove)sendVenue1.getReplyMarkup();
      assertNull(replyKeyboardRemove1.getSelective());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SendVenue sendVenue0 = new SendVenue();
      Float float0 = new Float(Float.NaN);
      sendVenue0.setLongitude(float0);
      Float float1 = sendVenue0.getLongitude();
      assertEquals(Float.NaN, (float)float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SendVenue sendVenue0 = new SendVenue();
      Float float0 = new Float(0.0);
      sendVenue0.setLongitude(float0);
      Float float1 = sendVenue0.getLongitude();
      assertEquals(0.0F, (float)float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SendVenue sendVenue0 = new SendVenue();
      Float float0 = new Float(1.0F);
      SendVenue sendVenue1 = sendVenue0.setLongitude(float0);
      Float float1 = sendVenue1.getLongitude();
      assertEquals(1.0F, (float)float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SendVenue sendVenue0 = new SendVenue();
      Float float0 = new Float(Double.POSITIVE_INFINITY);
      sendVenue0.setLongitude(float0);
      Float float1 = sendVenue0.getLongitude();
      assertEquals(Float.POSITIVE_INFINITY, (float)float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SendVenue sendVenue0 = new SendVenue();
      Float float0 = new Float(0.0);
      SendVenue sendVenue1 = sendVenue0.setLatitude(float0);
      Float float1 = sendVenue1.getLatitude();
      assertEquals(0.0F, (float)float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SendVenue sendVenue0 = new SendVenue();
      Float float0 = new Float((-361.212472));
      SendVenue sendVenue1 = sendVenue0.setLatitude(float0);
      Float float1 = sendVenue1.getLatitude();
      assertEquals((-361.21246F), (float)float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SendVenue sendVenue0 = new SendVenue();
      Float float0 = new Float(Double.NaN);
      sendVenue0.setLatitude(float0);
      Float float1 = sendVenue0.getLatitude();
      assertEquals(Float.NaN, (float)float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SendVenue sendVenue0 = new SendVenue();
      Float float0 = new Float(1.0F);
      sendVenue0.setLatitude(float0);
      Float float1 = sendVenue0.getLatitude();
      assertEquals(1.0F, (float)float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SendVenue sendVenue0 = new SendVenue();
      Float float0 = new Float(Double.POSITIVE_INFINITY);
      sendVenue0.setLatitude(float0);
      Float float1 = sendVenue0.getLatitude();
      assertEquals(Float.POSITIVE_INFINITY, (float)float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SendVenue sendVenue0 = new SendVenue();
      sendVenue0.setFoursquareType("&a");
      String string0 = sendVenue0.getFoursquareType();
      assertEquals("&a", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SendVenue sendVenue0 = new SendVenue();
      sendVenue0.setFoursquareType("");
      String string0 = sendVenue0.getFoursquareType();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SendVenue sendVenue0 = new SendVenue();
      sendVenue0.setFoursquareId("sendVenue");
      String string0 = sendVenue0.getFoursquareId();
      assertEquals("sendVenue", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SendVenue sendVenue0 = new SendVenue();
      sendVenue0.setChatId("");
      String string0 = sendVenue0.getChatId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SendVenue sendVenue0 = new SendVenue();
      sendVenue0.setAddress("sendVenue");
      String string0 = sendVenue0.getAddress();
      assertEquals("sendVenue", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SendVenue sendVenue0 = new SendVenue();
      // Undeclared exception!
      try { 
        sendVenue0.setChatId((Long) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SendVenue sendVenue0 = new SendVenue();
      // Undeclared exception!
      try { 
        sendVenue0.deserializeResponse("{}IDW H>|r'RC^]");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.telegram.telegrambots.meta.api.methods.send.SendVenue", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SendVenue sendVenue0 = new SendVenue();
      Float float0 = new Float((-940.76575F));
      SendVenue sendVenue1 = sendVenue0.setLatitude(float0);
      ReplyKeyboardRemove replyKeyboardRemove0 = new ReplyKeyboardRemove();
      sendVenue0.setReplyMarkup(replyKeyboardRemove0);
      SendVenue sendVenue2 = sendVenue0.setAddress("sendVenue");
      sendVenue2.setTitle("sendVenue");
      sendVenue0.setChatId("sendVenue");
      sendVenue1.setLongitude(float0);
      sendVenue0.validate();
      assertNull(sendVenue0.getDisableNotification());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SendVenue sendVenue0 = new SendVenue();
      Float float0 = new Float((-940.76575F));
      SendVenue sendVenue1 = sendVenue0.setLatitude(float0);
      SendVenue sendVenue2 = sendVenue0.setAddress("sendVenue");
      sendVenue2.setTitle("sendVenue");
      sendVenue0.setChatId("sendVenue");
      sendVenue1.setLongitude(float0);
      sendVenue0.validate();
      assertEquals((-940.76575F), sendVenue0.getLongitude(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SendVenue sendVenue0 = new SendVenue();
      Float float0 = new Float((-940.76575F));
      SendVenue sendVenue1 = sendVenue0.setLatitude(float0);
      sendVenue0.setTitle("sendVenue");
      sendVenue0.setChatId("sendVenue");
      sendVenue1.setLongitude(float0);
      try { 
        sendVenue0.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Address parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.methods.send.SendVenue", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SendVenue sendVenue0 = new SendVenue();
      SendVenue sendVenue1 = sendVenue0.setChatId("j/8)`");
      Float float0 = new Float((-940.76575F));
      SendVenue sendVenue2 = sendVenue1.setLatitude(float0);
      SendVenue sendVenue3 = sendVenue2.setTitle("");
      sendVenue3.setLongitude(float0);
      try { 
        sendVenue3.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Title parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.methods.send.SendVenue", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SendVenue sendVenue0 = new SendVenue();
      SendVenue sendVenue1 = sendVenue0.setChatId("j/8)`");
      Float float0 = new Float((-940.76575F));
      sendVenue0.setLatitude(float0);
      sendVenue0.setLongitude(float0);
      try { 
        sendVenue1.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Title parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.methods.send.SendVenue", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SendVenue sendVenue0 = new SendVenue();
      sendVenue0.setChatId("j/8)`");
      Float float0 = new Float((-940.76575F));
      sendVenue0.setLongitude(float0);
      try { 
        sendVenue0.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Latitude parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.methods.send.SendVenue", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SendVenue sendVenue0 = new SendVenue();
      try { 
        sendVenue0.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // ChatId parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.methods.send.SendVenue", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SendVenue sendVenue0 = new SendVenue();
      SendVenue sendVenue1 = sendVenue0.setChatId("j/8)`");
      try { 
        sendVenue1.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Longitude parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.methods.send.SendVenue", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SendVenue sendVenue0 = new SendVenue();
      String string0 = sendVenue0.getTitle();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SendVenue sendVenue0 = new SendVenue();
      String string0 = sendVenue0.toString();
      assertEquals("SendVenue{chatId='null', latitude=null, longitude=null, title='null', disableNotification=null, address='null', foursquareId='null', replyToMessageId=null, replyMarkup=null, foursquareType='null'}", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SendVenue sendVenue0 = new SendVenue();
      String string0 = sendVenue0.getAddress();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SendVenue sendVenue0 = new SendVenue();
      String string0 = sendVenue0.getChatId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SendVenue sendVenue0 = new SendVenue();
      String string0 = sendVenue0.getMethod();
      assertEquals("sendVenue", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SendVenue sendVenue0 = new SendVenue();
      SendVenue sendVenue1 = sendVenue0.setAddress("");
      String string0 = sendVenue1.getAddress();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SendVenue sendVenue0 = new SendVenue();
      sendVenue0.enableNotification();
      Boolean boolean0 = sendVenue0.getDisableNotification();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SendVenue sendVenue0 = new SendVenue();
      Boolean boolean0 = sendVenue0.getDisableNotification();
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SendVenue sendVenue0 = new SendVenue();
      String string0 = sendVenue0.getFoursquareId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SendVenue sendVenue0 = new SendVenue();
      Integer integer0 = sendVenue0.getReplyToMessageId();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SendVenue sendVenue0 = new SendVenue();
      Float float0 = new Float((-181.279F));
      sendVenue0.setLongitude(float0);
      Float float1 = sendVenue0.getLongitude();
      assertEquals((-181.279F), (float)float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SendVenue sendVenue0 = new SendVenue();
      Float float0 = sendVenue0.getLatitude();
      assertNull(float0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SendVenue sendVenue0 = new SendVenue();
      Float float0 = sendVenue0.getLongitude();
      assertNull(float0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SendVenue sendVenue0 = new SendVenue();
      ReplyKeyboard replyKeyboard0 = sendVenue0.getReplyMarkup();
      assertNull(replyKeyboard0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      SendVenue sendVenue0 = new SendVenue();
      Long long0 = new Long(0L);
      sendVenue0.setChatId(long0);
      String string0 = sendVenue0.getChatId();
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SendVenue sendVenue0 = new SendVenue();
      SendVenue sendVenue1 = sendVenue0.disableNotification();
      Boolean boolean0 = sendVenue1.getDisableNotification();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SendVenue sendVenue0 = new SendVenue();
      String string0 = sendVenue0.getFoursquareType();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SendVenue sendVenue0 = new SendVenue();
      sendVenue0.setFoursquareId("");
      String string0 = sendVenue0.getFoursquareId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      SendVenue sendVenue0 = new SendVenue();
      try { 
        sendVenue0.deserializeResponse("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unable to deserialize response
         //
         verifyException("org.telegram.telegrambots.meta.api.methods.send.SendVenue", e);
      }
  }
}
