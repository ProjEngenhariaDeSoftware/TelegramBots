/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 26 13:39:50 GMT 2018
 */

package org.telegram.telegrambots.meta.api.objects.passport;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.telegram.telegrambots.meta.api.objects.passport.EncryptedPassportElement;
import org.telegram.telegrambots.meta.api.objects.passport.PassportFile;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EncryptedPassportElement_ESTest extends EncryptedPassportElement_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<PassportFile> linkedList0 = new LinkedList<PassportFile>();
      PassportFile passportFile0 = new PassportFile();
      EncryptedPassportElement encryptedPassportElement0 = new EncryptedPassportElement("{9(", "{9(", "{9(", "{9(", linkedList0, passportFile0, passportFile0, passportFile0);
      String string0 = encryptedPassportElement0.getType();
      assertEquals("{9(", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<PassportFile> linkedList0 = new LinkedList<PassportFile>();
      Integer integer0 = new Integer(0);
      PassportFile passportFile0 = new PassportFile("<x,", integer0, integer0);
      EncryptedPassportElement encryptedPassportElement0 = new EncryptedPassportElement("", "aK", "aK", "front_side", linkedList0, passportFile0, passportFile0, passportFile0);
      String string0 = encryptedPassportElement0.getType();
      assertEquals("aK", encryptedPassportElement0.getPhoneNumber());
      assertEquals("", string0);
      assertEquals("aK", encryptedPassportElement0.getData());
      assertEquals("front_side", encryptedPassportElement0.getEmail());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PassportFile passportFile0 = new PassportFile();
      EncryptedPassportElement encryptedPassportElement0 = new EncryptedPassportElement(", reverseSide=", ", reverseSide=", ", reverseSide=", "type", (List<PassportFile>) null, passportFile0, passportFile0, passportFile0);
      encryptedPassportElement0.getSelfie();
      assertEquals("type", encryptedPassportElement0.getEmail());
      assertEquals(", reverseSide=", encryptedPassportElement0.getType());
      assertEquals(", reverseSide=", encryptedPassportElement0.getData());
      assertEquals(", reverseSide=", encryptedPassportElement0.getPhoneNumber());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PassportFile passportFile0 = new PassportFile();
      EncryptedPassportElement encryptedPassportElement0 = new EncryptedPassportElement(", reverseSide=", ", reverseSide=", ", reverseSide=", "type", (List<PassportFile>) null, passportFile0, passportFile0, passportFile0);
      encryptedPassportElement0.getReverseSide();
      assertEquals(", reverseSide=", encryptedPassportElement0.getData());
      assertEquals(", reverseSide=", encryptedPassportElement0.getPhoneNumber());
      assertEquals("type", encryptedPassportElement0.getEmail());
      assertEquals(", reverseSide=", encryptedPassportElement0.getType());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<PassportFile> linkedList0 = new LinkedList<PassportFile>();
      PassportFile passportFile0 = new PassportFile();
      EncryptedPassportElement encryptedPassportElement0 = new EncryptedPassportElement("{9(", "{9(", "{9(", "{9(", linkedList0, passportFile0, passportFile0, passportFile0);
      String string0 = encryptedPassportElement0.getPhoneNumber();
      assertEquals("{9(", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<PassportFile> linkedList0 = new LinkedList<PassportFile>();
      EncryptedPassportElement encryptedPassportElement0 = new EncryptedPassportElement("", "", "", "|jCgjw'NtXy", linkedList0, (PassportFile) null, (PassportFile) null, (PassportFile) null);
      String string0 = encryptedPassportElement0.getPhoneNumber();
      assertEquals("", encryptedPassportElement0.getData());
      assertEquals("", string0);
      assertEquals("|jCgjw'NtXy", encryptedPassportElement0.getEmail());
      assertEquals("", encryptedPassportElement0.getType());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<PassportFile> linkedList0 = new LinkedList<PassportFile>();
      PassportFile passportFile0 = new PassportFile();
      EncryptedPassportElement encryptedPassportElement0 = new EncryptedPassportElement("{9(", "{9(", "{9(", "{9(", linkedList0, passportFile0, passportFile0, passportFile0);
      PassportFile passportFile1 = encryptedPassportElement0.getFrontSide();
      assertSame(passportFile0, passportFile1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<PassportFile> linkedList0 = new LinkedList<PassportFile>();
      PassportFile passportFile0 = new PassportFile();
      EncryptedPassportElement encryptedPassportElement0 = new EncryptedPassportElement("wVNm+HNL", "wVNm+HNL", "", (String) null, linkedList0, passportFile0, passportFile0, passportFile0);
      encryptedPassportElement0.getFiles();
      assertEquals("wVNm+HNL", encryptedPassportElement0.getType());
      assertEquals("", encryptedPassportElement0.getPhoneNumber());
      assertEquals("wVNm+HNL", encryptedPassportElement0.getData());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<PassportFile> linkedList0 = new LinkedList<PassportFile>();
      PassportFile passportFile0 = new PassportFile();
      EncryptedPassportElement encryptedPassportElement0 = new EncryptedPassportElement("{9(", "{9(", "{9(", "{9(", linkedList0, passportFile0, passportFile0, passportFile0);
      linkedList0.addLast(passportFile0);
      List<PassportFile> list0 = encryptedPassportElement0.getFiles();
      assertTrue(list0.contains(passportFile0));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PassportFile passportFile0 = new PassportFile();
      EncryptedPassportElement encryptedPassportElement0 = new EncryptedPassportElement(", reverseSide=", ", reverseSide=", ", reverseSide=", "type", (List<PassportFile>) null, passportFile0, passportFile0, passportFile0);
      String string0 = encryptedPassportElement0.getEmail();
      assertEquals(", reverseSide=", encryptedPassportElement0.getType());
      assertEquals("type", string0);
      assertEquals(", reverseSide=", encryptedPassportElement0.getPhoneNumber());
      assertEquals(", reverseSide=", encryptedPassportElement0.getData());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<PassportFile> linkedList0 = new LinkedList<PassportFile>();
      EncryptedPassportElement encryptedPassportElement0 = new EncryptedPassportElement("f~}lm", "f~}lm", "Dv{rz&$_2", "", linkedList0, (PassportFile) null, (PassportFile) null, (PassportFile) null);
      String string0 = encryptedPassportElement0.getEmail();
      assertEquals("Dv{rz&$_2", encryptedPassportElement0.getPhoneNumber());
      assertEquals("f~}lm", encryptedPassportElement0.getType());
      assertEquals("", string0);
      assertEquals("f~}lm", encryptedPassportElement0.getData());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PassportFile passportFile0 = new PassportFile();
      EncryptedPassportElement encryptedPassportElement0 = new EncryptedPassportElement(", reverseSide=", ", reverseSide=", ", reverseSide=", "type", (List<PassportFile>) null, passportFile0, passportFile0, passportFile0);
      String string0 = encryptedPassportElement0.getData();
      assertEquals(", reverseSide=", string0);
      assertEquals("type", encryptedPassportElement0.getEmail());
      assertEquals(", reverseSide=", encryptedPassportElement0.getPhoneNumber());
      assertEquals(", reverseSide=", encryptedPassportElement0.getType());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<PassportFile> linkedList0 = new LinkedList<PassportFile>();
      PassportFile passportFile0 = new PassportFile();
      EncryptedPassportElement encryptedPassportElement0 = new EncryptedPassportElement("3W^2 :*zgo$e9", "", "", "", linkedList0, passportFile0, passportFile0, passportFile0);
      String string0 = encryptedPassportElement0.getData();
      assertEquals("", encryptedPassportElement0.getEmail());
      assertEquals("", encryptedPassportElement0.getPhoneNumber());
      assertEquals("", string0);
      assertEquals("3W^2 :*zgo$e9", encryptedPassportElement0.getType());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      EncryptedPassportElement encryptedPassportElement0 = new EncryptedPassportElement();
      boolean boolean0 = encryptedPassportElement0.hasTranslations();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      EncryptedPassportElement encryptedPassportElement0 = new EncryptedPassportElement();
      PassportFile passportFile0 = encryptedPassportElement0.getSelfie();
      assertNull(passportFile0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      EncryptedPassportElement encryptedPassportElement0 = new EncryptedPassportElement();
      PassportFile passportFile0 = encryptedPassportElement0.getFrontSide();
      assertNull(passportFile0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      EncryptedPassportElement encryptedPassportElement0 = new EncryptedPassportElement();
      String string0 = encryptedPassportElement0.getEmail();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      EncryptedPassportElement encryptedPassportElement0 = new EncryptedPassportElement();
      String string0 = encryptedPassportElement0.getHash();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      EncryptedPassportElement encryptedPassportElement0 = new EncryptedPassportElement();
      PassportFile passportFile0 = encryptedPassportElement0.getReverseSide();
      assertNull(passportFile0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      EncryptedPassportElement encryptedPassportElement0 = new EncryptedPassportElement();
      String string0 = encryptedPassportElement0.getType();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      EncryptedPassportElement encryptedPassportElement0 = new EncryptedPassportElement();
      String string0 = encryptedPassportElement0.getData();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      EncryptedPassportElement encryptedPassportElement0 = new EncryptedPassportElement();
      List<PassportFile> list0 = encryptedPassportElement0.getFiles();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      EncryptedPassportElement encryptedPassportElement0 = new EncryptedPassportElement();
      ArrayList<PassportFile> arrayList0 = encryptedPassportElement0.getTranslations();
      assertNull(arrayList0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      EncryptedPassportElement encryptedPassportElement0 = new EncryptedPassportElement();
      String string0 = encryptedPassportElement0.getPhoneNumber();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      EncryptedPassportElement encryptedPassportElement0 = new EncryptedPassportElement();
      String string0 = encryptedPassportElement0.toString();
      assertEquals("EncryptedPassportElement{type='null', data='null', phoneNumber='null', email='null', files=null, frontSide=null, reverseSide=null, selfie=null, translations=null, hash='null'}", string0);
  }
}
