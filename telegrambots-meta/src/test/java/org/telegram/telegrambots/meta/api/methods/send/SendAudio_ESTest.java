/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 26 13:22:53 GMT 2018
 */

package org.telegram.telegrambots.meta.api.methods.send;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;
import org.telegram.telegrambots.meta.api.methods.send.SendAudio;
import org.telegram.telegrambots.meta.api.objects.InputFile;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboard;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SendAudio_ESTest extends SendAudio_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SendAudio sendAudio0 = new SendAudio();
      MockFile mockFile0 = new MockFile("chat_id");
      SendAudio sendAudio1 = sendAudio0.setAudio((File) mockFile0);
      assertNull(sendAudio1.getParseMode());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SendAudio sendAudio0 = new SendAudio();
      sendAudio0.setTitle("");
      String string0 = sendAudio0.getTitle();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SendAudio sendAudio0 = new SendAudio();
      MockFile mockFile0 = new MockFile("parse_mode", "title");
      InputFile inputFile0 = new InputFile();
      InputFile inputFile1 = inputFile0.setMedia((File) mockFile0, "`YCD^m!");
      sendAudio0.setThumb(inputFile0);
      InputFile inputFile2 = sendAudio0.getThumb();
      assertSame(inputFile2, inputFile1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SendAudio sendAudio0 = new SendAudio();
      InputFile inputFile0 = new InputFile("");
      SendAudio sendAudio1 = sendAudio0.setThumb(inputFile0);
      InputFile inputFile1 = sendAudio1.getThumb();
      assertFalse(inputFile1.isNew());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SendAudio sendAudio0 = new SendAudio();
      Integer integer0 = new Integer((-1));
      sendAudio0.setReplyToMessageId(integer0);
      Integer integer1 = sendAudio0.getReplyToMessageId();
      assertEquals((-1), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SendAudio sendAudio0 = new SendAudio();
      Integer integer0 = new Integer(0);
      sendAudio0.setReplyToMessageId(integer0);
      Integer integer1 = sendAudio0.getReplyToMessageId();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SendAudio sendAudio0 = new SendAudio();
      Integer integer0 = new Integer(110);
      sendAudio0.setReplyToMessageId(integer0);
      Integer integer1 = sendAudio0.getReplyToMessageId();
      assertEquals(110, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SendAudio sendAudio0 = new SendAudio();
      InlineKeyboardMarkup inlineKeyboardMarkup0 = new InlineKeyboardMarkup();
      SendAudio sendAudio1 = sendAudio0.setReplyMarkup(inlineKeyboardMarkup0);
      ReplyKeyboard replyKeyboard0 = sendAudio1.getReplyMarkup();
      assertSame(inlineKeyboardMarkup0, replyKeyboard0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SendAudio sendAudio0 = new SendAudio();
      sendAudio0.setPerformer("SendAudio{duration=");
      String string0 = sendAudio0.getPerformer();
      assertEquals("SendAudio{duration=", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SendAudio sendAudio0 = new SendAudio();
      sendAudio0.setParseMode("");
      String string0 = sendAudio0.getParseMode();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SendAudio sendAudio0 = new SendAudio();
      Integer integer0 = new Integer(0);
      sendAudio0.setDuration(integer0);
      Integer integer1 = sendAudio0.getDuration();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SendAudio sendAudio0 = new SendAudio();
      Integer integer0 = new Integer((-621));
      sendAudio0.setDuration(integer0);
      Integer integer1 = sendAudio0.getDuration();
      assertEquals((-621), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SendAudio sendAudio0 = new SendAudio();
      SendAudio sendAudio1 = sendAudio0.setChatId("");
      String string0 = sendAudio1.getChatId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SendAudio sendAudio0 = new SendAudio();
      SendAudio sendAudio1 = sendAudio0.setCaption("");
      String string0 = sendAudio1.getCaption();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SendAudio sendAudio0 = new SendAudio();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 22);
      SendAudio sendAudio1 = sendAudio0.setAudio("reply_markup", (InputStream) pipedInputStream0);
      InputFile inputFile0 = sendAudio1.getAudio();
      assertEquals("reply_markup", inputFile0.getMediaName());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SendAudio sendAudio0 = new SendAudio();
      sendAudio0.setAudio("disable_notification");
      InputFile inputFile0 = sendAudio0.getAudio();
      assertEquals("disable_notification", inputFile0.getAttachName());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SendAudio sendAudio0 = new SendAudio();
      InlineKeyboardMarkup inlineKeyboardMarkup0 = new InlineKeyboardMarkup();
      LinkedList<List<InlineKeyboardButton>> linkedList0 = new LinkedList<List<InlineKeyboardButton>>();
      InlineKeyboardMarkup inlineKeyboardMarkup1 = inlineKeyboardMarkup0.setKeyboard(linkedList0);
      sendAudio0.setAudio("performer");
      SendAudio sendAudio1 = sendAudio0.setReplyMarkup(inlineKeyboardMarkup1);
      linkedList0.add((List<InlineKeyboardButton>) null);
      SendAudio sendAudio2 = sendAudio1.setChatId("caption");
      // Undeclared exception!
      try { 
        sendAudio2.validate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SendAudio sendAudio0 = new SendAudio();
      // Undeclared exception!
      try { 
        sendAudio0.setChatId((Long) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SendAudio sendAudio0 = new SendAudio();
      // Undeclared exception!
      try { 
        sendAudio0.setAudio((InputFile) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // audio cannot be null!
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SendAudio sendAudio0 = new SendAudio();
      // Undeclared exception!
      try { 
        sendAudio0.setAudio("chat_id", (InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // inputStream cannot be null!
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SendAudio sendAudio0 = new SendAudio();
      // Undeclared exception!
      try { 
        sendAudio0.deserializeResponse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.JsonFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SendAudio sendAudio0 = new SendAudio();
      InlineKeyboardMarkup inlineKeyboardMarkup0 = new InlineKeyboardMarkup();
      sendAudio0.setAudio("performer");
      SendAudio sendAudio1 = sendAudio0.setReplyMarkup(inlineKeyboardMarkup0);
      SendAudio sendAudio2 = sendAudio1.setChatId("caption");
      sendAudio2.validate();
      assertEquals("caption", sendAudio2.getChatId());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SendAudio sendAudio0 = new SendAudio();
      try { 
        sendAudio0.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // ChatId parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.methods.send.SendAudio", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SendAudio sendAudio0 = new SendAudio();
      sendAudio0.setChatId("");
      try { 
        sendAudio0.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Audio parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.methods.send.SendAudio", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SendAudio sendAudio0 = new SendAudio();
      sendAudio0.setParseMode("thumb");
      String string0 = sendAudio0.getParseMode();
      assertEquals("thumb", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SendAudio sendAudio0 = new SendAudio();
      Integer integer0 = sendAudio0.getDuration();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SendAudio sendAudio0 = new SendAudio();
      SendAudio sendAudio1 = sendAudio0.enableNotification();
      Boolean boolean0 = sendAudio1.getDisableNotification();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SendAudio sendAudio0 = new SendAudio();
      Integer integer0 = sendAudio0.getReplyToMessageId();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SendAudio sendAudio0 = new SendAudio();
      Long long0 = new Long(0L);
      SendAudio sendAudio1 = sendAudio0.setChatId(long0);
      assertNull(sendAudio1.getTitle());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SendAudio sendAudio0 = new SendAudio();
      String string0 = sendAudio0.getParseMode();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SendAudio sendAudio0 = new SendAudio();
      String string0 = sendAudio0.getTitle();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SendAudio sendAudio0 = new SendAudio();
      InputFile inputFile0 = sendAudio0.getAudio();
      assertNull(inputFile0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SendAudio sendAudio0 = new SendAudio();
      String string0 = sendAudio0.getChatId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SendAudio sendAudio0 = new SendAudio();
      ReplyKeyboard replyKeyboard0 = sendAudio0.getReplyMarkup();
      assertNull(replyKeyboard0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SendAudio sendAudio0 = new SendAudio();
      InputFile inputFile0 = new InputFile("audio");
      SendAudio sendAudio1 = sendAudio0.setAudio(inputFile0);
      sendAudio1.setChatId("");
      sendAudio0.validate();
      assertEquals("", sendAudio0.getChatId());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SendAudio sendAudio0 = new SendAudio();
      sendAudio0.setCaption("caption");
      String string0 = sendAudio0.getCaption();
      assertEquals("caption", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SendAudio sendAudio0 = new SendAudio();
      String string0 = sendAudio0.getCaption();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SendAudio sendAudio0 = new SendAudio();
      String string0 = sendAudio0.getPerformer();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SendAudio sendAudio0 = new SendAudio();
      InputFile inputFile0 = sendAudio0.getThumb();
      assertNull(inputFile0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SendAudio sendAudio0 = new SendAudio();
      SendAudio sendAudio1 = sendAudio0.setPerformer("");
      String string0 = sendAudio1.getPerformer();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SendAudio sendAudio0 = new SendAudio();
      Integer integer0 = new Integer(125);
      SendAudio sendAudio1 = sendAudio0.setDuration(integer0);
      Integer integer1 = sendAudio1.getDuration();
      assertEquals(125, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SendAudio sendAudio0 = new SendAudio();
      InputFile inputFile0 = new InputFile("audio");
      SendAudio sendAudio1 = sendAudio0.setThumb(inputFile0);
      SendAudio sendAudio2 = sendAudio1.setAudio(inputFile0);
      sendAudio2.setChatId("");
      sendAudio0.validate();
      assertEquals("", sendAudio0.getChatId());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SendAudio sendAudio0 = new SendAudio();
      sendAudio0.setChatId("reply_markup");
      String string0 = sendAudio0.getChatId();
      assertEquals("reply_markup", string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SendAudio sendAudio0 = new SendAudio();
      String string0 = sendAudio0.toString();
      assertEquals("SendAudio{duration=null, chatId='null', audio=null, replyToMessageId=null, disableNotification=null, replyMarkup=null, performer='null', title='null', caption='null', parseMode='null', thumb=null}", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      SendAudio sendAudio0 = new SendAudio();
      // Undeclared exception!
      try { 
        sendAudio0.setAudio((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file cannot be null!
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SendAudio sendAudio0 = new SendAudio();
      SendAudio sendAudio1 = sendAudio0.disableNotification();
      Boolean boolean0 = sendAudio1.getDisableNotification();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SendAudio sendAudio0 = new SendAudio();
      Boolean boolean0 = sendAudio0.getDisableNotification();
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SendAudio sendAudio0 = new SendAudio();
      SendAudio sendAudio1 = sendAudio0.setTitle("^P/]KM*~iD5_4ck*^K");
      String string0 = sendAudio1.getTitle();
      assertEquals("^P/]KM*~iD5_4ck*^K", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      SendAudio sendAudio0 = new SendAudio();
      try { 
        sendAudio0.deserializeResponse("chat_id");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unable to deserialize response
         //
         verifyException("org.telegram.telegrambots.meta.api.methods.send.SendAudio", e);
      }
  }
}
