/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 26 13:10:51 GMT 2018
 */

package org.telegram.telegrambots.meta.api.objects.inlinequery.result;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.telegram.telegrambots.meta.api.objects.inlinequery.inputmessagecontent.InputLocationMessageContent;
import org.telegram.telegrambots.meta.api.objects.inlinequery.inputmessagecontent.InputMessageContent;
import org.telegram.telegrambots.meta.api.objects.inlinequery.inputmessagecontent.InputTextMessageContent;
import org.telegram.telegrambots.meta.api.objects.inlinequery.result.InlineQueryResultVoice;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class InlineQueryResultVoice_ESTest extends InlineQueryResultVoice_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      InlineQueryResultVoice inlineQueryResultVoice0 = new InlineQueryResultVoice();
      inlineQueryResultVoice0.setVoiceUrl(", il2'");
      String string0 = inlineQueryResultVoice0.getVoiceUrl();
      assertEquals(", il2'", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      InlineQueryResultVoice inlineQueryResultVoice0 = new InlineQueryResultVoice();
      InlineQueryResultVoice inlineQueryResultVoice1 = inlineQueryResultVoice0.setVoiceUrl("");
      String string0 = inlineQueryResultVoice1.getVoiceUrl();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      InlineQueryResultVoice inlineQueryResultVoice0 = new InlineQueryResultVoice();
      Integer integer0 = new Integer(0);
      inlineQueryResultVoice0.setVoiceDuration(integer0);
      Integer integer1 = inlineQueryResultVoice0.getVoiceDuration();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      InlineQueryResultVoice inlineQueryResultVoice0 = new InlineQueryResultVoice();
      Integer integer0 = new Integer((-3019));
      inlineQueryResultVoice0.setVoiceDuration(integer0);
      Integer integer1 = inlineQueryResultVoice0.getVoiceDuration();
      assertEquals((-3019), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      InlineQueryResultVoice inlineQueryResultVoice0 = new InlineQueryResultVoice();
      Integer integer0 = new Integer(417);
      inlineQueryResultVoice0.setVoiceDuration(integer0);
      Integer integer1 = inlineQueryResultVoice0.getVoiceDuration();
      assertEquals(417, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      InlineQueryResultVoice inlineQueryResultVoice0 = new InlineQueryResultVoice();
      inlineQueryResultVoice0.setTitle("");
      String string0 = inlineQueryResultVoice0.getTitle();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      InlineQueryResultVoice inlineQueryResultVoice0 = new InlineQueryResultVoice();
      InlineKeyboardMarkup inlineKeyboardMarkup0 = new InlineKeyboardMarkup();
      inlineQueryResultVoice0.setReplyMarkup(inlineKeyboardMarkup0);
      InlineKeyboardMarkup inlineKeyboardMarkup1 = inlineQueryResultVoice0.getReplyMarkup();
      assertSame(inlineKeyboardMarkup1, inlineKeyboardMarkup0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      InlineQueryResultVoice inlineQueryResultVoice0 = new InlineQueryResultVoice();
      InputTextMessageContent inputTextMessageContent0 = new InputTextMessageContent();
      inlineQueryResultVoice0.setInputMessageContent(inputTextMessageContent0);
      InputTextMessageContent inputTextMessageContent1 = (InputTextMessageContent)inlineQueryResultVoice0.getInputMessageContent();
      assertNull(inputTextMessageContent1.getDisableWebPagePreview());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      InlineQueryResultVoice inlineQueryResultVoice0 = new InlineQueryResultVoice();
      inlineQueryResultVoice0.setId("37m;!zcgUhsYd-");
      String string0 = inlineQueryResultVoice0.getId();
      assertEquals("37m;!zcgUhsYd-", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      InlineQueryResultVoice inlineQueryResultVoice0 = new InlineQueryResultVoice();
      inlineQueryResultVoice0.setId("");
      String string0 = inlineQueryResultVoice0.getId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      InlineQueryResultVoice inlineQueryResultVoice0 = new InlineQueryResultVoice();
      InlineQueryResultVoice inlineQueryResultVoice1 = inlineQueryResultVoice0.setCaption("Cddl*stM8:=U|sHpf!");
      String string0 = inlineQueryResultVoice1.getCaption();
      assertEquals("Cddl*stM8:=U|sHpf!", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      InlineQueryResultVoice inlineQueryResultVoice0 = new InlineQueryResultVoice();
      InlineQueryResultVoice inlineQueryResultVoice1 = inlineQueryResultVoice0.setCaption("");
      String string0 = inlineQueryResultVoice1.getCaption();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      InlineQueryResultVoice inlineQueryResultVoice0 = new InlineQueryResultVoice();
      InlineKeyboardMarkup inlineKeyboardMarkup0 = new InlineKeyboardMarkup();
      LinkedList<List<InlineKeyboardButton>> linkedList0 = new LinkedList<List<InlineKeyboardButton>>();
      InlineKeyboardMarkup inlineKeyboardMarkup1 = inlineKeyboardMarkup0.setKeyboard(linkedList0);
      InlineQueryResultVoice inlineQueryResultVoice1 = inlineQueryResultVoice0.setReplyMarkup(inlineKeyboardMarkup1);
      InlineQueryResultVoice inlineQueryResultVoice2 = inlineQueryResultVoice1.setId("6`/N");
      linkedList0.add((List<InlineKeyboardButton>) null);
      inlineQueryResultVoice2.setVoiceUrl("6`/N");
      // Undeclared exception!
      try { 
        inlineQueryResultVoice0.validate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      InlineQueryResultVoice inlineQueryResultVoice0 = new InlineQueryResultVoice();
      InlineQueryResultVoice inlineQueryResultVoice1 = inlineQueryResultVoice0.setId("BbY^)");
      InputLocationMessageContent inputLocationMessageContent0 = new InputLocationMessageContent();
      InlineQueryResultVoice inlineQueryResultVoice2 = inlineQueryResultVoice1.setInputMessageContent(inputLocationMessageContent0);
      inlineQueryResultVoice2.setVoiceUrl("BbY^)");
      try { 
        inlineQueryResultVoice0.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Latitude parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.objects.inlinequery.inputmessagecontent.InputLocationMessageContent", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      InlineQueryResultVoice inlineQueryResultVoice0 = new InlineQueryResultVoice();
      InlineQueryResultVoice inlineQueryResultVoice1 = inlineQueryResultVoice0.setVoiceUrl("");
      inlineQueryResultVoice1.setId("InlineQueryResultVoice{type='voice', id='null', voiceUrl='', title='null', voiceDuration=null, inputMessageContent=null, replyMarkup=null, caption='null', parseMode='null'}");
      try { 
        inlineQueryResultVoice0.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // VoiceUrl parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.objects.inlinequery.result.InlineQueryResultVoice", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      InlineQueryResultVoice inlineQueryResultVoice0 = new InlineQueryResultVoice();
      inlineQueryResultVoice0.setId(", il2'");
      try { 
        inlineQueryResultVoice0.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // VoiceUrl parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.objects.inlinequery.result.InlineQueryResultVoice", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      InlineQueryResultVoice inlineQueryResultVoice0 = new InlineQueryResultVoice();
      try { 
        inlineQueryResultVoice0.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // ID parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.objects.inlinequery.result.InlineQueryResultVoice", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      InlineQueryResultVoice inlineQueryResultVoice0 = new InlineQueryResultVoice();
      inlineQueryResultVoice0.setId("");
      try { 
        inlineQueryResultVoice0.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // ID parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.objects.inlinequery.result.InlineQueryResultVoice", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      InlineQueryResultVoice inlineQueryResultVoice0 = new InlineQueryResultVoice();
      InlineKeyboardMarkup inlineKeyboardMarkup0 = new InlineKeyboardMarkup();
      InlineQueryResultVoice inlineQueryResultVoice1 = inlineQueryResultVoice0.setReplyMarkup(inlineKeyboardMarkup0);
      InlineQueryResultVoice inlineQueryResultVoice2 = inlineQueryResultVoice1.setVoiceUrl(", il2'");
      inlineQueryResultVoice1.setId(", il2'");
      inlineQueryResultVoice2.validate();
      assertNull(inlineQueryResultVoice2.getVoiceDuration());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      InlineQueryResultVoice inlineQueryResultVoice0 = new InlineQueryResultVoice();
      Integer integer0 = inlineQueryResultVoice0.getVoiceDuration();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      InlineQueryResultVoice inlineQueryResultVoice0 = new InlineQueryResultVoice();
      InputMessageContent inputMessageContent0 = inlineQueryResultVoice0.getInputMessageContent();
      assertNull(inputMessageContent0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      InlineQueryResultVoice inlineQueryResultVoice0 = new InlineQueryResultVoice();
      String string0 = inlineQueryResultVoice0.getVoiceUrl();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      InlineQueryResultVoice inlineQueryResultVoice0 = new InlineQueryResultVoice();
      InlineQueryResultVoice inlineQueryResultVoice1 = inlineQueryResultVoice0.setVoiceUrl(", il2'");
      inlineQueryResultVoice0.setId(", il2'");
      inlineQueryResultVoice1.validate();
      assertSame(inlineQueryResultVoice0, inlineQueryResultVoice1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      InlineQueryResultVoice inlineQueryResultVoice0 = new InlineQueryResultVoice();
      String string0 = inlineQueryResultVoice0.getId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      InlineQueryResultVoice inlineQueryResultVoice0 = new InlineQueryResultVoice();
      String string0 = inlineQueryResultVoice0.toString();
      assertEquals("InlineQueryResultVoice{type='voice', id='null', voiceUrl='null', title='null', voiceDuration=null, inputMessageContent=null, replyMarkup=null, caption='null', parseMode='null'}", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      InlineQueryResultVoice inlineQueryResultVoice0 = new InlineQueryResultVoice();
      String string0 = inlineQueryResultVoice0.getTitle();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      InlineQueryResultVoice inlineQueryResultVoice0 = new InlineQueryResultVoice();
      String string0 = inlineQueryResultVoice0.getType();
      assertEquals("voice", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      InlineQueryResultVoice inlineQueryResultVoice0 = new InlineQueryResultVoice();
      InlineKeyboardMarkup inlineKeyboardMarkup0 = inlineQueryResultVoice0.getReplyMarkup();
      assertNull(inlineKeyboardMarkup0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      InlineQueryResultVoice inlineQueryResultVoice0 = new InlineQueryResultVoice();
      String string0 = inlineQueryResultVoice0.getCaption();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      InlineQueryResultVoice inlineQueryResultVoice0 = new InlineQueryResultVoice();
      InlineQueryResultVoice inlineQueryResultVoice1 = inlineQueryResultVoice0.setTitle("voice");
      String string0 = inlineQueryResultVoice1.getTitle();
      assertEquals("voice", string0);
  }
}
