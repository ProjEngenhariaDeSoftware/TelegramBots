/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 26 13:25:41 GMT 2018
 */

package org.telegram.telegrambots.meta.api.objects.stickers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.telegram.telegrambots.meta.api.objects.stickers.MaskPosition;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MaskPosition_ESTest extends MaskPosition_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MaskPosition maskPosition0 = new MaskPosition();
      Float float0 = new Float(553.8696825418044);
      maskPosition0.setyShift(float0);
      Float float1 = maskPosition0.getyShift();
      assertEquals(553.8697F, (float)float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MaskPosition maskPosition0 = new MaskPosition();
      Float float0 = new Float(0.0);
      maskPosition0.setyShift(float0);
      Float float1 = maskPosition0.getyShift();
      assertEquals(0.0F, (float)float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MaskPosition maskPosition0 = new MaskPosition();
      Float float0 = new Float((-1671.4127655852));
      maskPosition0.setyShift(float0);
      Float float1 = maskPosition0.getyShift();
      assertEquals((-1671.4127F), (float)float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MaskPosition maskPosition0 = new MaskPosition();
      Float float0 = new Float((-3344.0F));
      maskPosition0.setyShift(float0);
      Float float1 = maskPosition0.getyShift();
      assertEquals((-3344.0F), (float)float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MaskPosition maskPosition0 = new MaskPosition();
      Float float0 = new Float(0.0F);
      maskPosition0.setxShift(float0);
      Float float1 = maskPosition0.getxShift();
      assertEquals(0.0F, (float)float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MaskPosition maskPosition0 = new MaskPosition();
      Float float0 = new Float((-2519.0906F));
      maskPosition0.setxShift(float0);
      Float float1 = maskPosition0.getxShift();
      assertEquals((-2519.0906F), (float)float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MaskPosition maskPosition0 = new MaskPosition();
      Float float0 = new Float(1527.4);
      maskPosition0.setxShift(float0);
      Float float1 = maskPosition0.getxShift();
      assertEquals(1527.4F, (float)float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MaskPosition maskPosition0 = new MaskPosition();
      Float float0 = new Float(0.0);
      maskPosition0.setScale(float0);
      Float float1 = maskPosition0.getScale();
      assertEquals(0.0F, (float)float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MaskPosition maskPosition0 = new MaskPosition();
      Float float0 = new Float(1108.0F);
      maskPosition0.setScale(float0);
      Float float1 = maskPosition0.getScale();
      assertEquals(1108.0F, (float)float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MaskPosition maskPosition0 = new MaskPosition();
      maskPosition0.setPoint("V^+");
      String string0 = maskPosition0.getPoint();
      assertEquals("V^+", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MaskPosition maskPosition0 = new MaskPosition();
      maskPosition0.setPoint("");
      String string0 = maskPosition0.getPoint();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MaskPosition maskPosition0 = new MaskPosition();
      maskPosition0.setPoint("/w*`");
      Float float0 = new Float((-1.0F));
      maskPosition0.setyShift(float0);
      maskPosition0.setScale(float0);
      maskPosition0.setxShift(float0);
      maskPosition0.validate();
      assertEquals((-1.0F), maskPosition0.getScale(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MaskPosition maskPosition0 = new MaskPosition();
      maskPosition0.setPoint("/w*`");
      Float float0 = new Float((-1.0F));
      maskPosition0.setyShift(float0);
      maskPosition0.setxShift(float0);
      try { 
        maskPosition0.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // scale can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.objects.stickers.MaskPosition", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MaskPosition maskPosition0 = new MaskPosition();
      maskPosition0.setPoint("");
      try { 
        maskPosition0.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // point can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.objects.stickers.MaskPosition", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MaskPosition maskPosition0 = new MaskPosition();
      try { 
        maskPosition0.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // point can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.objects.stickers.MaskPosition", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MaskPosition maskPosition0 = new MaskPosition();
      Float float0 = new Float(0.0);
      maskPosition0.setxShift(float0);
      maskPosition0.setPoint("MaskPosition{point='null', xShift=null, yShift=null, scale=null}");
      try { 
        maskPosition0.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // yShift can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.objects.stickers.MaskPosition", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MaskPosition maskPosition0 = new MaskPosition();
      Float float0 = new Float((-1.0F));
      maskPosition0.setScale(float0);
      Float float1 = maskPosition0.getScale();
      assertEquals((-1.0F), (float)float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MaskPosition maskPosition0 = new MaskPosition();
      Float float0 = maskPosition0.getyShift();
      assertNull(float0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MaskPosition maskPosition0 = new MaskPosition();
      String string0 = maskPosition0.getPoint();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MaskPosition maskPosition0 = new MaskPosition();
      Float float0 = maskPosition0.getxShift();
      assertNull(float0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MaskPosition maskPosition0 = new MaskPosition();
      maskPosition0.setPoint("MaskPosition{point='null', xShift=null, yShift=null, scale=null}");
      try { 
        maskPosition0.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // xShift can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.objects.stickers.MaskPosition", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MaskPosition maskPosition0 = new MaskPosition();
      String string0 = maskPosition0.toString();
      assertEquals("MaskPosition{point='null', xShift=null, yShift=null, scale=null}", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MaskPosition maskPosition0 = new MaskPosition();
      Float float0 = maskPosition0.getScale();
      assertNull(float0);
  }
}
