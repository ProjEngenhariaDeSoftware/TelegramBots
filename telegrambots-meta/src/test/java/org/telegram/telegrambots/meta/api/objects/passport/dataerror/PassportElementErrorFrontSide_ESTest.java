/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 26 13:18:34 GMT 2018
 */

package org.telegram.telegrambots.meta.api.objects.passport.dataerror;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.telegram.telegrambots.meta.api.objects.passport.dataerror.PassportElementErrorFrontSide;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PassportElementErrorFrontSide_ESTest extends PassportElementErrorFrontSide_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PassportElementErrorFrontSide passportElementErrorFrontSide0 = new PassportElementErrorFrontSide();
      String string0 = passportElementErrorFrontSide0.getType();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PassportElementErrorFrontSide passportElementErrorFrontSide0 = new PassportElementErrorFrontSide("442)3h&", "442)3h&", "442)3h&");
      String string0 = passportElementErrorFrontSide0.getType();
      assertEquals("442)3h&", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PassportElementErrorFrontSide passportElementErrorFrontSide0 = new PassportElementErrorFrontSide();
      String string0 = passportElementErrorFrontSide0.getMessage();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PassportElementErrorFrontSide passportElementErrorFrontSide0 = new PassportElementErrorFrontSide("442)3h&", "442)3h&", "442)3h&");
      String string0 = passportElementErrorFrontSide0.getMessage();
      assertEquals("442)3h&", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PassportElementErrorFrontSide passportElementErrorFrontSide0 = new PassportElementErrorFrontSide();
      String string0 = passportElementErrorFrontSide0.getFileHash();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PassportElementErrorFrontSide passportElementErrorFrontSide0 = new PassportElementErrorFrontSide();
      PassportElementErrorFrontSide passportElementErrorFrontSide1 = passportElementErrorFrontSide0.setFileHash("vcGq rtM$3");
      String string0 = passportElementErrorFrontSide1.getFileHash();
      assertEquals("vcGq rtM$3", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PassportElementErrorFrontSide passportElementErrorFrontSide0 = new PassportElementErrorFrontSide();
      // Undeclared exception!
      try { 
        passportElementErrorFrontSide0.setType((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PassportElementErrorFrontSide passportElementErrorFrontSide0 = new PassportElementErrorFrontSide("READ_ONLY", "gW-zO$dE+3A", "gW-zO$dE+3A");
      // Undeclared exception!
      try { 
        passportElementErrorFrontSide0.setMessage((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PassportElementErrorFrontSide passportElementErrorFrontSide0 = null;
      try {
        passportElementErrorFrontSide0 = new PassportElementErrorFrontSide("", "", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PassportElementErrorFrontSide passportElementErrorFrontSide0 = new PassportElementErrorFrontSide("READ_ONLY", "gW-zO$dE+3A", "gW-zO$dE+3A");
      passportElementErrorFrontSide0.validate();
      assertEquals("gW-zO$dE+3A", passportElementErrorFrontSide0.getMessage());
      assertEquals("READ_ONLY", passportElementErrorFrontSide0.getType());
      assertEquals("gW-zO$dE+3A", passportElementErrorFrontSide0.getFileHash());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PassportElementErrorFrontSide passportElementErrorFrontSide0 = new PassportElementErrorFrontSide();
      passportElementErrorFrontSide0.setFileHash("vcGq rtM$3");
      PassportElementErrorFrontSide passportElementErrorFrontSide1 = passportElementErrorFrontSide0.setType("");
      passportElementErrorFrontSide1.setMessage("vcGq rtM$3");
      try { 
        passportElementErrorFrontSide1.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Type parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.objects.passport.dataerror.PassportElementErrorFrontSide", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PassportElementErrorFrontSide passportElementErrorFrontSide0 = new PassportElementErrorFrontSide(";P; i=wIj", ";P; i=wIj", ";P; i=wIj");
      passportElementErrorFrontSide0.setMessage("");
      try { 
        passportElementErrorFrontSide0.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Message parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.objects.passport.dataerror.PassportElementErrorFrontSide", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PassportElementErrorFrontSide passportElementErrorFrontSide0 = new PassportElementErrorFrontSide();
      PassportElementErrorFrontSide passportElementErrorFrontSide1 = passportElementErrorFrontSide0.setFileHash("vcGq rtM$3");
      passportElementErrorFrontSide1.setMessage("vcGq rtM$3");
      try { 
        passportElementErrorFrontSide0.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Type parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.objects.passport.dataerror.PassportElementErrorFrontSide", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PassportElementErrorFrontSide passportElementErrorFrontSide0 = new PassportElementErrorFrontSide("", "", "");
      try { 
        passportElementErrorFrontSide0.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File hash parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.objects.passport.dataerror.PassportElementErrorFrontSide", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PassportElementErrorFrontSide passportElementErrorFrontSide0 = new PassportElementErrorFrontSide();
      try { 
        passportElementErrorFrontSide0.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File hash parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.objects.passport.dataerror.PassportElementErrorFrontSide", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PassportElementErrorFrontSide passportElementErrorFrontSide0 = new PassportElementErrorFrontSide("", "", "");
      String string0 = passportElementErrorFrontSide0.getMessage();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PassportElementErrorFrontSide passportElementErrorFrontSide0 = new PassportElementErrorFrontSide("", "", "");
      String string0 = passportElementErrorFrontSide0.getFileHash();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PassportElementErrorFrontSide passportElementErrorFrontSide0 = new PassportElementErrorFrontSide();
      String string0 = passportElementErrorFrontSide0.getSource();
      assertEquals("front_side", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PassportElementErrorFrontSide passportElementErrorFrontSide0 = new PassportElementErrorFrontSide("", "", "");
      String string0 = passportElementErrorFrontSide0.toString();
      assertEquals("PassportElementErrorFrontSide{source='front_side', type='', fileHash='', message=''}", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PassportElementErrorFrontSide passportElementErrorFrontSide0 = new PassportElementErrorFrontSide();
      passportElementErrorFrontSide0.setFileHash("vcGq rtM$3");
      try { 
        passportElementErrorFrontSide0.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Message parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.objects.passport.dataerror.PassportElementErrorFrontSide", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PassportElementErrorFrontSide passportElementErrorFrontSide0 = new PassportElementErrorFrontSide("", "", "");
      String string0 = passportElementErrorFrontSide0.getType();
      assertEquals("", string0);
  }
}
