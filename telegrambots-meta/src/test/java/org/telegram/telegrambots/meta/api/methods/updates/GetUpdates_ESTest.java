/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 26 13:42:54 GMT 2018
 */

package org.telegram.telegrambots.meta.api.methods.updates;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.telegram.telegrambots.meta.api.methods.updates.GetUpdates;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class GetUpdates_ESTest extends GetUpdates_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      GetUpdates getUpdates0 = new GetUpdates();
      // Undeclared exception!
      try { 
        getUpdates0.deserializeResponse("null");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.telegram.telegrambots.meta.api.methods.updates.GetUpdates", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      GetUpdates getUpdates0 = new GetUpdates();
      Integer integer0 = new Integer(1117);
      getUpdates0.setTimeout(integer0);
      Integer integer1 = getUpdates0.getTimeout();
      assertEquals(1117, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      GetUpdates getUpdates0 = new GetUpdates();
      Integer integer0 = new Integer(0);
      getUpdates0.setTimeout(integer0);
      Integer integer1 = getUpdates0.getTimeout();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      GetUpdates getUpdates0 = new GetUpdates();
      Integer integer0 = new Integer((-765));
      GetUpdates getUpdates1 = getUpdates0.setTimeout(integer0);
      Integer integer1 = getUpdates1.getTimeout();
      assertEquals((-765), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      GetUpdates getUpdates0 = new GetUpdates();
      Integer integer0 = new Integer((-1));
      GetUpdates getUpdates1 = getUpdates0.setTimeout(integer0);
      Integer integer1 = getUpdates1.getTimeout();
      assertEquals((-1), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      GetUpdates getUpdates0 = new GetUpdates();
      Integer integer0 = new Integer((-765));
      getUpdates0.setOffset(integer0);
      Integer integer1 = getUpdates0.getOffset();
      assertEquals((-765), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      GetUpdates getUpdates0 = new GetUpdates();
      Integer integer0 = new Integer(1000);
      getUpdates0.setOffset(integer0);
      Integer integer1 = getUpdates0.getOffset();
      assertEquals(1000, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      GetUpdates getUpdates0 = new GetUpdates();
      Integer integer0 = new Integer(0);
      GetUpdates getUpdates1 = getUpdates0.setLimit(integer0);
      Integer integer1 = getUpdates1.getLimit();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      GetUpdates getUpdates0 = new GetUpdates();
      Integer integer0 = new Integer(4427);
      getUpdates0.setLimit(integer0);
      Integer integer1 = getUpdates0.getLimit();
      assertEquals(4427, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      GetUpdates getUpdates0 = new GetUpdates();
      Integer integer0 = new Integer((-1046));
      getUpdates0.setLimit(integer0);
      Integer integer1 = getUpdates0.getLimit();
      assertEquals((-1046), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      GetUpdates getUpdates0 = new GetUpdates();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      getUpdates0.setAllowedUpdates(arrayList0);
      List<String> list0 = getUpdates0.getAllowedUpdates();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      GetUpdates getUpdates0 = new GetUpdates();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add(") out of range of int");
      GetUpdates getUpdates1 = getUpdates0.setAllowedUpdates(arrayList0);
      List<String> list0 = getUpdates1.getAllowedUpdates();
      assertTrue(list0.contains(") out of range of int"));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      GetUpdates getUpdates0 = new GetUpdates();
      try { 
        getUpdates0.deserializeResponse("getupdates");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unable to deserialize response
         //
         verifyException("org.telegram.telegrambots.meta.api.methods.updates.GetUpdates", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      GetUpdates getUpdates0 = new GetUpdates();
      Integer integer0 = getUpdates0.getLimit();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      GetUpdates getUpdates0 = new GetUpdates();
      Integer integer0 = getUpdates0.getTimeout();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      GetUpdates getUpdates0 = new GetUpdates();
      String string0 = getUpdates0.toString();
      assertEquals("GetUpdates{offset=null, limit=null, timeout=null, allowedUpdates=null}", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      GetUpdates getUpdates0 = new GetUpdates();
      getUpdates0.validate();
      assertEquals("getupdates", getUpdates0.getMethod());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      GetUpdates getUpdates0 = new GetUpdates();
      Integer integer0 = new Integer(0);
      GetUpdates getUpdates1 = getUpdates0.setOffset(integer0);
      Integer integer1 = getUpdates1.getOffset();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      GetUpdates getUpdates0 = new GetUpdates();
      List<String> list0 = getUpdates0.getAllowedUpdates();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      GetUpdates getUpdates0 = new GetUpdates();
      Integer integer0 = getUpdates0.getOffset();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      GetUpdates getUpdates0 = new GetUpdates();
      String string0 = getUpdates0.getMethod();
      assertEquals("getupdates", string0);
  }
}
