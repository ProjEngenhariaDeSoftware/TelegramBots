/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 26 13:05:35 GMT 2018
 */

package org.telegram.telegrambots.meta.api.objects.replykeyboard;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ReplyKeyboardMarkup_ESTest extends ReplyKeyboardMarkup_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ReplyKeyboardMarkup replyKeyboardMarkup0 = new ReplyKeyboardMarkup();
      LinkedList<KeyboardRow> linkedList0 = new LinkedList<KeyboardRow>();
      KeyboardRow keyboardRow0 = new KeyboardRow();
      linkedList0.add(keyboardRow0);
      ReplyKeyboardMarkup replyKeyboardMarkup1 = replyKeyboardMarkup0.setKeyboard(linkedList0);
      replyKeyboardMarkup1.validate();
      assertNull(replyKeyboardMarkup1.getResizeKeyboard());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ReplyKeyboardMarkup replyKeyboardMarkup0 = new ReplyKeyboardMarkup();
      Boolean boolean0 = Boolean.TRUE;
      ReplyKeyboardMarkup replyKeyboardMarkup1 = replyKeyboardMarkup0.setSelective(boolean0);
      Boolean boolean1 = replyKeyboardMarkup1.getSelective();
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ReplyKeyboardMarkup replyKeyboardMarkup0 = new ReplyKeyboardMarkup();
      Boolean boolean0 = new Boolean(false);
      replyKeyboardMarkup0.setSelective(boolean0);
      Boolean boolean1 = replyKeyboardMarkup0.getSelective();
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ReplyKeyboardMarkup replyKeyboardMarkup0 = new ReplyKeyboardMarkup();
      Boolean boolean0 = new Boolean(true);
      ReplyKeyboardMarkup replyKeyboardMarkup1 = replyKeyboardMarkup0.setResizeKeyboard(boolean0);
      Boolean boolean1 = replyKeyboardMarkup1.getResizeKeyboard();
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ReplyKeyboardMarkup replyKeyboardMarkup0 = new ReplyKeyboardMarkup();
      Boolean boolean0 = Boolean.FALSE;
      replyKeyboardMarkup0.setResizeKeyboard(boolean0);
      Boolean boolean1 = replyKeyboardMarkup0.getResizeKeyboard();
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ReplyKeyboardMarkup replyKeyboardMarkup0 = new ReplyKeyboardMarkup();
      Boolean boolean0 = Boolean.FALSE;
      ReplyKeyboardMarkup replyKeyboardMarkup1 = replyKeyboardMarkup0.setOneTimeKeyboard(boolean0);
      Boolean boolean1 = replyKeyboardMarkup1.getOneTimeKeyboard();
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ReplyKeyboardMarkup replyKeyboardMarkup0 = new ReplyKeyboardMarkup();
      replyKeyboardMarkup0.setKeyboard((List<KeyboardRow>) null);
      List<KeyboardRow> list0 = replyKeyboardMarkup0.getKeyboard();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ReplyKeyboardMarkup replyKeyboardMarkup0 = new ReplyKeyboardMarkup();
      LinkedList<KeyboardRow> linkedList0 = new LinkedList<KeyboardRow>();
      ReplyKeyboardMarkup replyKeyboardMarkup1 = replyKeyboardMarkup0.setKeyboard(linkedList0);
      KeyboardRow keyboardRow0 = new KeyboardRow();
      linkedList0.offerLast(keyboardRow0);
      List<KeyboardRow> list0 = replyKeyboardMarkup1.getKeyboard();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ReplyKeyboardMarkup replyKeyboardMarkup0 = new ReplyKeyboardMarkup();
      Boolean boolean0 = Boolean.TRUE;
      replyKeyboardMarkup0.setResizeKeyboard(boolean0);
      ReplyKeyboardMarkup replyKeyboardMarkup1 = new ReplyKeyboardMarkup();
      boolean boolean1 = replyKeyboardMarkup0.equals(replyKeyboardMarkup1);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ReplyKeyboardMarkup replyKeyboardMarkup0 = new ReplyKeyboardMarkup();
      Boolean boolean0 = Boolean.TRUE;
      ReplyKeyboardMarkup replyKeyboardMarkup1 = new ReplyKeyboardMarkup();
      assertTrue(replyKeyboardMarkup1.equals((Object)replyKeyboardMarkup0));
      
      replyKeyboardMarkup1.setOneTimeKeyboard(boolean0);
      boolean boolean1 = replyKeyboardMarkup1.equals(replyKeyboardMarkup0);
      assertFalse(replyKeyboardMarkup1.equals((Object)replyKeyboardMarkup0));
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ReplyKeyboardMarkup replyKeyboardMarkup0 = new ReplyKeyboardMarkup();
      ReplyKeyboardMarkup replyKeyboardMarkup1 = replyKeyboardMarkup0.setKeyboard((List<KeyboardRow>) null);
      ReplyKeyboardMarkup replyKeyboardMarkup2 = new ReplyKeyboardMarkup();
      boolean boolean0 = replyKeyboardMarkup1.equals(replyKeyboardMarkup2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ReplyKeyboardMarkup replyKeyboardMarkup0 = new ReplyKeyboardMarkup();
      ReplyKeyboardMarkup replyKeyboardMarkup1 = new ReplyKeyboardMarkup();
      boolean boolean0 = replyKeyboardMarkup0.equals(replyKeyboardMarkup1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ReplyKeyboardMarkup replyKeyboardMarkup0 = new ReplyKeyboardMarkup();
      boolean boolean0 = replyKeyboardMarkup0.equals(replyKeyboardMarkup0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ReplyKeyboardMarkup replyKeyboardMarkup0 = new ReplyKeyboardMarkup();
      boolean boolean0 = replyKeyboardMarkup0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ReplyKeyboardMarkup replyKeyboardMarkup0 = new ReplyKeyboardMarkup();
      LinkedList<KeyboardRow> linkedList0 = new LinkedList<KeyboardRow>();
      linkedList0.offerLast((KeyboardRow) null);
      replyKeyboardMarkup0.setKeyboard(linkedList0);
      // Undeclared exception!
      try { 
        replyKeyboardMarkup0.validate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ReplyKeyboardMarkup replyKeyboardMarkup0 = new ReplyKeyboardMarkup();
      replyKeyboardMarkup0.setKeyboard((List<KeyboardRow>) null);
      try { 
        replyKeyboardMarkup0.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Keyboard parameter can't be null
         //
         verifyException("org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ReplyKeyboardMarkup replyKeyboardMarkup0 = new ReplyKeyboardMarkup();
      List<KeyboardRow> list0 = replyKeyboardMarkup0.getKeyboard();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ReplyKeyboardMarkup replyKeyboardMarkup0 = new ReplyKeyboardMarkup();
      replyKeyboardMarkup0.hashCode();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ReplyKeyboardMarkup replyKeyboardMarkup0 = new ReplyKeyboardMarkup();
      Boolean boolean0 = replyKeyboardMarkup0.getOneTimeKeyboard();
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ReplyKeyboardMarkup replyKeyboardMarkup0 = new ReplyKeyboardMarkup();
      Boolean boolean0 = Boolean.FALSE;
      ReplyKeyboardMarkup replyKeyboardMarkup1 = replyKeyboardMarkup0.setSelective(boolean0);
      ReplyKeyboardMarkup replyKeyboardMarkup2 = new ReplyKeyboardMarkup();
      boolean boolean1 = replyKeyboardMarkup1.equals(replyKeyboardMarkup2);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ReplyKeyboardMarkup replyKeyboardMarkup0 = new ReplyKeyboardMarkup();
      Boolean boolean0 = Boolean.valueOf(true);
      replyKeyboardMarkup0.setOneTimeKeyboard(boolean0);
      Boolean boolean1 = replyKeyboardMarkup0.getOneTimeKeyboard();
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ReplyKeyboardMarkup replyKeyboardMarkup0 = new ReplyKeyboardMarkup();
      Boolean boolean0 = replyKeyboardMarkup0.getSelective();
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ReplyKeyboardMarkup replyKeyboardMarkup0 = new ReplyKeyboardMarkup();
      Boolean boolean0 = replyKeyboardMarkup0.getResizeKeyboard();
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ReplyKeyboardMarkup replyKeyboardMarkup0 = new ReplyKeyboardMarkup();
      String string0 = replyKeyboardMarkup0.toString();
      assertEquals("ReplyKeyboardMarkup{keyboard=[], resizeKeyboard=null, oneTimeKeyboard=null, selective=null}", string0);
  }
}
