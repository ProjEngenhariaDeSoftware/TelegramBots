/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 26 13:04:09 GMT 2018
 */

package org.telegram.telegrambots.meta.api.objects.inlinequery.result;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.telegram.telegrambots.meta.api.objects.inlinequery.inputmessagecontent.InputMessageContent;
import org.telegram.telegrambots.meta.api.objects.inlinequery.inputmessagecontent.InputTextMessageContent;
import org.telegram.telegrambots.meta.api.objects.inlinequery.result.InlineQueryResultContact;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class InlineQueryResultContact_ESTest extends InlineQueryResultContact_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      InlineQueryResultContact inlineQueryResultContact0 = new InlineQueryResultContact();
      inlineQueryResultContact0.setvCard(">};T/9;l*piXI>#81x1");
      String string0 = inlineQueryResultContact0.getvCard();
      assertEquals(">};T/9;l*piXI>#81x1", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      InlineQueryResultContact inlineQueryResultContact0 = new InlineQueryResultContact();
      inlineQueryResultContact0.setvCard("");
      String string0 = inlineQueryResultContact0.getvCard();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      InlineQueryResultContact inlineQueryResultContact0 = new InlineQueryResultContact();
      Integer integer0 = new Integer(0);
      inlineQueryResultContact0.setThumbWidth(integer0);
      Integer integer1 = inlineQueryResultContact0.getThumbWidth();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      InlineQueryResultContact inlineQueryResultContact0 = new InlineQueryResultContact();
      Integer integer0 = new Integer(1);
      inlineQueryResultContact0.setThumbWidth(integer0);
      Integer integer1 = inlineQueryResultContact0.getThumbWidth();
      assertEquals(1, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      InlineQueryResultContact inlineQueryResultContact0 = new InlineQueryResultContact();
      Integer integer0 = new Integer((-1328));
      InlineQueryResultContact inlineQueryResultContact1 = inlineQueryResultContact0.setThumbWidth(integer0);
      Integer integer1 = inlineQueryResultContact1.getThumbWidth();
      assertEquals((-1328), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      InlineQueryResultContact inlineQueryResultContact0 = new InlineQueryResultContact();
      inlineQueryResultContact0.setThumbUrl("contact");
      String string0 = inlineQueryResultContact0.getThumbUrl();
      assertEquals("contact", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      InlineQueryResultContact inlineQueryResultContact0 = new InlineQueryResultContact();
      inlineQueryResultContact0.setThumbUrl("");
      String string0 = inlineQueryResultContact0.getThumbUrl();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      InlineQueryResultContact inlineQueryResultContact0 = new InlineQueryResultContact();
      Integer integer0 = new Integer(0);
      InlineQueryResultContact inlineQueryResultContact1 = inlineQueryResultContact0.setThumbHeight(integer0);
      Integer integer1 = inlineQueryResultContact1.getThumbHeight();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      InlineQueryResultContact inlineQueryResultContact0 = new InlineQueryResultContact();
      Integer integer0 = new Integer((-965));
      inlineQueryResultContact0.setThumbHeight(integer0);
      Integer integer1 = inlineQueryResultContact0.getThumbHeight();
      assertEquals((-965), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      InlineQueryResultContact inlineQueryResultContact0 = new InlineQueryResultContact();
      Integer integer0 = new Integer(4296);
      inlineQueryResultContact0.setThumbHeight(integer0);
      Integer integer1 = inlineQueryResultContact0.getThumbHeight();
      assertEquals(4296, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      InlineQueryResultContact inlineQueryResultContact0 = new InlineQueryResultContact();
      InlineQueryResultContact inlineQueryResultContact1 = inlineQueryResultContact0.setPhoneNumber("7");
      String string0 = inlineQueryResultContact1.getPhoneNumber();
      assertEquals("7", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      InlineQueryResultContact inlineQueryResultContact0 = new InlineQueryResultContact();
      inlineQueryResultContact0.setPhoneNumber("");
      String string0 = inlineQueryResultContact0.getPhoneNumber();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      InlineQueryResultContact inlineQueryResultContact0 = new InlineQueryResultContact();
      inlineQueryResultContact0.setLastName("5l!jhS7TZAIsk");
      String string0 = inlineQueryResultContact0.getLastName();
      assertEquals("5l!jhS7TZAIsk", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      InlineQueryResultContact inlineQueryResultContact0 = new InlineQueryResultContact();
      inlineQueryResultContact0.setId("w&eb");
      String string0 = inlineQueryResultContact0.getId();
      assertEquals("w&eb", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      InlineQueryResultContact inlineQueryResultContact0 = new InlineQueryResultContact();
      InlineQueryResultContact inlineQueryResultContact1 = inlineQueryResultContact0.setId("");
      String string0 = inlineQueryResultContact1.getId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      InlineQueryResultContact inlineQueryResultContact0 = new InlineQueryResultContact();
      inlineQueryResultContact0.setFirstName("");
      String string0 = inlineQueryResultContact0.getFirstName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      InlineQueryResultContact inlineQueryResultContact0 = new InlineQueryResultContact();
      InlineQueryResultContact inlineQueryResultContact1 = inlineQueryResultContact0.setPhoneNumber("`2y7^^U@[nL>GKs#O'h");
      InlineQueryResultContact inlineQueryResultContact2 = inlineQueryResultContact0.setFirstName("`2y7^^U@[nL>GKs#O'h");
      inlineQueryResultContact2.setId("`2y7^^U@[nL>GKs#O'h");
      InlineKeyboardMarkup inlineKeyboardMarkup0 = new InlineKeyboardMarkup();
      inlineQueryResultContact0.setReplyMarkup(inlineKeyboardMarkup0);
      inlineQueryResultContact1.validate();
      assertEquals("`2y7^^U@[nL>GKs#O'h", inlineQueryResultContact1.getId());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      InlineQueryResultContact inlineQueryResultContact0 = new InlineQueryResultContact();
      InlineQueryResultContact inlineQueryResultContact1 = inlineQueryResultContact0.setPhoneNumber("`2y7^^U@[nL>GKs#O'h");
      inlineQueryResultContact0.setFirstName("`2y7^^U@[nL>GKs#O'h");
      InlineQueryResultContact inlineQueryResultContact2 = inlineQueryResultContact0.setId("`2y7^^U@[nL>GKs#O'h");
      InputTextMessageContent inputTextMessageContent0 = new InputTextMessageContent();
      inlineQueryResultContact2.setInputMessageContent(inputTextMessageContent0);
      try { 
        inlineQueryResultContact1.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // MessageText parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.objects.inlinequery.inputmessagecontent.InputTextMessageContent", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      InlineQueryResultContact inlineQueryResultContact0 = new InlineQueryResultContact();
      InlineQueryResultContact inlineQueryResultContact1 = inlineQueryResultContact0.setId("B");
      InlineQueryResultContact inlineQueryResultContact2 = inlineQueryResultContact1.setPhoneNumber("B");
      inlineQueryResultContact2.setFirstName("");
      try { 
        inlineQueryResultContact1.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // FirstName parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.objects.inlinequery.result.InlineQueryResultContact", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      InlineQueryResultContact inlineQueryResultContact0 = new InlineQueryResultContact();
      InlineQueryResultContact inlineQueryResultContact1 = inlineQueryResultContact0.setPhoneNumber("`2y7^^U@[nL>GKs#O'h");
      inlineQueryResultContact0.setFirstName("`2y7^^U@[nL>GKs#O'h");
      InlineQueryResultContact inlineQueryResultContact2 = inlineQueryResultContact0.setId("`2y7^^U@[nL>GKs#O'h");
      inlineQueryResultContact1.validate();
      assertSame(inlineQueryResultContact1, inlineQueryResultContact2);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      InlineQueryResultContact inlineQueryResultContact0 = new InlineQueryResultContact();
      InlineQueryResultContact inlineQueryResultContact1 = inlineQueryResultContact0.setPhoneNumber("`2y7^^U@[nL>GKs#O'h");
      inlineQueryResultContact1.setId("`2y7^^U@[nL>GKs#O'h");
      try { 
        inlineQueryResultContact1.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // FirstName parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.objects.inlinequery.result.InlineQueryResultContact", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      InlineQueryResultContact inlineQueryResultContact0 = new InlineQueryResultContact();
      InlineQueryResultContact inlineQueryResultContact1 = inlineQueryResultContact0.setId("");
      try { 
        inlineQueryResultContact1.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // ID parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.objects.inlinequery.result.InlineQueryResultContact", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      InlineQueryResultContact inlineQueryResultContact0 = new InlineQueryResultContact();
      inlineQueryResultContact0.setId("`2y7^^U@[nL>GKs#O'h");
      try { 
        inlineQueryResultContact0.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // PhoneNumber parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.objects.inlinequery.result.InlineQueryResultContact", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      InlineQueryResultContact inlineQueryResultContact0 = new InlineQueryResultContact();
      try { 
        inlineQueryResultContact0.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // ID parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.objects.inlinequery.result.InlineQueryResultContact", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      InlineQueryResultContact inlineQueryResultContact0 = new InlineQueryResultContact();
      InputTextMessageContent inputTextMessageContent0 = new InputTextMessageContent();
      inlineQueryResultContact0.setInputMessageContent(inputTextMessageContent0);
      InputTextMessageContent inputTextMessageContent1 = (InputTextMessageContent)inlineQueryResultContact0.getInputMessageContent();
      assertNull(inputTextMessageContent1.getDisableWebPagePreview());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      InlineQueryResultContact inlineQueryResultContact0 = new InlineQueryResultContact();
      String string0 = inlineQueryResultContact0.getFirstName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      InlineQueryResultContact inlineQueryResultContact0 = new InlineQueryResultContact();
      String string0 = inlineQueryResultContact0.getThumbUrl();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      InlineQueryResultContact inlineQueryResultContact0 = new InlineQueryResultContact();
      InputMessageContent inputMessageContent0 = inlineQueryResultContact0.getInputMessageContent();
      assertNull(inputMessageContent0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      InlineQueryResultContact inlineQueryResultContact0 = new InlineQueryResultContact();
      String string0 = inlineQueryResultContact0.getLastName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      InlineQueryResultContact inlineQueryResultContact0 = new InlineQueryResultContact();
      String string0 = inlineQueryResultContact0.getId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      InlineQueryResultContact inlineQueryResultContact0 = new InlineQueryResultContact();
      String string0 = inlineQueryResultContact0.toString();
      assertEquals("InlineQueryResultContact{type='contact', id='null', phoneNumber='null', firstName='null', lastName='null', replyMarkup=null, inputMessageContent=null, thumbUrl='null', thumbWidth=null, thumbHeight=null, vCard='null'}", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      InlineQueryResultContact inlineQueryResultContact0 = new InlineQueryResultContact();
      String string0 = inlineQueryResultContact0.getPhoneNumber();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      InlineQueryResultContact inlineQueryResultContact0 = new InlineQueryResultContact();
      Integer integer0 = inlineQueryResultContact0.getThumbHeight();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      InlineQueryResultContact inlineQueryResultContact0 = new InlineQueryResultContact();
      inlineQueryResultContact0.setFirstName("`2y7^^U@[nL>GKs#O'h");
      String string0 = inlineQueryResultContact0.getFirstName();
      assertEquals("`2y7^^U@[nL>GKs#O'h", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      InlineQueryResultContact inlineQueryResultContact0 = new InlineQueryResultContact();
      InlineQueryResultContact inlineQueryResultContact1 = inlineQueryResultContact0.setPhoneNumber("");
      inlineQueryResultContact1.setId("phone_number");
      try { 
        inlineQueryResultContact1.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // PhoneNumber parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.objects.inlinequery.result.InlineQueryResultContact", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      InlineQueryResultContact inlineQueryResultContact0 = new InlineQueryResultContact();
      InlineKeyboardMarkup inlineKeyboardMarkup0 = inlineQueryResultContact0.getReplyMarkup();
      assertNull(inlineKeyboardMarkup0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      InlineQueryResultContact inlineQueryResultContact0 = new InlineQueryResultContact();
      InlineKeyboardMarkup inlineKeyboardMarkup0 = new InlineKeyboardMarkup();
      inlineQueryResultContact0.setReplyMarkup(inlineKeyboardMarkup0);
      InlineKeyboardMarkup inlineKeyboardMarkup1 = inlineQueryResultContact0.getReplyMarkup();
      assertSame(inlineKeyboardMarkup1, inlineKeyboardMarkup0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      InlineQueryResultContact inlineQueryResultContact0 = new InlineQueryResultContact();
      inlineQueryResultContact0.setLastName("");
      String string0 = inlineQueryResultContact0.getLastName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      InlineQueryResultContact inlineQueryResultContact0 = new InlineQueryResultContact();
      Integer integer0 = inlineQueryResultContact0.getThumbWidth();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      InlineQueryResultContact inlineQueryResultContact0 = new InlineQueryResultContact();
      String string0 = inlineQueryResultContact0.getType();
      assertEquals("contact", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      InlineQueryResultContact inlineQueryResultContact0 = new InlineQueryResultContact();
      String string0 = inlineQueryResultContact0.getvCard();
      assertNull(string0);
  }
}
