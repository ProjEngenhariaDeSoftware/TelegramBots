/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 26 13:17:12 GMT 2018
 */

package org.telegram.telegrambots.meta.api.objects.inlinequery.result;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.telegram.telegrambots.meta.api.objects.inlinequery.inputmessagecontent.InputMessageContent;
import org.telegram.telegrambots.meta.api.objects.inlinequery.inputmessagecontent.InputTextMessageContent;
import org.telegram.telegrambots.meta.api.objects.inlinequery.result.InlineQueryResultPhoto;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class InlineQueryResultPhoto_ESTest extends InlineQueryResultPhoto_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      InlineQueryResultPhoto inlineQueryResultPhoto0 = new InlineQueryResultPhoto();
      inlineQueryResultPhoto0.setTitle(", photoWidth=");
      String string0 = inlineQueryResultPhoto0.getTitle();
      assertEquals(", photoWidth=", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      InlineQueryResultPhoto inlineQueryResultPhoto0 = new InlineQueryResultPhoto();
      inlineQueryResultPhoto0.setThumbUrl("=2mU@7>IrMIn{");
      String string0 = inlineQueryResultPhoto0.getThumbUrl();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      InlineQueryResultPhoto inlineQueryResultPhoto0 = new InlineQueryResultPhoto();
      inlineQueryResultPhoto0.setThumbUrl("");
      String string0 = inlineQueryResultPhoto0.getThumbUrl();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      InlineQueryResultPhoto inlineQueryResultPhoto0 = new InlineQueryResultPhoto();
      Integer integer0 = new Integer((-1885));
      inlineQueryResultPhoto0.setPhotoWidth(integer0);
      Integer integer1 = inlineQueryResultPhoto0.getPhotoWidth();
      assertEquals((-1885), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      InlineQueryResultPhoto inlineQueryResultPhoto0 = new InlineQueryResultPhoto();
      Integer integer0 = new Integer(0);
      inlineQueryResultPhoto0.setPhotoWidth(integer0);
      Integer integer1 = inlineQueryResultPhoto0.getPhotoWidth();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      InlineQueryResultPhoto inlineQueryResultPhoto0 = new InlineQueryResultPhoto();
      Integer integer0 = Integer.getInteger("", 7);
      InlineQueryResultPhoto inlineQueryResultPhoto1 = inlineQueryResultPhoto0.setPhotoWidth(integer0);
      Integer integer1 = inlineQueryResultPhoto1.getPhotoWidth();
      assertEquals(7, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      InlineQueryResultPhoto inlineQueryResultPhoto0 = new InlineQueryResultPhoto();
      inlineQueryResultPhoto0.setPhotoUrl("6Nqp7<5Wbb6|x,S'*\"5");
      String string0 = inlineQueryResultPhoto0.getPhotoUrl();
      assertEquals("6Nqp7<5Wbb6|x,S'*\"5", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      InlineQueryResultPhoto inlineQueryResultPhoto0 = new InlineQueryResultPhoto();
      inlineQueryResultPhoto0.setPhotoUrl("");
      String string0 = inlineQueryResultPhoto0.getPhotoUrl();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      InlineQueryResultPhoto inlineQueryResultPhoto0 = new InlineQueryResultPhoto();
      Integer integer0 = new Integer(2502);
      inlineQueryResultPhoto0.setPhotoHeight(integer0);
      Integer integer1 = inlineQueryResultPhoto0.getPhotoHeight();
      assertEquals(2502, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      InlineQueryResultPhoto inlineQueryResultPhoto0 = new InlineQueryResultPhoto();
      Integer integer0 = new Integer(0);
      InlineQueryResultPhoto inlineQueryResultPhoto1 = inlineQueryResultPhoto0.setPhotoHeight(integer0);
      Integer integer1 = inlineQueryResultPhoto1.getPhotoHeight();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      InlineQueryResultPhoto inlineQueryResultPhoto0 = new InlineQueryResultPhoto();
      Integer integer0 = new Integer((-3832));
      inlineQueryResultPhoto0.setPhotoHeight(integer0);
      Integer integer1 = inlineQueryResultPhoto0.getPhotoHeight();
      assertEquals((-3832), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      InlineQueryResultPhoto inlineQueryResultPhoto0 = new InlineQueryResultPhoto();
      inlineQueryResultPhoto0.setParseMode("zX^1<O)E2}Y]tK?");
      String string0 = inlineQueryResultPhoto0.getParseMode();
      assertEquals("zX^1<O)E2}Y]tK?", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      InlineQueryResultPhoto inlineQueryResultPhoto0 = new InlineQueryResultPhoto();
      inlineQueryResultPhoto0.setMimeType("0.z[/2\"dWb");
      String string0 = inlineQueryResultPhoto0.getMimeType();
      assertEquals("0.z[/2\"dWb", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      InlineQueryResultPhoto inlineQueryResultPhoto0 = new InlineQueryResultPhoto();
      inlineQueryResultPhoto0.setMimeType("");
      String string0 = inlineQueryResultPhoto0.getMimeType();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      InlineQueryResultPhoto inlineQueryResultPhoto0 = new InlineQueryResultPhoto();
      InputTextMessageContent inputTextMessageContent0 = new InputTextMessageContent();
      inlineQueryResultPhoto0.setInputMessageContent(inputTextMessageContent0);
      InputTextMessageContent inputTextMessageContent1 = (InputTextMessageContent)inlineQueryResultPhoto0.getInputMessageContent();
      assertNull(inputTextMessageContent1.getDisableWebPagePreview());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      InlineQueryResultPhoto inlineQueryResultPhoto0 = new InlineQueryResultPhoto();
      inlineQueryResultPhoto0.setId("");
      String string0 = inlineQueryResultPhoto0.getId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      InlineQueryResultPhoto inlineQueryResultPhoto0 = new InlineQueryResultPhoto();
      inlineQueryResultPhoto0.setId("");
      String string0 = inlineQueryResultPhoto0.getId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      InlineQueryResultPhoto inlineQueryResultPhoto0 = new InlineQueryResultPhoto();
      InlineQueryResultPhoto inlineQueryResultPhoto1 = inlineQueryResultPhoto0.setDescription(", photoWidth=");
      String string0 = inlineQueryResultPhoto1.getDescription();
      assertEquals(", photoWidth=", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      InlineQueryResultPhoto inlineQueryResultPhoto0 = new InlineQueryResultPhoto();
      inlineQueryResultPhoto0.setDescription("");
      String string0 = inlineQueryResultPhoto0.getDescription();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      InlineQueryResultPhoto inlineQueryResultPhoto0 = new InlineQueryResultPhoto();
      inlineQueryResultPhoto0.setCaption("]");
      String string0 = inlineQueryResultPhoto0.getCaption();
      assertEquals("]", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      InlineQueryResultPhoto inlineQueryResultPhoto0 = new InlineQueryResultPhoto();
      inlineQueryResultPhoto0.setPhotoUrl("{,UKE\">.6@y{THTH]k");
      InlineQueryResultPhoto inlineQueryResultPhoto1 = inlineQueryResultPhoto0.setId("InlineQueryResultPhoto{type='photo', id='null', photoUrl='null', mimeType='null', photoWidth=null, photoHeight=null, thumbUrl='null', title='null', description='null', caption='null', inputMessageContent=null, replyMarkup=null, parseMode='null'}");
      InlineKeyboardMarkup inlineKeyboardMarkup0 = new InlineKeyboardMarkup();
      inlineQueryResultPhoto0.setReplyMarkup(inlineKeyboardMarkup0);
      inlineQueryResultPhoto0.validate();
      assertSame(inlineQueryResultPhoto0, inlineQueryResultPhoto1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      InlineQueryResultPhoto inlineQueryResultPhoto0 = new InlineQueryResultPhoto();
      InlineQueryResultPhoto inlineQueryResultPhoto1 = inlineQueryResultPhoto0.setPhotoUrl("");
      InputTextMessageContent inputTextMessageContent0 = new InputTextMessageContent();
      inlineQueryResultPhoto0.setInputMessageContent(inputTextMessageContent0);
      inlineQueryResultPhoto0.setId("");
      try { 
        inlineQueryResultPhoto1.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // MessageText parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.objects.inlinequery.inputmessagecontent.InputTextMessageContent", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      InlineQueryResultPhoto inlineQueryResultPhoto0 = new InlineQueryResultPhoto();
      inlineQueryResultPhoto0.setId("rt~l");
      inlineQueryResultPhoto0.setPhotoUrl("");
      try { 
        inlineQueryResultPhoto0.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // PhotoUrl parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.objects.inlinequery.result.InlineQueryResultPhoto", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      InlineQueryResultPhoto inlineQueryResultPhoto0 = new InlineQueryResultPhoto();
      inlineQueryResultPhoto0.setPhotoUrl("{,UKE\">.6@y{THTH]k");
      inlineQueryResultPhoto0.setId("InlineQueryResultPhoto{type='photo', id='null', photoUrl='null', mimeType='null', photoWidth=null, photoHeight=null, thumbUrl='null', title='null', description='null', caption='null', inputMessageContent=null, replyMarkup=null, parseMode='null'}");
      inlineQueryResultPhoto0.validate();
      assertNull(inlineQueryResultPhoto0.getThumbUrl());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      InlineQueryResultPhoto inlineQueryResultPhoto0 = new InlineQueryResultPhoto();
      InlineQueryResultPhoto inlineQueryResultPhoto1 = inlineQueryResultPhoto0.setId("");
      try { 
        inlineQueryResultPhoto1.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // ID parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.objects.inlinequery.result.InlineQueryResultPhoto", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      InlineQueryResultPhoto inlineQueryResultPhoto0 = new InlineQueryResultPhoto();
      inlineQueryResultPhoto0.setId("InlineQueryResultPhoto{type='photo', id='null', photoUrl='null', mimeType='null', photoWidth=null, photoHeight=null, thumbUrl='null', title='null', description='null', caption='null', inputMessageContent=null, replyMarkup=null, parseMode='null'}");
      try { 
        inlineQueryResultPhoto0.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // PhotoUrl parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.objects.inlinequery.result.InlineQueryResultPhoto", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      InlineQueryResultPhoto inlineQueryResultPhoto0 = new InlineQueryResultPhoto();
      try { 
        inlineQueryResultPhoto0.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // ID parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.objects.inlinequery.result.InlineQueryResultPhoto", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      InlineQueryResultPhoto inlineQueryResultPhoto0 = new InlineQueryResultPhoto();
      InlineKeyboardMarkup inlineKeyboardMarkup0 = new InlineKeyboardMarkup();
      inlineQueryResultPhoto0.setReplyMarkup(inlineKeyboardMarkup0);
      InlineKeyboardMarkup inlineKeyboardMarkup1 = inlineQueryResultPhoto0.getReplyMarkup();
      assertSame(inlineKeyboardMarkup1, inlineKeyboardMarkup0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      InlineQueryResultPhoto inlineQueryResultPhoto0 = new InlineQueryResultPhoto();
      String string0 = inlineQueryResultPhoto0.getParseMode();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      InlineQueryResultPhoto inlineQueryResultPhoto0 = new InlineQueryResultPhoto();
      String string0 = inlineQueryResultPhoto0.getDescription();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      InlineQueryResultPhoto inlineQueryResultPhoto0 = new InlineQueryResultPhoto();
      String string0 = inlineQueryResultPhoto0.getId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      InlineQueryResultPhoto inlineQueryResultPhoto0 = new InlineQueryResultPhoto();
      inlineQueryResultPhoto0.setParseMode("");
      String string0 = inlineQueryResultPhoto0.getParseMode();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      InlineQueryResultPhoto inlineQueryResultPhoto0 = new InlineQueryResultPhoto();
      String string0 = inlineQueryResultPhoto0.getType();
      assertEquals("photo", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      InlineQueryResultPhoto inlineQueryResultPhoto0 = new InlineQueryResultPhoto();
      String string0 = inlineQueryResultPhoto0.getThumbUrl();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      InlineQueryResultPhoto inlineQueryResultPhoto0 = new InlineQueryResultPhoto();
      String string0 = inlineQueryResultPhoto0.getCaption();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      InlineQueryResultPhoto inlineQueryResultPhoto0 = new InlineQueryResultPhoto();
      String string0 = inlineQueryResultPhoto0.toString();
      assertEquals("InlineQueryResultPhoto{type='photo', id='null', photoUrl='null', mimeType='null', photoWidth=null, photoHeight=null, thumbUrl='null', title='null', description='null', caption='null', inputMessageContent=null, replyMarkup=null, parseMode='null'}", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      InlineQueryResultPhoto inlineQueryResultPhoto0 = new InlineQueryResultPhoto();
      inlineQueryResultPhoto0.setCaption("");
      String string0 = inlineQueryResultPhoto0.getCaption();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      InlineQueryResultPhoto inlineQueryResultPhoto0 = new InlineQueryResultPhoto();
      String string0 = inlineQueryResultPhoto0.getPhotoUrl();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      InlineQueryResultPhoto inlineQueryResultPhoto0 = new InlineQueryResultPhoto();
      String string0 = inlineQueryResultPhoto0.getTitle();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      InlineQueryResultPhoto inlineQueryResultPhoto0 = new InlineQueryResultPhoto();
      InlineKeyboardMarkup inlineKeyboardMarkup0 = inlineQueryResultPhoto0.getReplyMarkup();
      assertNull(inlineKeyboardMarkup0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      InlineQueryResultPhoto inlineQueryResultPhoto0 = new InlineQueryResultPhoto();
      Integer integer0 = inlineQueryResultPhoto0.getPhotoHeight();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      InlineQueryResultPhoto inlineQueryResultPhoto0 = new InlineQueryResultPhoto();
      inlineQueryResultPhoto0.setTitle("");
      String string0 = inlineQueryResultPhoto0.getTitle();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      InlineQueryResultPhoto inlineQueryResultPhoto0 = new InlineQueryResultPhoto();
      InputMessageContent inputMessageContent0 = inlineQueryResultPhoto0.getInputMessageContent();
      assertNull(inputMessageContent0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      InlineQueryResultPhoto inlineQueryResultPhoto0 = new InlineQueryResultPhoto();
      Integer integer0 = inlineQueryResultPhoto0.getPhotoWidth();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      InlineQueryResultPhoto inlineQueryResultPhoto0 = new InlineQueryResultPhoto();
      String string0 = inlineQueryResultPhoto0.getMimeType();
      assertNull(string0);
  }
}
