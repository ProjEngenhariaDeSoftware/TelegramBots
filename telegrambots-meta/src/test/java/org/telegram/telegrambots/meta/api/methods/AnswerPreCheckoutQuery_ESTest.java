/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 26 13:09:19 GMT 2018
 */

package org.telegram.telegrambots.meta.api.methods;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.telegram.telegrambots.meta.api.methods.AnswerPreCheckoutQuery;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AnswerPreCheckoutQuery_ESTest extends AnswerPreCheckoutQuery_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AnswerPreCheckoutQuery answerPreCheckoutQuery0 = new AnswerPreCheckoutQuery();
      try { 
        answerPreCheckoutQuery0.deserializeResponse("6");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unable to deserialize response
         //
         verifyException("org.telegram.telegrambots.meta.api.methods.AnswerPreCheckoutQuery", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AnswerPreCheckoutQuery answerPreCheckoutQuery0 = new AnswerPreCheckoutQuery();
      String string0 = answerPreCheckoutQuery0.getPreCheckoutQueryId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      AnswerPreCheckoutQuery answerPreCheckoutQuery0 = new AnswerPreCheckoutQuery("", boolean0);
      String string0 = answerPreCheckoutQuery0.getPreCheckoutQueryId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AnswerPreCheckoutQuery answerPreCheckoutQuery0 = new AnswerPreCheckoutQuery();
      Boolean boolean0 = answerPreCheckoutQuery0.getOk();
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      AnswerPreCheckoutQuery answerPreCheckoutQuery0 = new AnswerPreCheckoutQuery("Rv", boolean0);
      answerPreCheckoutQuery0.getOk();
      assertEquals("Rv", answerPreCheckoutQuery0.getPreCheckoutQueryId());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AnswerPreCheckoutQuery answerPreCheckoutQuery0 = new AnswerPreCheckoutQuery();
      AnswerPreCheckoutQuery answerPreCheckoutQuery1 = answerPreCheckoutQuery0.setErrorMessage("Current token (%s) not of boolean type");
      String string0 = answerPreCheckoutQuery1.getErrorMessage();
      assertEquals("Current token (%s) not of boolean type", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      AnswerPreCheckoutQuery answerPreCheckoutQuery0 = new AnswerPreCheckoutQuery("", boolean0);
      answerPreCheckoutQuery0.setErrorMessage("");
      String string0 = answerPreCheckoutQuery0.getErrorMessage();
      assertEquals("", answerPreCheckoutQuery0.getPreCheckoutQueryId());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AnswerPreCheckoutQuery answerPreCheckoutQuery0 = new AnswerPreCheckoutQuery();
      // Undeclared exception!
      try { 
        answerPreCheckoutQuery0.setPreCheckoutQueryId((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AnswerPreCheckoutQuery answerPreCheckoutQuery0 = new AnswerPreCheckoutQuery();
      // Undeclared exception!
      try { 
        answerPreCheckoutQuery0.setOk((Boolean) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AnswerPreCheckoutQuery answerPreCheckoutQuery0 = new AnswerPreCheckoutQuery();
      try { 
        answerPreCheckoutQuery0.deserializeResponse("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unable to deserialize response
         //
         verifyException("org.telegram.telegrambots.meta.api.methods.AnswerPreCheckoutQuery", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AnswerPreCheckoutQuery answerPreCheckoutQuery0 = null;
      try {
        answerPreCheckoutQuery0 = new AnswerPreCheckoutQuery("`RX`@:=a", (Boolean) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AnswerPreCheckoutQuery answerPreCheckoutQuery0 = new AnswerPreCheckoutQuery();
      answerPreCheckoutQuery0.setPreCheckoutQueryId("answerPreCheckoutQuery");
      AnswerPreCheckoutQuery answerPreCheckoutQuery1 = answerPreCheckoutQuery0.setErrorMessage("");
      Boolean boolean0 = Boolean.valueOf("answerPreCheckoutQuery");
      answerPreCheckoutQuery1.setOk(boolean0);
      try { 
        answerPreCheckoutQuery0.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // ErrorMessage can't be empty if not ok
         //
         verifyException("org.telegram.telegrambots.meta.api.methods.AnswerPreCheckoutQuery", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      AnswerPreCheckoutQuery answerPreCheckoutQuery0 = new AnswerPreCheckoutQuery("Rr4ChQckoutQueryId can't be empty", boolean0);
      AnswerPreCheckoutQuery answerPreCheckoutQuery1 = answerPreCheckoutQuery0.setErrorMessage("r");
      answerPreCheckoutQuery1.validate();
      assertEquals("r", answerPreCheckoutQuery1.getErrorMessage());
      assertEquals("Rr4ChQckoutQueryId can't be empty", answerPreCheckoutQuery1.getPreCheckoutQueryId());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Boolean boolean0 = new Boolean(true);
      AnswerPreCheckoutQuery answerPreCheckoutQuery0 = new AnswerPreCheckoutQuery("}/GK&00cz)", boolean0);
      answerPreCheckoutQuery0.validate();
      assertEquals("}/GK&00cz)", answerPreCheckoutQuery0.getPreCheckoutQueryId());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AnswerPreCheckoutQuery answerPreCheckoutQuery0 = new AnswerPreCheckoutQuery();
      AnswerPreCheckoutQuery answerPreCheckoutQuery1 = answerPreCheckoutQuery0.setPreCheckoutQueryId(";");
      try { 
        answerPreCheckoutQuery1.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Ok can't be null
         //
         verifyException("org.telegram.telegrambots.meta.api.methods.AnswerPreCheckoutQuery", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf("answerPreCheckoutQuery");
      AnswerPreCheckoutQuery answerPreCheckoutQuery0 = new AnswerPreCheckoutQuery("answerPreCheckoutQuery", boolean0);
      try { 
        answerPreCheckoutQuery0.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // ErrorMessage can't be empty if not ok
         //
         verifyException("org.telegram.telegrambots.meta.api.methods.AnswerPreCheckoutQuery", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AnswerPreCheckoutQuery answerPreCheckoutQuery0 = new AnswerPreCheckoutQuery();
      try { 
        answerPreCheckoutQuery0.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // PreCheckoutQueryId can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.methods.AnswerPreCheckoutQuery", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      AnswerPreCheckoutQuery answerPreCheckoutQuery0 = new AnswerPreCheckoutQuery(":zk8IktNVZ ", boolean0);
      String string0 = answerPreCheckoutQuery0.getPreCheckoutQueryId();
      assertEquals(":zk8IktNVZ ", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      AnswerPreCheckoutQuery answerPreCheckoutQuery0 = new AnswerPreCheckoutQuery("", boolean0);
      answerPreCheckoutQuery0.getOk();
      assertEquals("", answerPreCheckoutQuery0.getPreCheckoutQueryId());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AnswerPreCheckoutQuery answerPreCheckoutQuery0 = new AnswerPreCheckoutQuery();
      String string0 = answerPreCheckoutQuery0.getErrorMessage();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AnswerPreCheckoutQuery answerPreCheckoutQuery0 = new AnswerPreCheckoutQuery();
      answerPreCheckoutQuery0.setPreCheckoutQueryId("");
      try { 
        answerPreCheckoutQuery0.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // PreCheckoutQueryId can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.methods.AnswerPreCheckoutQuery", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      AnswerPreCheckoutQuery answerPreCheckoutQuery0 = new AnswerPreCheckoutQuery("Rr4ChQckoutQueryId can't be empty", boolean0);
      String string0 = answerPreCheckoutQuery0.getMethod();
      assertEquals("answerPreCheckoutQuery", string0);
      assertEquals("Rr4ChQckoutQueryId can't be empty", answerPreCheckoutQuery0.getPreCheckoutQueryId());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AnswerPreCheckoutQuery answerPreCheckoutQuery0 = new AnswerPreCheckoutQuery();
      String string0 = answerPreCheckoutQuery0.toString();
      assertEquals("AnswerPreCheckoutQuery{preCheckoutQueryId='null', ok=null, errorMessage='null'}", string0);
  }
}
