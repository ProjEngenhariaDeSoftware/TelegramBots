/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 26 12:53:02 GMT 2018
 */

package org.telegram.telegrambots.meta.api.methods;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.telegram.telegrambots.meta.api.methods.AnswerInlineQuery;
import org.telegram.telegrambots.meta.api.objects.inlinequery.result.InlineQueryResult;
import org.telegram.telegrambots.meta.api.objects.inlinequery.result.InlineQueryResultGif;
import org.telegram.telegrambots.meta.api.objects.inlinequery.result.InlineQueryResultLocation;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AnswerInlineQuery_ESTest extends AnswerInlineQuery_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AnswerInlineQuery answerInlineQuery0 = new AnswerInlineQuery();
      answerInlineQuery0.setInlineQueryId("answerInlineQuery");
      AnswerInlineQuery answerInlineQuery1 = answerInlineQuery0.setSwitchPmParameter("com.faserxml.jacson.dataind.jsontype.impl.AsArrayTypeDeseralizer");
      AnswerInlineQuery answerInlineQuery2 = answerInlineQuery1.setSwitchPmText("com.faserxml.jacson.dataind.jsontype.impl.AsArrayTypeDeseralizer");
      Vector<InlineQueryResult> vector0 = new Vector<InlineQueryResult>();
      answerInlineQuery2.setResults((List<InlineQueryResult>) vector0);
      try { 
        answerInlineQuery1.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // SwitchPmParameter only allows A-Z, a-z, 0-9 and _ characters
         //
         verifyException("org.telegram.telegrambots.meta.api.methods.AnswerInlineQuery", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AnswerInlineQuery answerInlineQuery0 = new AnswerInlineQuery();
      AnswerInlineQuery answerInlineQuery1 = answerInlineQuery0.setInlineQueryId("unknown");
      InlineQueryResult[] inlineQueryResultArray0 = new InlineQueryResult[4];
      InlineQueryResultGif inlineQueryResultGif0 = new InlineQueryResultGif();
      InlineQueryResultGif inlineQueryResultGif1 = inlineQueryResultGif0.setGifUrl("0");
      InlineQueryResultGif inlineQueryResultGif2 = inlineQueryResultGif1.setId("RN]=Y5YLGu!");
      inlineQueryResultArray0[0] = (InlineQueryResult) inlineQueryResultGif2;
      answerInlineQuery1.setResults(inlineQueryResultArray0);
      // Undeclared exception!
      try { 
        answerInlineQuery1.validate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.telegram.telegrambots.meta.api.methods.AnswerInlineQuery", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AnswerInlineQuery answerInlineQuery0 = new AnswerInlineQuery();
      Boolean boolean0 = Boolean.FALSE;
      answerInlineQuery0.setPersonal(boolean0);
      Boolean boolean1 = answerInlineQuery0.isPersonal();
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AnswerInlineQuery answerInlineQuery0 = new AnswerInlineQuery();
      answerInlineQuery0.setSwitchPmText("answerInlineQuery");
      String string0 = answerInlineQuery0.getSwitchPmText();
      assertEquals("answerInlineQuery", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AnswerInlineQuery answerInlineQuery0 = new AnswerInlineQuery();
      AnswerInlineQuery answerInlineQuery1 = answerInlineQuery0.setSwitchPmText("");
      String string0 = answerInlineQuery1.getSwitchPmText();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AnswerInlineQuery answerInlineQuery0 = new AnswerInlineQuery();
      answerInlineQuery0.setSwitchPmParameter("O");
      String string0 = answerInlineQuery0.getSwitchPmParameter();
      assertEquals("O", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AnswerInlineQuery answerInlineQuery0 = new AnswerInlineQuery();
      answerInlineQuery0.setSwitchPmParameter("");
      String string0 = answerInlineQuery0.getSwitchPmParameter();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AnswerInlineQuery answerInlineQuery0 = new AnswerInlineQuery();
      Vector<InlineQueryResult> vector0 = new Vector<InlineQueryResult>();
      answerInlineQuery0.setResults((List<InlineQueryResult>) vector0);
      InlineQueryResultLocation inlineQueryResultLocation0 = new InlineQueryResultLocation();
      vector0.add((InlineQueryResult) inlineQueryResultLocation0);
      List<InlineQueryResult> list0 = answerInlineQuery0.getResults();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AnswerInlineQuery answerInlineQuery0 = new AnswerInlineQuery();
      answerInlineQuery0.setNextOffset("answerInlineQuery");
      String string0 = answerInlineQuery0.getNextOffset();
      assertEquals("answerInlineQuery", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AnswerInlineQuery answerInlineQuery0 = new AnswerInlineQuery();
      AnswerInlineQuery answerInlineQuery1 = answerInlineQuery0.setNextOffset("");
      String string0 = answerInlineQuery1.getNextOffset();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AnswerInlineQuery answerInlineQuery0 = new AnswerInlineQuery();
      AnswerInlineQuery answerInlineQuery1 = answerInlineQuery0.setInlineQueryId("answerInlineQuery");
      String string0 = answerInlineQuery1.getInlineQueryId();
      assertEquals("answerInlineQuery", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AnswerInlineQuery answerInlineQuery0 = new AnswerInlineQuery();
      AnswerInlineQuery answerInlineQuery1 = answerInlineQuery0.setInlineQueryId("");
      String string0 = answerInlineQuery1.getInlineQueryId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AnswerInlineQuery answerInlineQuery0 = new AnswerInlineQuery();
      Integer integer0 = new Integer(0);
      answerInlineQuery0.setCacheTime(integer0);
      Integer integer1 = answerInlineQuery0.getCacheTime();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AnswerInlineQuery answerInlineQuery0 = new AnswerInlineQuery();
      Integer integer0 = new Integer((-686));
      answerInlineQuery0.setCacheTime(integer0);
      Integer integer1 = answerInlineQuery0.getCacheTime();
      assertEquals((-686), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AnswerInlineQuery answerInlineQuery0 = new AnswerInlineQuery();
      Integer integer0 = new Integer(721);
      answerInlineQuery0.setCacheTime(integer0);
      Integer integer1 = answerInlineQuery0.getCacheTime();
      assertEquals(721, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AnswerInlineQuery answerInlineQuery0 = new AnswerInlineQuery();
      // Undeclared exception!
      try { 
        answerInlineQuery0.setResults((InlineQueryResult[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AnswerInlineQuery answerInlineQuery0 = new AnswerInlineQuery();
      // Undeclared exception!
      try { 
        answerInlineQuery0.deserializeResponse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.JsonFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AnswerInlineQuery answerInlineQuery0 = new AnswerInlineQuery();
      AnswerInlineQuery answerInlineQuery1 = answerInlineQuery0.setInlineQueryId("#[-5yHIQ#p=32!)jg");
      InlineQueryResult[] inlineQueryResultArray0 = new InlineQueryResult[0];
      AnswerInlineQuery answerInlineQuery2 = answerInlineQuery1.setResults(inlineQueryResultArray0);
      AnswerInlineQuery answerInlineQuery3 = answerInlineQuery2.setSwitchPmParameter("O");
      AnswerInlineQuery answerInlineQuery4 = answerInlineQuery3.setSwitchPmText("answerInlineQuery");
      answerInlineQuery4.validate();
      assertEquals("O", answerInlineQuery4.getSwitchPmParameter());
      assertEquals("answerInlineQuery", answerInlineQuery4.getSwitchPmText());
      assertEquals("#[-5yHIQ#p=32!)jg", answerInlineQuery4.getInlineQueryId());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AnswerInlineQuery answerInlineQuery0 = new AnswerInlineQuery();
      answerInlineQuery0.setInlineQueryId("answerInlineQuery");
      AnswerInlineQuery answerInlineQuery1 = answerInlineQuery0.setSwitchPmParameter("com.faserxml.jacson.dataind.jsontype.impl.AsArrayTypeDeserializer");
      AnswerInlineQuery answerInlineQuery2 = answerInlineQuery1.setSwitchPmText("com.faserxml.jacson.dataind.jsontype.impl.AsArrayTypeDeserializer");
      Vector<InlineQueryResult> vector0 = new Vector<InlineQueryResult>();
      answerInlineQuery2.setResults((List<InlineQueryResult>) vector0);
      try { 
        answerInlineQuery1.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // SwitchPmParameter can't be longer than 64 chars
         //
         verifyException("org.telegram.telegrambots.meta.api.methods.AnswerInlineQuery", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AnswerInlineQuery answerInlineQuery0 = new AnswerInlineQuery();
      answerInlineQuery0.setInlineQueryId("answerInlineQuery");
      AnswerInlineQuery answerInlineQuery1 = answerInlineQuery0.setSwitchPmParameter("");
      AnswerInlineQuery answerInlineQuery2 = answerInlineQuery1.setSwitchPmText("0");
      Vector<InlineQueryResult> vector0 = new Vector<InlineQueryResult>();
      answerInlineQuery2.setResults((List<InlineQueryResult>) vector0);
      try { 
        answerInlineQuery1.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // SwitchPmParameter can't be empty if switchPmText is present
         //
         verifyException("org.telegram.telegrambots.meta.api.methods.AnswerInlineQuery", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AnswerInlineQuery answerInlineQuery0 = new AnswerInlineQuery();
      InlineQueryResult[] inlineQueryResultArray0 = new InlineQueryResult[1];
      AnswerInlineQuery answerInlineQuery1 = answerInlineQuery0.setResults(inlineQueryResultArray0);
      answerInlineQuery0.setSwitchPmText("");
      answerInlineQuery0.setInlineQueryId("0");
      try { 
        answerInlineQuery1.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // SwitchPmText can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.methods.AnswerInlineQuery", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AnswerInlineQuery answerInlineQuery0 = new AnswerInlineQuery();
      InlineQueryResult[] inlineQueryResultArray0 = new InlineQueryResult[1];
      answerInlineQuery0.setInlineQueryId("answerInlineQuery");
      AnswerInlineQuery answerInlineQuery1 = answerInlineQuery0.setSwitchPmText("answerInlineQuery");
      answerInlineQuery1.setResults(inlineQueryResultArray0);
      try { 
        answerInlineQuery0.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // SwitchPmParameter can't be empty if switchPmText is present
         //
         verifyException("org.telegram.telegrambots.meta.api.methods.AnswerInlineQuery", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AnswerInlineQuery answerInlineQuery0 = new AnswerInlineQuery();
      AnswerInlineQuery answerInlineQuery1 = answerInlineQuery0.setInlineQueryId("");
      try { 
        answerInlineQuery1.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // InlineQueryId can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.methods.AnswerInlineQuery", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AnswerInlineQuery answerInlineQuery0 = new AnswerInlineQuery();
      answerInlineQuery0.setInlineQueryId("answerInlineQuery");
      try { 
        answerInlineQuery0.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Results array can't be null
         //
         verifyException("org.telegram.telegrambots.meta.api.methods.AnswerInlineQuery", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AnswerInlineQuery answerInlineQuery0 = new AnswerInlineQuery();
      try { 
        answerInlineQuery0.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // InlineQueryId can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.methods.AnswerInlineQuery", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AnswerInlineQuery answerInlineQuery0 = new AnswerInlineQuery();
      List<InlineQueryResult> list0 = answerInlineQuery0.getResults();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AnswerInlineQuery answerInlineQuery0 = new AnswerInlineQuery();
      String string0 = answerInlineQuery0.getSwitchPmParameter();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      AnswerInlineQuery answerInlineQuery0 = new AnswerInlineQuery();
      String string0 = answerInlineQuery0.getMethod();
      assertEquals("answerInlineQuery", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      AnswerInlineQuery answerInlineQuery0 = new AnswerInlineQuery();
      Integer integer0 = answerInlineQuery0.getCacheTime();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      AnswerInlineQuery answerInlineQuery0 = new AnswerInlineQuery();
      Boolean boolean0 = answerInlineQuery0.isPersonal();
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      AnswerInlineQuery answerInlineQuery0 = new AnswerInlineQuery();
      Stack<InlineQueryResult> stack0 = new Stack<InlineQueryResult>();
      AnswerInlineQuery answerInlineQuery1 = answerInlineQuery0.setResults((List<InlineQueryResult>) stack0);
      List<InlineQueryResult> list0 = answerInlineQuery1.getResults();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      AnswerInlineQuery answerInlineQuery0 = new AnswerInlineQuery();
      String string0 = answerInlineQuery0.getSwitchPmText();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      AnswerInlineQuery answerInlineQuery0 = new AnswerInlineQuery();
      String string0 = answerInlineQuery0.getNextOffset();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      AnswerInlineQuery answerInlineQuery0 = new AnswerInlineQuery();
      String string0 = answerInlineQuery0.getInlineQueryId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      AnswerInlineQuery answerInlineQuery0 = new AnswerInlineQuery();
      String string0 = answerInlineQuery0.toString();
      assertEquals("AnswerInlineQuery{inlineQueryId='null', results=null, cacheTime=null, isPersonal=null, switchPmText=null, switchPmParameter=null, nextOffset='null'}", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      AnswerInlineQuery answerInlineQuery0 = new AnswerInlineQuery();
      Boolean boolean0 = Boolean.TRUE;
      AnswerInlineQuery answerInlineQuery1 = answerInlineQuery0.setPersonal(boolean0);
      Boolean boolean1 = answerInlineQuery1.isPersonal();
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      AnswerInlineQuery answerInlineQuery0 = new AnswerInlineQuery();
      try { 
        answerInlineQuery0.deserializeResponse(", results=");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unable to deserialize response
         //
         verifyException("org.telegram.telegrambots.meta.api.methods.AnswerInlineQuery", e);
      }
  }
}
