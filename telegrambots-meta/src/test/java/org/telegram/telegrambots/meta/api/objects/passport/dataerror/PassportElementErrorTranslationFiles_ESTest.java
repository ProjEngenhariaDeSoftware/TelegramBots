/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 26 13:00:08 GMT 2018
 */

package org.telegram.telegrambots.meta.api.objects.passport.dataerror;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.telegram.telegrambots.meta.api.objects.passport.dataerror.PassportElementErrorTranslationFiles;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PassportElementErrorTranslationFiles_ESTest extends PassportElementErrorTranslationFiles_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PassportElementErrorTranslationFiles passportElementErrorTranslationFiles0 = new PassportElementErrorTranslationFiles();
      String string0 = passportElementErrorTranslationFiles0.getType();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PassportElementErrorTranslationFiles passportElementErrorTranslationFiles0 = new PassportElementErrorTranslationFiles();
      passportElementErrorTranslationFiles0.setType("");
      String string0 = passportElementErrorTranslationFiles0.getType();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      PassportElementErrorTranslationFiles passportElementErrorTranslationFiles0 = new PassportElementErrorTranslationFiles("Tks,sh#vlV?k", linkedList0, "Tks,sh#vlV?k");
      String string0 = passportElementErrorTranslationFiles0.getMessage();
      assertEquals("Tks,sh#vlV?k", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PassportElementErrorTranslationFiles passportElementErrorTranslationFiles0 = new PassportElementErrorTranslationFiles();
      passportElementErrorTranslationFiles0.setMessage("");
      String string0 = passportElementErrorTranslationFiles0.getMessage();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PassportElementErrorTranslationFiles passportElementErrorTranslationFiles0 = new PassportElementErrorTranslationFiles();
      List<String> list0 = passportElementErrorTranslationFiles0.getFileHashes();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PassportElementErrorTranslationFiles passportElementErrorTranslationFiles0 = new PassportElementErrorTranslationFiles();
      passportElementErrorTranslationFiles0.addFileHash("");
      List<String> list0 = passportElementErrorTranslationFiles0.getFileHashes();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PassportElementErrorTranslationFiles passportElementErrorTranslationFiles0 = new PassportElementErrorTranslationFiles();
      // Undeclared exception!
      try { 
        passportElementErrorTranslationFiles0.setType((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      PassportElementErrorTranslationFiles passportElementErrorTranslationFiles0 = new PassportElementErrorTranslationFiles("Type parameter can't be empty", linkedList0, "Type parameter can't be empty");
      // Undeclared exception!
      try { 
        passportElementErrorTranslationFiles0.setMessage((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PassportElementErrorTranslationFiles passportElementErrorTranslationFiles0 = new PassportElementErrorTranslationFiles();
      // Undeclared exception!
      try { 
        passportElementErrorTranslationFiles0.addFileHash((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PassportElementErrorTranslationFiles passportElementErrorTranslationFiles0 = null;
      try {
        passportElementErrorTranslationFiles0 = new PassportElementErrorTranslationFiles("", (List<String>) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      PassportElementErrorTranslationFiles passportElementErrorTranslationFiles0 = new PassportElementErrorTranslationFiles("Tks,sh#vlV?k", linkedList0, "Tks,sh#vlV?k");
      linkedList0.add("Tks,sh#vlV?k");
      PassportElementErrorTranslationFiles passportElementErrorTranslationFiles1 = passportElementErrorTranslationFiles0.setType("");
      try { 
        passportElementErrorTranslationFiles1.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Type parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.objects.passport.dataerror.PassportElementErrorTranslationFiles", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PassportElementErrorTranslationFiles passportElementErrorTranslationFiles0 = new PassportElementErrorTranslationFiles();
      PassportElementErrorTranslationFiles passportElementErrorTranslationFiles1 = passportElementErrorTranslationFiles0.setMessage("");
      PassportElementErrorTranslationFiles passportElementErrorTranslationFiles2 = passportElementErrorTranslationFiles1.addFileHash("");
      try { 
        passportElementErrorTranslationFiles2.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Message parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.objects.passport.dataerror.PassportElementErrorTranslationFiles", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PassportElementErrorTranslationFiles passportElementErrorTranslationFiles0 = new PassportElementErrorTranslationFiles();
      passportElementErrorTranslationFiles0.addFileHash("PassportElementErrorTranslationFiles{source='translation_files', type='null', fileHashes=null, message='null'}");
      PassportElementErrorTranslationFiles passportElementErrorTranslationFiles1 = passportElementErrorTranslationFiles0.setMessage("*&Y_-iDyo3");
      try { 
        passportElementErrorTranslationFiles1.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Type parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.objects.passport.dataerror.PassportElementErrorTranslationFiles", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PassportElementErrorTranslationFiles passportElementErrorTranslationFiles0 = new PassportElementErrorTranslationFiles();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      PassportElementErrorTranslationFiles passportElementErrorTranslationFiles1 = passportElementErrorTranslationFiles0.setFileHashes(linkedList0);
      try { 
        passportElementErrorTranslationFiles1.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File hash parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.objects.passport.dataerror.PassportElementErrorTranslationFiles", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PassportElementErrorTranslationFiles passportElementErrorTranslationFiles0 = new PassportElementErrorTranslationFiles();
      passportElementErrorTranslationFiles0.addFileHash("PassportElementErrorTranslationFiles{source='translation_files', type='null', fileHashes=null, message='null'}");
      try { 
        passportElementErrorTranslationFiles0.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Message parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.objects.passport.dataerror.PassportElementErrorTranslationFiles", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PassportElementErrorTranslationFiles passportElementErrorTranslationFiles0 = new PassportElementErrorTranslationFiles();
      try { 
        passportElementErrorTranslationFiles0.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File hash parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.objects.passport.dataerror.PassportElementErrorTranslationFiles", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      PassportElementErrorTranslationFiles passportElementErrorTranslationFiles0 = new PassportElementErrorTranslationFiles("+", linkedList0, "+");
      PassportElementErrorTranslationFiles passportElementErrorTranslationFiles1 = passportElementErrorTranslationFiles0.addFileHash("+");
      passportElementErrorTranslationFiles1.validate();
      assertTrue(linkedList0.contains("+"));
      assertEquals(1, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      PassportElementErrorTranslationFiles passportElementErrorTranslationFiles0 = new PassportElementErrorTranslationFiles("Tks,sh#vlV?k", linkedList0, "Tks,sh#vlV?k");
      List<String> list0 = passportElementErrorTranslationFiles0.getFileHashes();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PassportElementErrorTranslationFiles passportElementErrorTranslationFiles0 = new PassportElementErrorTranslationFiles();
      String string0 = passportElementErrorTranslationFiles0.getMessage();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PassportElementErrorTranslationFiles passportElementErrorTranslationFiles0 = new PassportElementErrorTranslationFiles();
      String string0 = passportElementErrorTranslationFiles0.toString();
      assertEquals("PassportElementErrorTranslationFiles{source='translation_files', type='null', fileHashes=null, message='null'}", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PassportElementErrorTranslationFiles passportElementErrorTranslationFiles0 = new PassportElementErrorTranslationFiles();
      String string0 = passportElementErrorTranslationFiles0.getSource();
      assertEquals("translation_files", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PassportElementErrorTranslationFiles passportElementErrorTranslationFiles0 = new PassportElementErrorTranslationFiles();
      // Undeclared exception!
      try { 
        passportElementErrorTranslationFiles0.setFileHashes((List<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      PassportElementErrorTranslationFiles passportElementErrorTranslationFiles0 = new PassportElementErrorTranslationFiles("Tks,sh#vlV?k", linkedList0, "Tks,sh#vlV?k");
      String string0 = passportElementErrorTranslationFiles0.getType();
      assertEquals("Tks,sh#vlV?k", string0);
  }
}
