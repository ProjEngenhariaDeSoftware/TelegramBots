/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 26 12:52:40 GMT 2018
 */

package org.telegram.telegrambots.meta.api.objects.inlinequery.result;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.telegram.telegrambots.meta.api.objects.inlinequery.inputmessagecontent.InputContactMessageContent;
import org.telegram.telegrambots.meta.api.objects.inlinequery.inputmessagecontent.InputMessageContent;
import org.telegram.telegrambots.meta.api.objects.inlinequery.result.InlineQueryResultVenue;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class InlineQueryResultVenue_ESTest extends InlineQueryResultVenue_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      InlineQueryResultVenue inlineQueryResultVenue0 = new InlineQueryResultVenue();
      inlineQueryResultVenue0.setTitle(";Di'&p");
      String string0 = inlineQueryResultVenue0.getTitle();
      assertEquals(";Di'&p", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      InlineQueryResultVenue inlineQueryResultVenue0 = new InlineQueryResultVenue();
      inlineQueryResultVenue0.setTitle("");
      String string0 = inlineQueryResultVenue0.getTitle();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      InlineQueryResultVenue inlineQueryResultVenue0 = new InlineQueryResultVenue();
      Integer integer0 = new Integer(0);
      inlineQueryResultVenue0.setThumbWidth(integer0);
      Integer integer1 = inlineQueryResultVenue0.getThumbWidth();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      InlineQueryResultVenue inlineQueryResultVenue0 = new InlineQueryResultVenue();
      Integer integer0 = new Integer((-2742));
      inlineQueryResultVenue0.setThumbWidth(integer0);
      Integer integer1 = inlineQueryResultVenue0.getThumbWidth();
      assertEquals((-2742), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      InlineQueryResultVenue inlineQueryResultVenue0 = new InlineQueryResultVenue();
      Integer integer0 = new Integer(4271);
      inlineQueryResultVenue0.setThumbWidth(integer0);
      Integer integer1 = inlineQueryResultVenue0.getThumbWidth();
      assertEquals(4271, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      InlineQueryResultVenue inlineQueryResultVenue0 = new InlineQueryResultVenue();
      InlineQueryResultVenue inlineQueryResultVenue1 = inlineQueryResultVenue0.setThumbUrl("1,$");
      String string0 = inlineQueryResultVenue1.getThumbUrl();
      assertEquals("1,$", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      InlineQueryResultVenue inlineQueryResultVenue0 = new InlineQueryResultVenue();
      inlineQueryResultVenue0.setThumbUrl("");
      String string0 = inlineQueryResultVenue0.getThumbUrl();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      InlineQueryResultVenue inlineQueryResultVenue0 = new InlineQueryResultVenue();
      Integer integer0 = new Integer(282);
      InlineQueryResultVenue inlineQueryResultVenue1 = inlineQueryResultVenue0.setThumbHeight(integer0);
      Integer integer1 = inlineQueryResultVenue1.getThumbHeight();
      assertEquals(282, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      InlineQueryResultVenue inlineQueryResultVenue0 = new InlineQueryResultVenue();
      Integer integer0 = new Integer((-3336));
      inlineQueryResultVenue0.setThumbHeight(integer0);
      Integer integer1 = inlineQueryResultVenue0.getThumbHeight();
      assertEquals((-3336), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      InlineQueryResultVenue inlineQueryResultVenue0 = new InlineQueryResultVenue();
      Float float0 = new Float(1.0);
      inlineQueryResultVenue0.setLongitude(float0);
      Float float1 = inlineQueryResultVenue0.getLongitude();
      assertEquals(1.0F, (float)float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      InlineQueryResultVenue inlineQueryResultVenue0 = new InlineQueryResultVenue();
      Float float0 = new Float(0.0F);
      inlineQueryResultVenue0.setLongitude(float0);
      Float float1 = inlineQueryResultVenue0.getLongitude();
      assertEquals(0.0F, (float)float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      InlineQueryResultVenue inlineQueryResultVenue0 = new InlineQueryResultVenue();
      Float float0 = new Float((-538.784F));
      InlineQueryResultVenue inlineQueryResultVenue1 = inlineQueryResultVenue0.setLongitude(float0);
      Float float1 = inlineQueryResultVenue1.getLongitude();
      assertEquals((-538.784F), (float)float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      InlineQueryResultVenue inlineQueryResultVenue0 = new InlineQueryResultVenue();
      Float float0 = new Float(1427.605F);
      inlineQueryResultVenue0.setLatitude(float0);
      Float float1 = inlineQueryResultVenue0.getLatitude();
      assertEquals(1427.605F, (float)float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      InlineQueryResultVenue inlineQueryResultVenue0 = new InlineQueryResultVenue();
      Float float0 = new Float(0.0);
      inlineQueryResultVenue0.setLatitude(float0);
      Float float1 = inlineQueryResultVenue0.getLatitude();
      assertEquals(0.0F, (float)float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      InlineQueryResultVenue inlineQueryResultVenue0 = new InlineQueryResultVenue();
      Float float0 = new Float((-1661.3691));
      inlineQueryResultVenue0.setLatitude(float0);
      Float float1 = inlineQueryResultVenue0.getLatitude();
      assertEquals((-1661.3691F), (float)float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      InlineQueryResultVenue inlineQueryResultVenue0 = new InlineQueryResultVenue();
      inlineQueryResultVenue0.setId("1,$");
      String string0 = inlineQueryResultVenue0.getId();
      assertEquals("1,$", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      InlineQueryResultVenue inlineQueryResultVenue0 = new InlineQueryResultVenue();
      inlineQueryResultVenue0.setId("");
      String string0 = inlineQueryResultVenue0.getId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      InlineQueryResultVenue inlineQueryResultVenue0 = new InlineQueryResultVenue();
      inlineQueryResultVenue0.setFoursquareType("6ob<:EC^{_k~J");
      String string0 = inlineQueryResultVenue0.getFoursquareType();
      assertEquals("6ob<:EC^{_k~J", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      InlineQueryResultVenue inlineQueryResultVenue0 = new InlineQueryResultVenue();
      InlineQueryResultVenue inlineQueryResultVenue1 = inlineQueryResultVenue0.setFoursquareType("");
      String string0 = inlineQueryResultVenue1.getFoursquareType();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      InlineQueryResultVenue inlineQueryResultVenue0 = new InlineQueryResultVenue();
      inlineQueryResultVenue0.setFoursquareId("foursquare_id");
      String string0 = inlineQueryResultVenue0.getFoursquareId();
      assertEquals("foursquare_id", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      InlineQueryResultVenue inlineQueryResultVenue0 = new InlineQueryResultVenue();
      inlineQueryResultVenue0.setFoursquareId("");
      String string0 = inlineQueryResultVenue0.getFoursquareId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      InlineQueryResultVenue inlineQueryResultVenue0 = new InlineQueryResultVenue();
      inlineQueryResultVenue0.setAddress("`-my$$G");
      String string0 = inlineQueryResultVenue0.getAddress();
      assertEquals("`-my$$G", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      InlineQueryResultVenue inlineQueryResultVenue0 = new InlineQueryResultVenue();
      inlineQueryResultVenue0.setAddress("");
      String string0 = inlineQueryResultVenue0.getAddress();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      InlineQueryResultVenue inlineQueryResultVenue0 = new InlineQueryResultVenue();
      InlineQueryResultVenue inlineQueryResultVenue1 = inlineQueryResultVenue0.setTitle("Q :{K4l");
      InlineQueryResultVenue inlineQueryResultVenue2 = inlineQueryResultVenue1.setId("Q :{K4l");
      InlineQueryResultVenue inlineQueryResultVenue3 = inlineQueryResultVenue2.setAddress("Q :{K4l");
      InlineKeyboardMarkup inlineKeyboardMarkup0 = new InlineKeyboardMarkup();
      Float float0 = new Float((-4030.17));
      InlineQueryResultVenue inlineQueryResultVenue4 = inlineQueryResultVenue1.setLatitude(float0);
      InlineQueryResultVenue inlineQueryResultVenue5 = inlineQueryResultVenue3.setReplyMarkup(inlineKeyboardMarkup0);
      inlineQueryResultVenue5.setLongitude(float0);
      inlineQueryResultVenue4.validate();
      assertSame(inlineQueryResultVenue1, inlineQueryResultVenue4);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      InlineQueryResultVenue inlineQueryResultVenue0 = new InlineQueryResultVenue();
      InlineQueryResultVenue inlineQueryResultVenue1 = inlineQueryResultVenue0.setTitle("n");
      Float float0 = new Float((float) (-982));
      inlineQueryResultVenue1.setLatitude(float0);
      inlineQueryResultVenue0.setId("n");
      InputContactMessageContent inputContactMessageContent0 = new InputContactMessageContent();
      InlineQueryResultVenue inlineQueryResultVenue2 = inlineQueryResultVenue0.setInputMessageContent(inputContactMessageContent0);
      inlineQueryResultVenue2.setLongitude(float0);
      InlineQueryResultVenue inlineQueryResultVenue3 = inlineQueryResultVenue0.setAddress("n");
      try { 
        inlineQueryResultVenue3.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // PhoneNumber parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.objects.inlinequery.inputmessagecontent.InputContactMessageContent", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      InlineQueryResultVenue inlineQueryResultVenue0 = new InlineQueryResultVenue();
      InlineQueryResultVenue inlineQueryResultVenue1 = inlineQueryResultVenue0.setTitle("8PI<jo");
      Float float0 = new Float((float) 1211);
      inlineQueryResultVenue0.setLatitude(float0);
      inlineQueryResultVenue1.setId("8PI<jo");
      inlineQueryResultVenue1.setLongitude(float0);
      InlineQueryResultVenue inlineQueryResultVenue2 = inlineQueryResultVenue0.setAddress("");
      try { 
        inlineQueryResultVenue2.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Longitude parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.objects.inlinequery.result.InlineQueryResultVenue", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      InlineQueryResultVenue inlineQueryResultVenue0 = new InlineQueryResultVenue();
      InlineQueryResultVenue inlineQueryResultVenue1 = inlineQueryResultVenue0.setTitle("Q :{K4l");
      InlineQueryResultVenue inlineQueryResultVenue2 = inlineQueryResultVenue1.setId("Q :{K4l");
      inlineQueryResultVenue2.setAddress("Q :{K4l");
      Float float0 = new Float((-4030.17));
      InlineQueryResultVenue inlineQueryResultVenue3 = inlineQueryResultVenue1.setLatitude(float0);
      inlineQueryResultVenue1.setLongitude(float0);
      inlineQueryResultVenue3.validate();
      assertNull(inlineQueryResultVenue3.getFoursquareId());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      InlineQueryResultVenue inlineQueryResultVenue0 = new InlineQueryResultVenue();
      InlineQueryResultVenue inlineQueryResultVenue1 = inlineQueryResultVenue0.setTitle("Q :{K4l");
      inlineQueryResultVenue1.setId("Q :{K4l");
      Float float0 = new Float((-4030.17));
      InlineQueryResultVenue inlineQueryResultVenue2 = inlineQueryResultVenue1.setLatitude(float0);
      inlineQueryResultVenue2.setLongitude(float0);
      try { 
        inlineQueryResultVenue2.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Longitude parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.objects.inlinequery.result.InlineQueryResultVenue", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      InlineQueryResultVenue inlineQueryResultVenue0 = new InlineQueryResultVenue();
      InlineQueryResultVenue inlineQueryResultVenue1 = inlineQueryResultVenue0.setTitle("Q :{K4l");
      inlineQueryResultVenue1.setId("Q :{K4l");
      Float float0 = new Float((-4030.17));
      InlineQueryResultVenue inlineQueryResultVenue2 = inlineQueryResultVenue1.setLatitude(float0);
      try { 
        inlineQueryResultVenue2.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Longitude parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.objects.inlinequery.result.InlineQueryResultVenue", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      InlineQueryResultVenue inlineQueryResultVenue0 = new InlineQueryResultVenue();
      InlineQueryResultVenue inlineQueryResultVenue1 = inlineQueryResultVenue0.setId("x<q>b>YWzXnHv ##:>");
      inlineQueryResultVenue1.setTitle("");
      try { 
        inlineQueryResultVenue0.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Title parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.objects.inlinequery.result.InlineQueryResultVenue", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      InlineQueryResultVenue inlineQueryResultVenue0 = new InlineQueryResultVenue();
      InlineQueryResultVenue inlineQueryResultVenue1 = inlineQueryResultVenue0.setTitle("Q :{K4l");
      InlineQueryResultVenue inlineQueryResultVenue2 = inlineQueryResultVenue1.setId("Q :{K4l");
      try { 
        inlineQueryResultVenue2.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Latitude parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.objects.inlinequery.result.InlineQueryResultVenue", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      InlineQueryResultVenue inlineQueryResultVenue0 = new InlineQueryResultVenue();
      inlineQueryResultVenue0.setId("");
      try { 
        inlineQueryResultVenue0.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // ID parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.objects.inlinequery.result.InlineQueryResultVenue", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      InlineQueryResultVenue inlineQueryResultVenue0 = new InlineQueryResultVenue();
      InlineQueryResultVenue inlineQueryResultVenue1 = inlineQueryResultVenue0.setId("Q :{K4l");
      try { 
        inlineQueryResultVenue1.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Title parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.objects.inlinequery.result.InlineQueryResultVenue", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      InlineQueryResultVenue inlineQueryResultVenue0 = new InlineQueryResultVenue();
      try { 
        inlineQueryResultVenue0.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // ID parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.objects.inlinequery.result.InlineQueryResultVenue", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      InlineQueryResultVenue inlineQueryResultVenue0 = new InlineQueryResultVenue();
      InlineKeyboardMarkup inlineKeyboardMarkup0 = new InlineKeyboardMarkup();
      inlineQueryResultVenue0.setReplyMarkup(inlineKeyboardMarkup0);
      InlineKeyboardMarkup inlineKeyboardMarkup1 = inlineQueryResultVenue0.getReplyMarkup();
      assertSame(inlineKeyboardMarkup1, inlineKeyboardMarkup0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      InlineQueryResultVenue inlineQueryResultVenue0 = new InlineQueryResultVenue();
      String string0 = inlineQueryResultVenue0.getThumbUrl();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      InlineQueryResultVenue inlineQueryResultVenue0 = new InlineQueryResultVenue();
      InputMessageContent inputMessageContent0 = inlineQueryResultVenue0.getInputMessageContent();
      assertNull(inputMessageContent0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      InlineQueryResultVenue inlineQueryResultVenue0 = new InlineQueryResultVenue();
      String string0 = inlineQueryResultVenue0.getAddress();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      InlineQueryResultVenue inlineQueryResultVenue0 = new InlineQueryResultVenue();
      Float float0 = new Float((-4030.17));
      inlineQueryResultVenue0.setLatitude(float0);
      Float float1 = inlineQueryResultVenue0.getLatitude();
      assertEquals((-4030.17F), (float)float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      InlineQueryResultVenue inlineQueryResultVenue0 = new InlineQueryResultVenue();
      String string0 = inlineQueryResultVenue0.toString();
      assertEquals("InlineQueryResultVenue{type='venue', id='null', title='null', latitude=null, longitude=null, address='null', foursquareId='null', replyMarkup=null, inputMessageContent=null, thumbUrl='null', thumbWidth=null, thumbHeight=null, foursquareType='null'}", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      InlineQueryResultVenue inlineQueryResultVenue0 = new InlineQueryResultVenue();
      String string0 = inlineQueryResultVenue0.getFoursquareId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      InlineQueryResultVenue inlineQueryResultVenue0 = new InlineQueryResultVenue();
      String string0 = inlineQueryResultVenue0.getId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      InlineQueryResultVenue inlineQueryResultVenue0 = new InlineQueryResultVenue();
      InlineKeyboardMarkup inlineKeyboardMarkup0 = inlineQueryResultVenue0.getReplyMarkup();
      assertNull(inlineKeyboardMarkup0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      InlineQueryResultVenue inlineQueryResultVenue0 = new InlineQueryResultVenue();
      Float float0 = inlineQueryResultVenue0.getLongitude();
      assertNull(float0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      InlineQueryResultVenue inlineQueryResultVenue0 = new InlineQueryResultVenue();
      Integer integer0 = new Integer(0);
      inlineQueryResultVenue0.setThumbHeight(integer0);
      Integer integer1 = inlineQueryResultVenue0.getThumbHeight();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      InlineQueryResultVenue inlineQueryResultVenue0 = new InlineQueryResultVenue();
      String string0 = inlineQueryResultVenue0.getType();
      assertEquals("venue", string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      InlineQueryResultVenue inlineQueryResultVenue0 = new InlineQueryResultVenue();
      Float float0 = inlineQueryResultVenue0.getLatitude();
      assertNull(float0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      InlineQueryResultVenue inlineQueryResultVenue0 = new InlineQueryResultVenue();
      InputContactMessageContent inputContactMessageContent0 = new InputContactMessageContent();
      InlineQueryResultVenue inlineQueryResultVenue1 = inlineQueryResultVenue0.setInputMessageContent(inputContactMessageContent0);
      InputContactMessageContent inputContactMessageContent1 = (InputContactMessageContent)inlineQueryResultVenue1.getInputMessageContent();
      assertNull(inputContactMessageContent1.getLastName());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      InlineQueryResultVenue inlineQueryResultVenue0 = new InlineQueryResultVenue();
      Integer integer0 = inlineQueryResultVenue0.getThumbHeight();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      InlineQueryResultVenue inlineQueryResultVenue0 = new InlineQueryResultVenue();
      Integer integer0 = inlineQueryResultVenue0.getThumbWidth();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      InlineQueryResultVenue inlineQueryResultVenue0 = new InlineQueryResultVenue();
      String string0 = inlineQueryResultVenue0.getFoursquareType();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      InlineQueryResultVenue inlineQueryResultVenue0 = new InlineQueryResultVenue();
      String string0 = inlineQueryResultVenue0.getTitle();
      assertNull(string0);
  }
}
