/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 26 13:26:02 GMT 2018
 */

package org.telegram.telegrambots.meta.api.methods.send;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.telegram.telegrambots.meta.api.methods.send.SendContact;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboard;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SendContact_ESTest extends SendContact_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SendContact sendContact0 = new SendContact();
      sendContact0.setvCard("#Ki\"u'0cgt>XLG");
      String string0 = sendContact0.getvCard();
      assertEquals("#Ki\"u'0cgt>XLG", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SendContact sendContact0 = new SendContact();
      sendContact0.setvCard("");
      String string0 = sendContact0.getvCard();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SendContact sendContact0 = new SendContact();
      Integer integer0 = new Integer(125);
      sendContact0.setReplyToMessageId(integer0);
      Integer integer1 = sendContact0.getReplyToMessageId();
      assertEquals(125, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SendContact sendContact0 = new SendContact();
      Integer integer0 = new Integer((-301));
      sendContact0.setReplyToMessageId(integer0);
      Integer integer1 = sendContact0.getReplyToMessageId();
      assertEquals((-301), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SendContact sendContact0 = new SendContact();
      SendContact sendContact1 = sendContact0.setPhoneNumber("azsaPD]cK;'1_");
      String string0 = sendContact1.getPhoneNumber();
      assertEquals("azsaPD]cK;'1_", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SendContact sendContact0 = new SendContact();
      sendContact0.setPhoneNumber("");
      String string0 = sendContact0.getPhoneNumber();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SendContact sendContact0 = new SendContact();
      SendContact sendContact1 = sendContact0.setLastName("Y");
      String string0 = sendContact1.getLastName();
      assertEquals("Y", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SendContact sendContact0 = new SendContact();
      sendContact0.setLastName("");
      String string0 = sendContact0.getLastName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SendContact sendContact0 = new SendContact();
      SendContact sendContact1 = sendContact0.setFirstName("sendContact");
      String string0 = sendContact1.getFirstName();
      assertEquals("sendContact", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SendContact sendContact0 = new SendContact();
      SendContact sendContact1 = sendContact0.setFirstName("");
      String string0 = sendContact1.getFirstName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SendContact sendContact0 = new SendContact();
      Long long0 = new Long((-15));
      sendContact0.setChatId(long0);
      String string0 = sendContact0.getChatId();
      assertEquals("-15", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SendContact sendContact0 = new SendContact();
      sendContact0.setChatId("");
      String string0 = sendContact0.getChatId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SendContact sendContact0 = new SendContact();
      // Undeclared exception!
      try { 
        sendContact0.setChatId((Long) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SendContact sendContact0 = new SendContact();
      try { 
        sendContact0.deserializeResponse("sendContact");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unable to deserialize response
         //
         verifyException("org.telegram.telegrambots.meta.api.methods.send.SendContact", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SendContact sendContact0 = new SendContact();
      sendContact0.setChatId("sendContact");
      SendContact sendContact1 = sendContact0.setPhoneNumber("sendContact");
      sendContact0.setFirstName("sendContact");
      sendContact0.validate();
      assertSame(sendContact0, sendContact1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SendContact sendContact0 = new SendContact();
      sendContact0.setChatId("sendContact");
      sendContact0.setPhoneNumber("sendContact");
      try { 
        sendContact0.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // FirstName parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.methods.send.SendContact", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SendContact sendContact0 = new SendContact();
      try { 
        sendContact0.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // ChatId parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.methods.send.SendContact", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SendContact sendContact0 = new SendContact();
      sendContact0.setChatId("sendContact");
      try { 
        sendContact0.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // PhoneNumber parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.methods.send.SendContact", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SendContact sendContact0 = new SendContact();
      String string0 = sendContact0.getMethod();
      assertEquals("sendContact", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SendContact sendContact0 = new SendContact();
      ReplyKeyboard replyKeyboard0 = sendContact0.getReplyMarkup();
      assertNull(replyKeyboard0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SendContact sendContact0 = new SendContact();
      String string0 = sendContact0.getChatId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SendContact sendContact0 = new SendContact();
      String string0 = sendContact0.getPhoneNumber();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SendContact sendContact0 = new SendContact();
      Integer integer0 = sendContact0.getReplyToMessageId();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SendContact sendContact0 = new SendContact();
      String string0 = sendContact0.getFirstName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SendContact sendContact0 = new SendContact();
      SendContact sendContact1 = sendContact0.setPhoneNumber("sendContact");
      SendContact sendContact2 = sendContact1.setFirstName("sendContact");
      ReplyKeyboardMarkup replyKeyboardMarkup0 = new ReplyKeyboardMarkup();
      SendContact sendContact3 = sendContact2.setReplyMarkup(replyKeyboardMarkup0);
      SendContact sendContact4 = sendContact3.setChatId("sendContact");
      sendContact4.validate();
      assertSame(sendContact4, sendContact3);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SendContact sendContact0 = new SendContact();
      String string0 = sendContact0.toString();
      assertEquals("SendContact{chatId='null', phoneNumber='null', firstName='null', lastName='null', disableNotification=null, replyToMessageId=null, replyMarkup=null, vCard='null'}", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SendContact sendContact0 = new SendContact();
      sendContact0.enableNotification();
      Boolean boolean0 = sendContact0.getDisableNotification();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SendContact sendContact0 = new SendContact();
      Boolean boolean0 = sendContact0.getDisableNotification();
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SendContact sendContact0 = new SendContact();
      SendContact sendContact1 = sendContact0.disableNotification();
      Boolean boolean0 = sendContact1.getDisableNotification();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SendContact sendContact0 = new SendContact();
      ReplyKeyboardMarkup replyKeyboardMarkup0 = new ReplyKeyboardMarkup();
      sendContact0.setReplyMarkup(replyKeyboardMarkup0);
      ReplyKeyboardMarkup replyKeyboardMarkup1 = (ReplyKeyboardMarkup)sendContact0.getReplyMarkup();
      assertNull(replyKeyboardMarkup1.getOneTimeKeyboard());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SendContact sendContact0 = new SendContact();
      Integer integer0 = new Integer(0);
      SendContact sendContact1 = sendContact0.setReplyToMessageId(integer0);
      Integer integer1 = sendContact1.getReplyToMessageId();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SendContact sendContact0 = new SendContact();
      String string0 = sendContact0.getLastName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SendContact sendContact0 = new SendContact();
      String string0 = sendContact0.getvCard();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SendContact sendContact0 = new SendContact();
      // Undeclared exception!
      try { 
        sendContact0.deserializeResponse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.JsonFactory", e);
      }
  }
}
