/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 26 13:13:37 GMT 2018
 */

package org.telegram.telegrambots.meta.api.objects.passport.dataerror;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.telegram.telegrambots.meta.api.objects.passport.dataerror.PassportElementErrorTranslationFile;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PassportElementErrorTranslationFile_ESTest extends PassportElementErrorTranslationFile_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PassportElementErrorTranslationFile passportElementErrorTranslationFile0 = new PassportElementErrorTranslationFile();
      String string0 = passportElementErrorTranslationFile0.getType();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PassportElementErrorTranslationFile passportElementErrorTranslationFile0 = new PassportElementErrorTranslationFile("end index (%s) must not be less than start index (%s)", "end index (%s) must not be less than start index (%s)", "end index (%s) must not be less than start index (%s)");
      PassportElementErrorTranslationFile passportElementErrorTranslationFile1 = passportElementErrorTranslationFile0.setType("");
      String string0 = passportElementErrorTranslationFile1.getType();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PassportElementErrorTranslationFile passportElementErrorTranslationFile0 = new PassportElementErrorTranslationFile();
      String string0 = passportElementErrorTranslationFile0.getMessage();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PassportElementErrorTranslationFile passportElementErrorTranslationFile0 = new PassportElementErrorTranslationFile("", "READ_WRITE", "");
      String string0 = passportElementErrorTranslationFile0.getMessage();
      assertEquals("", string0);
      assertEquals("READ_WRITE", passportElementErrorTranslationFile0.getFileHash());
      assertEquals("", passportElementErrorTranslationFile0.getType());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PassportElementErrorTranslationFile passportElementErrorTranslationFile0 = new PassportElementErrorTranslationFile();
      String string0 = passportElementErrorTranslationFile0.getFileHash();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PassportElementErrorTranslationFile passportElementErrorTranslationFile0 = new PassportElementErrorTranslationFile();
      passportElementErrorTranslationFile0.setFileHash("");
      String string0 = passportElementErrorTranslationFile0.getFileHash();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PassportElementErrorTranslationFile passportElementErrorTranslationFile0 = new PassportElementErrorTranslationFile();
      // Undeclared exception!
      try { 
        passportElementErrorTranslationFile0.setType((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PassportElementErrorTranslationFile passportElementErrorTranslationFile0 = new PassportElementErrorTranslationFile("", "", "");
      // Undeclared exception!
      try { 
        passportElementErrorTranslationFile0.setMessage((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PassportElementErrorTranslationFile passportElementErrorTranslationFile0 = null;
      try {
        passportElementErrorTranslationFile0 = new PassportElementErrorTranslationFile("`jRc'eS1fq", "", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PassportElementErrorTranslationFile passportElementErrorTranslationFile0 = new PassportElementErrorTranslationFile("end index (%s) must not be less than start index (%s)", "end index (%s) must not be less than start index (%s)", "end index (%s) must not be less than start index (%s)");
      passportElementErrorTranslationFile0.setType("");
      try { 
        passportElementErrorTranslationFile0.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Type parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.objects.passport.dataerror.PassportElementErrorTranslationFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PassportElementErrorTranslationFile passportElementErrorTranslationFile0 = new PassportElementErrorTranslationFile();
      PassportElementErrorTranslationFile passportElementErrorTranslationFile1 = passportElementErrorTranslationFile0.setMessage("l=MH^^k");
      passportElementErrorTranslationFile0.setFileHash("l=MH^^k");
      try { 
        passportElementErrorTranslationFile1.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Type parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.objects.passport.dataerror.PassportElementErrorTranslationFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PassportElementErrorTranslationFile passportElementErrorTranslationFile0 = new PassportElementErrorTranslationFile("i", "i", "i");
      passportElementErrorTranslationFile0.validate();
      assertEquals("i", passportElementErrorTranslationFile0.getFileHash());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PassportElementErrorTranslationFile passportElementErrorTranslationFile0 = new PassportElementErrorTranslationFile();
      PassportElementErrorTranslationFile passportElementErrorTranslationFile1 = passportElementErrorTranslationFile0.setFileHash("_");
      passportElementErrorTranslationFile1.setMessage("");
      try { 
        passportElementErrorTranslationFile0.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Message parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.objects.passport.dataerror.PassportElementErrorTranslationFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PassportElementErrorTranslationFile passportElementErrorTranslationFile0 = new PassportElementErrorTranslationFile("", "", "");
      try { 
        passportElementErrorTranslationFile0.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File hash parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.objects.passport.dataerror.PassportElementErrorTranslationFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PassportElementErrorTranslationFile passportElementErrorTranslationFile0 = new PassportElementErrorTranslationFile();
      passportElementErrorTranslationFile0.setFileHash("_");
      try { 
        passportElementErrorTranslationFile0.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Message parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.objects.passport.dataerror.PassportElementErrorTranslationFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PassportElementErrorTranslationFile passportElementErrorTranslationFile0 = new PassportElementErrorTranslationFile();
      try { 
        passportElementErrorTranslationFile0.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File hash parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.objects.passport.dataerror.PassportElementErrorTranslationFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PassportElementErrorTranslationFile passportElementErrorTranslationFile0 = new PassportElementErrorTranslationFile("end index (%s) must not be less than start index (%s)", "end index (%s) must not be less than start index (%s)", "end index (%s) must not be less than start index (%s)");
      String string0 = passportElementErrorTranslationFile0.getType();
      assertEquals("end index (%s) must not be less than start index (%s)", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PassportElementErrorTranslationFile passportElementErrorTranslationFile0 = new PassportElementErrorTranslationFile();
      String string0 = passportElementErrorTranslationFile0.toString();
      assertEquals("PassportElementErrorTranslationFile{source='translation_file', type='null', fileHash='null', message='null'}", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PassportElementErrorTranslationFile passportElementErrorTranslationFile0 = new PassportElementErrorTranslationFile("i", "i", "i");
      String string0 = passportElementErrorTranslationFile0.getMessage();
      assertEquals("i", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PassportElementErrorTranslationFile passportElementErrorTranslationFile0 = new PassportElementErrorTranslationFile("i", "i", "i");
      String string0 = passportElementErrorTranslationFile0.getFileHash();
      assertEquals("i", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PassportElementErrorTranslationFile passportElementErrorTranslationFile0 = new PassportElementErrorTranslationFile();
      String string0 = passportElementErrorTranslationFile0.getSource();
      assertEquals("translation_file", string0);
  }
}
