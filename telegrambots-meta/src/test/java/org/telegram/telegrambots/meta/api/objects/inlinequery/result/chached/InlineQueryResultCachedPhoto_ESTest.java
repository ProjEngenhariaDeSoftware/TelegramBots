/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 26 13:13:42 GMT 2018
 */

package org.telegram.telegrambots.meta.api.objects.inlinequery.result.chached;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.telegram.telegrambots.meta.api.objects.inlinequery.inputmessagecontent.InputLocationMessageContent;
import org.telegram.telegrambots.meta.api.objects.inlinequery.inputmessagecontent.InputMessageContent;
import org.telegram.telegrambots.meta.api.objects.inlinequery.result.chached.InlineQueryResultCachedPhoto;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class InlineQueryResultCachedPhoto_ESTest extends InlineQueryResultCachedPhoto_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      InlineQueryResultCachedPhoto inlineQueryResultCachedPhoto0 = new InlineQueryResultCachedPhoto();
      inlineQueryResultCachedPhoto0.setTitle("chNfC<znWukwS(");
      String string0 = inlineQueryResultCachedPhoto0.getTitle();
      assertEquals("chNfC<znWukwS(", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      InlineQueryResultCachedPhoto inlineQueryResultCachedPhoto0 = new InlineQueryResultCachedPhoto();
      InlineQueryResultCachedPhoto inlineQueryResultCachedPhoto1 = inlineQueryResultCachedPhoto0.setPhotoFileId("chNfC<znWukwS(");
      String string0 = inlineQueryResultCachedPhoto1.getPhotoFileId();
      assertEquals("chNfC<znWukwS(", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      InlineQueryResultCachedPhoto inlineQueryResultCachedPhoto0 = new InlineQueryResultCachedPhoto();
      inlineQueryResultCachedPhoto0.setPhotoFileId("");
      String string0 = inlineQueryResultCachedPhoto0.getPhotoFileId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      InlineQueryResultCachedPhoto inlineQueryResultCachedPhoto0 = new InlineQueryResultCachedPhoto();
      inlineQueryResultCachedPhoto0.setParseMode("");
      String string0 = inlineQueryResultCachedPhoto0.getParseMode();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      InlineQueryResultCachedPhoto inlineQueryResultCachedPhoto0 = new InlineQueryResultCachedPhoto();
      inlineQueryResultCachedPhoto0.setId(" oZ1*");
      String string0 = inlineQueryResultCachedPhoto0.getId();
      assertEquals(" oZ1*", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      InlineQueryResultCachedPhoto inlineQueryResultCachedPhoto0 = new InlineQueryResultCachedPhoto();
      inlineQueryResultCachedPhoto0.setId("");
      String string0 = inlineQueryResultCachedPhoto0.getId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      InlineQueryResultCachedPhoto inlineQueryResultCachedPhoto0 = new InlineQueryResultCachedPhoto();
      inlineQueryResultCachedPhoto0.setDescription("HctAj(");
      String string0 = inlineQueryResultCachedPhoto0.getDescription();
      assertEquals("HctAj(", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      InlineQueryResultCachedPhoto inlineQueryResultCachedPhoto0 = new InlineQueryResultCachedPhoto();
      InlineQueryResultCachedPhoto inlineQueryResultCachedPhoto1 = inlineQueryResultCachedPhoto0.setDescription("");
      String string0 = inlineQueryResultCachedPhoto1.getDescription();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      InlineQueryResultCachedPhoto inlineQueryResultCachedPhoto0 = new InlineQueryResultCachedPhoto();
      inlineQueryResultCachedPhoto0.setCaption("bgV-k*M");
      String string0 = inlineQueryResultCachedPhoto0.getCaption();
      assertEquals("bgV-k*M", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      InlineQueryResultCachedPhoto inlineQueryResultCachedPhoto0 = new InlineQueryResultCachedPhoto();
      inlineQueryResultCachedPhoto0.setCaption("");
      String string0 = inlineQueryResultCachedPhoto0.getCaption();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      InlineQueryResultCachedPhoto inlineQueryResultCachedPhoto0 = new InlineQueryResultCachedPhoto();
      InlineQueryResultCachedPhoto inlineQueryResultCachedPhoto1 = inlineQueryResultCachedPhoto0.setPhotoFileId("1K4");
      InlineKeyboardMarkup inlineKeyboardMarkup0 = new InlineKeyboardMarkup();
      LinkedList<List<InlineKeyboardButton>> linkedList0 = new LinkedList<List<InlineKeyboardButton>>();
      InlineKeyboardMarkup inlineKeyboardMarkup1 = inlineKeyboardMarkup0.setKeyboard(linkedList0);
      InlineQueryResultCachedPhoto inlineQueryResultCachedPhoto2 = inlineQueryResultCachedPhoto0.setReplyMarkup(inlineKeyboardMarkup1);
      linkedList0.add((List<InlineKeyboardButton>) null);
      inlineQueryResultCachedPhoto2.setId("1K4");
      // Undeclared exception!
      try { 
        inlineQueryResultCachedPhoto1.validate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      InlineQueryResultCachedPhoto inlineQueryResultCachedPhoto0 = new InlineQueryResultCachedPhoto();
      InlineKeyboardMarkup inlineKeyboardMarkup0 = new InlineKeyboardMarkup();
      InlineQueryResultCachedPhoto inlineQueryResultCachedPhoto1 = inlineQueryResultCachedPhoto0.setPhotoFileId(", parseMode='");
      inlineQueryResultCachedPhoto0.setId("InlineQueryResultCachedPhoto{type='photo', id='null', photoFileId='null', title='null', description='null', caption='null', inputMessageContent=null, replyMarkup=null, parseMode='null'}");
      inlineQueryResultCachedPhoto0.setReplyMarkup(inlineKeyboardMarkup0);
      inlineQueryResultCachedPhoto1.validate();
      assertSame(inlineQueryResultCachedPhoto1, inlineQueryResultCachedPhoto0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      InlineQueryResultCachedPhoto inlineQueryResultCachedPhoto0 = new InlineQueryResultCachedPhoto();
      InlineQueryResultCachedPhoto inlineQueryResultCachedPhoto1 = inlineQueryResultCachedPhoto0.setPhotoFileId("chNfC<znWukwS(");
      InlineQueryResultCachedPhoto inlineQueryResultCachedPhoto2 = inlineQueryResultCachedPhoto1.setId("chNfC<znWukwS(");
      InputLocationMessageContent inputLocationMessageContent0 = new InputLocationMessageContent();
      inlineQueryResultCachedPhoto0.setInputMessageContent(inputLocationMessageContent0);
      try { 
        inlineQueryResultCachedPhoto2.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Latitude parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.objects.inlinequery.inputmessagecontent.InputLocationMessageContent", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      InlineQueryResultCachedPhoto inlineQueryResultCachedPhoto0 = new InlineQueryResultCachedPhoto();
      InlineQueryResultCachedPhoto inlineQueryResultCachedPhoto1 = inlineQueryResultCachedPhoto0.setPhotoFileId(", parseMode='");
      inlineQueryResultCachedPhoto0.setId("InlineQueryResultCachedPhoto{type='photo', id='null', photoFileId='null', title='null', description='null', caption='null', inputMessageContent=null, replyMarkup=null, parseMode='null'}");
      inlineQueryResultCachedPhoto1.validate();
      assertSame(inlineQueryResultCachedPhoto0, inlineQueryResultCachedPhoto1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      InlineQueryResultCachedPhoto inlineQueryResultCachedPhoto0 = new InlineQueryResultCachedPhoto();
      InlineQueryResultCachedPhoto inlineQueryResultCachedPhoto1 = inlineQueryResultCachedPhoto0.setId("");
      try { 
        inlineQueryResultCachedPhoto1.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // ID parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.objects.inlinequery.result.chached.InlineQueryResultCachedPhoto", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      InlineQueryResultCachedPhoto inlineQueryResultCachedPhoto0 = new InlineQueryResultCachedPhoto();
      try { 
        inlineQueryResultCachedPhoto0.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // ID parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.objects.inlinequery.result.chached.InlineQueryResultCachedPhoto", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      InlineQueryResultCachedPhoto inlineQueryResultCachedPhoto0 = new InlineQueryResultCachedPhoto();
      inlineQueryResultCachedPhoto0.setParseMode("InlineKeyboardMarkup{inline_keyboard=[]}");
      String string0 = inlineQueryResultCachedPhoto0.getParseMode();
      assertEquals("InlineKeyboardMarkup{inline_keyboard=[]}", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      InlineQueryResultCachedPhoto inlineQueryResultCachedPhoto0 = new InlineQueryResultCachedPhoto();
      InputMessageContent inputMessageContent0 = inlineQueryResultCachedPhoto0.getInputMessageContent();
      assertNull(inputMessageContent0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      InlineQueryResultCachedPhoto inlineQueryResultCachedPhoto0 = new InlineQueryResultCachedPhoto();
      String string0 = inlineQueryResultCachedPhoto0.toString();
      assertEquals("InlineQueryResultCachedPhoto{type='photo', id='null', photoFileId='null', title='null', description='null', caption='null', inputMessageContent=null, replyMarkup=null, parseMode='null'}", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      InlineQueryResultCachedPhoto inlineQueryResultCachedPhoto0 = new InlineQueryResultCachedPhoto();
      String string0 = inlineQueryResultCachedPhoto0.getParseMode();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      InlineQueryResultCachedPhoto inlineQueryResultCachedPhoto0 = new InlineQueryResultCachedPhoto();
      String string0 = inlineQueryResultCachedPhoto0.getTitle();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      InlineQueryResultCachedPhoto inlineQueryResultCachedPhoto0 = new InlineQueryResultCachedPhoto();
      InlineKeyboardMarkup inlineKeyboardMarkup0 = new InlineKeyboardMarkup();
      inlineQueryResultCachedPhoto0.setReplyMarkup(inlineKeyboardMarkup0);
      InlineKeyboardMarkup inlineKeyboardMarkup1 = inlineQueryResultCachedPhoto0.getReplyMarkup();
      assertSame(inlineKeyboardMarkup1, inlineKeyboardMarkup0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      InlineQueryResultCachedPhoto inlineQueryResultCachedPhoto0 = new InlineQueryResultCachedPhoto();
      inlineQueryResultCachedPhoto0.setPhotoFileId("");
      inlineQueryResultCachedPhoto0.setId(", inputMessageContent=");
      try { 
        inlineQueryResultCachedPhoto0.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // PhotoFileId parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.objects.inlinequery.result.chached.InlineQueryResultCachedPhoto", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      InlineQueryResultCachedPhoto inlineQueryResultCachedPhoto0 = new InlineQueryResultCachedPhoto();
      String string0 = inlineQueryResultCachedPhoto0.getId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      InlineQueryResultCachedPhoto inlineQueryResultCachedPhoto0 = new InlineQueryResultCachedPhoto();
      String string0 = inlineQueryResultCachedPhoto0.getType();
      assertEquals("photo", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      InlineQueryResultCachedPhoto inlineQueryResultCachedPhoto0 = new InlineQueryResultCachedPhoto();
      InputLocationMessageContent inputLocationMessageContent0 = new InputLocationMessageContent();
      inlineQueryResultCachedPhoto0.setInputMessageContent(inputLocationMessageContent0);
      InputLocationMessageContent inputLocationMessageContent1 = (InputLocationMessageContent)inlineQueryResultCachedPhoto0.getInputMessageContent();
      assertNull(inputLocationMessageContent1.getLivePeriod());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      InlineQueryResultCachedPhoto inlineQueryResultCachedPhoto0 = new InlineQueryResultCachedPhoto();
      String string0 = inlineQueryResultCachedPhoto0.getCaption();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      InlineQueryResultCachedPhoto inlineQueryResultCachedPhoto0 = new InlineQueryResultCachedPhoto();
      inlineQueryResultCachedPhoto0.setTitle("");
      String string0 = inlineQueryResultCachedPhoto0.getTitle();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      InlineQueryResultCachedPhoto inlineQueryResultCachedPhoto0 = new InlineQueryResultCachedPhoto();
      inlineQueryResultCachedPhoto0.setId("InlineQueryResultCachedPhoto{type='photo', id='null', photoFileId='null', title='null', description='null', caption='null', inputMessageContent=null, replyMarkup=null, parseMode='null'}");
      try { 
        inlineQueryResultCachedPhoto0.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // PhotoFileId parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.objects.inlinequery.result.chached.InlineQueryResultCachedPhoto", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      InlineQueryResultCachedPhoto inlineQueryResultCachedPhoto0 = new InlineQueryResultCachedPhoto();
      String string0 = inlineQueryResultCachedPhoto0.getPhotoFileId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      InlineQueryResultCachedPhoto inlineQueryResultCachedPhoto0 = new InlineQueryResultCachedPhoto();
      String string0 = inlineQueryResultCachedPhoto0.getDescription();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      InlineQueryResultCachedPhoto inlineQueryResultCachedPhoto0 = new InlineQueryResultCachedPhoto();
      InlineKeyboardMarkup inlineKeyboardMarkup0 = inlineQueryResultCachedPhoto0.getReplyMarkup();
      assertNull(inlineKeyboardMarkup0);
  }
}
