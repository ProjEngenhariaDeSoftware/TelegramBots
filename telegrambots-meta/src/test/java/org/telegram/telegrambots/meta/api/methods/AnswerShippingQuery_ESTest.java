/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 26 12:52:00 GMT 2018
 */

package org.telegram.telegrambots.meta.api.methods;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.telegram.telegrambots.meta.api.methods.AnswerShippingQuery;
import org.telegram.telegrambots.meta.api.objects.payments.LabeledPrice;
import org.telegram.telegrambots.meta.api.objects.payments.ShippingOption;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AnswerShippingQuery_ESTest extends AnswerShippingQuery_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AnswerShippingQuery answerShippingQuery0 = new AnswerShippingQuery();
      Boolean boolean0 = Boolean.FALSE;
      AnswerShippingQuery answerShippingQuery1 = answerShippingQuery0.setOk(boolean0);
      assertNull(answerShippingQuery1.getErrorMessage());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AnswerShippingQuery answerShippingQuery0 = new AnswerShippingQuery();
      answerShippingQuery0.setShippingQueryId("answerShippingQuery");
      String string0 = answerShippingQuery0.getShippingQueryId();
      assertEquals("answerShippingQuery", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(false);
      AnswerShippingQuery answerShippingQuery0 = new AnswerShippingQuery("", boolean0);
      String string0 = answerShippingQuery0.getShippingQueryId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AnswerShippingQuery answerShippingQuery0 = new AnswerShippingQuery();
      Stack<ShippingOption> stack0 = new Stack<ShippingOption>();
      answerShippingQuery0.setShippingOptions(stack0);
      List<ShippingOption> list0 = answerShippingQuery0.getShippingOptions();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      AnswerShippingQuery answerShippingQuery0 = new AnswerShippingQuery("e3m.\"(a\"\"yhE", boolean0);
      Stack<ShippingOption> stack0 = new Stack<ShippingOption>();
      AnswerShippingQuery answerShippingQuery1 = answerShippingQuery0.setShippingOptions(stack0);
      ShippingOption shippingOption0 = new ShippingOption();
      stack0.add(shippingOption0);
      answerShippingQuery1.getShippingOptions();
      assertEquals("e3m.\"(a\"\"yhE", answerShippingQuery1.getShippingQueryId());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AnswerShippingQuery answerShippingQuery0 = new AnswerShippingQuery();
      Boolean boolean0 = answerShippingQuery0.getOk();
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      AnswerShippingQuery answerShippingQuery0 = new AnswerShippingQuery("D", boolean0);
      answerShippingQuery0.getOk();
      assertEquals("D", answerShippingQuery0.getShippingQueryId());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AnswerShippingQuery answerShippingQuery0 = new AnswerShippingQuery();
      AnswerShippingQuery answerShippingQuery1 = answerShippingQuery0.setErrorMessage("13Zc,4{XYysLX2=d<=");
      String string0 = answerShippingQuery1.getErrorMessage();
      assertEquals("13Zc,4{XYysLX2=d<=", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AnswerShippingQuery answerShippingQuery0 = new AnswerShippingQuery();
      AnswerShippingQuery answerShippingQuery1 = answerShippingQuery0.setErrorMessage("");
      String string0 = answerShippingQuery1.getErrorMessage();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Boolean boolean0 = new Boolean(true);
      AnswerShippingQuery answerShippingQuery0 = new AnswerShippingQuery("<tVF{('NoWU<-%z/4", boolean0);
      Stack<ShippingOption> stack0 = new Stack<ShippingOption>();
      Vector<LabeledPrice> vector0 = new Vector<LabeledPrice>();
      vector0.add((LabeledPrice) null);
      ShippingOption shippingOption0 = new ShippingOption("Unable to deserialize response", "answerShippingQuery", vector0);
      stack0.add(shippingOption0);
      AnswerShippingQuery answerShippingQuery1 = answerShippingQuery0.setShippingOptions(stack0);
      // Undeclared exception!
      try { 
        answerShippingQuery1.validate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.telegram.telegrambots.meta.api.objects.payments.ShippingOption", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      AnswerShippingQuery answerShippingQuery0 = new AnswerShippingQuery("", boolean0);
      // Undeclared exception!
      try { 
        answerShippingQuery0.deserializeResponse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.JsonFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AnswerShippingQuery answerShippingQuery0 = null;
      try {
        answerShippingQuery0 = new AnswerShippingQuery("HPiur", (Boolean) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(false);
      AnswerShippingQuery answerShippingQuery0 = new AnswerShippingQuery("_@[sORe}V@", boolean0);
      AnswerShippingQuery answerShippingQuery1 = answerShippingQuery0.setErrorMessage("");
      try { 
        answerShippingQuery1.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // ErrorMessage can't be empty if not ok
         //
         verifyException("org.telegram.telegrambots.meta.api.methods.AnswerShippingQuery", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf("(");
      AnswerShippingQuery answerShippingQuery0 = new AnswerShippingQuery("(", boolean0);
      AnswerShippingQuery answerShippingQuery1 = answerShippingQuery0.setErrorMessage("(");
      answerShippingQuery1.validate();
      assertEquals("(", answerShippingQuery1.getShippingQueryId());
      assertEquals("(", answerShippingQuery1.getErrorMessage());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(true);
      AnswerShippingQuery answerShippingQuery0 = new AnswerShippingQuery("<tVF{('NoWU<-%z/4", boolean0);
      Stack<ShippingOption> stack0 = new Stack<ShippingOption>();
      Vector<LabeledPrice> vector0 = new Vector<LabeledPrice>();
      LabeledPrice labeledPrice0 = mock(LabeledPrice.class, new ViolatedAssumptionAnswer());
      doReturn("answerShippingQuery").when(labeledPrice0).toString();
      vector0.add(labeledPrice0);
      ShippingOption shippingOption0 = new ShippingOption("<tVF{('NoWU<-%z/4", "answerShippingQuery", vector0);
      stack0.add(shippingOption0);
      AnswerShippingQuery answerShippingQuery1 = answerShippingQuery0.setShippingOptions(stack0);
      answerShippingQuery1.validate();
      assertEquals("<tVF{('NoWU<-%z/4", answerShippingQuery1.getShippingQueryId());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Boolean boolean0 = new Boolean(true);
      AnswerShippingQuery answerShippingQuery0 = new AnswerShippingQuery("<tVF{('NoWU<-%z/4", boolean0);
      Stack<ShippingOption> stack0 = new Stack<ShippingOption>();
      AnswerShippingQuery answerShippingQuery1 = answerShippingQuery0.setShippingOptions(stack0);
      try { 
        answerShippingQuery1.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // ShippingOptions array can't be empty if ok
         //
         verifyException("org.telegram.telegrambots.meta.api.methods.AnswerShippingQuery", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf("(");
      AnswerShippingQuery answerShippingQuery0 = new AnswerShippingQuery("(", boolean0);
      try { 
        answerShippingQuery0.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // ErrorMessage can't be empty if not ok
         //
         verifyException("org.telegram.telegrambots.meta.api.methods.AnswerShippingQuery", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AnswerShippingQuery answerShippingQuery0 = new AnswerShippingQuery();
      answerShippingQuery0.setShippingQueryId("answerShippingQuery");
      try { 
        answerShippingQuery0.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Ok can't be null
         //
         verifyException("org.telegram.telegrambots.meta.api.methods.AnswerShippingQuery", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      AnswerShippingQuery answerShippingQuery0 = new AnswerShippingQuery("qUg]'!l|`:]", boolean0);
      answerShippingQuery0.setShippingQueryId("");
      try { 
        answerShippingQuery0.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // ShippingQueryId can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.methods.AnswerShippingQuery", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Boolean boolean0 = new Boolean(true);
      AnswerShippingQuery answerShippingQuery0 = new AnswerShippingQuery("<tVF{('NoWU<-%z/4", boolean0);
      try { 
        answerShippingQuery0.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // ShippingOptions array can't be empty if ok
         //
         verifyException("org.telegram.telegrambots.meta.api.methods.AnswerShippingQuery", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AnswerShippingQuery answerShippingQuery0 = new AnswerShippingQuery();
      try { 
        answerShippingQuery0.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // ShippingQueryId can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.methods.AnswerShippingQuery", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AnswerShippingQuery answerShippingQuery0 = new AnswerShippingQuery();
      try { 
        answerShippingQuery0.deserializeResponse("[no message for ");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unable to deserialize response
         //
         verifyException("org.telegram.telegrambots.meta.api.methods.AnswerShippingQuery", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AnswerShippingQuery answerShippingQuery0 = new AnswerShippingQuery();
      String string0 = answerShippingQuery0.getMethod();
      assertEquals("answerShippingQuery", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Boolean boolean0 = new Boolean(true);
      AnswerShippingQuery answerShippingQuery0 = new AnswerShippingQuery("<tVF{('NoWU<-%z/4", boolean0);
      answerShippingQuery0.getShippingOptions();
      assertEquals("<tVF{('NoWU<-%z/4", answerShippingQuery0.getShippingQueryId());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AnswerShippingQuery answerShippingQuery0 = new AnswerShippingQuery();
      // Undeclared exception!
      try { 
        answerShippingQuery0.setShippingQueryId((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AnswerShippingQuery answerShippingQuery0 = new AnswerShippingQuery();
      String string0 = answerShippingQuery0.toString();
      assertEquals("AnswerShippingQuery{shippingQueryId='null', ok=null, shippingOptions=null, errorMessage='null'}", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Boolean boolean0 = new Boolean(true);
      AnswerShippingQuery answerShippingQuery0 = new AnswerShippingQuery("<tVF{('NoWU<-%z/4", boolean0);
      answerShippingQuery0.getOk();
      assertEquals("<tVF{('NoWU<-%z/4", answerShippingQuery0.getShippingQueryId());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      AnswerShippingQuery answerShippingQuery0 = new AnswerShippingQuery();
      // Undeclared exception!
      try { 
        answerShippingQuery0.setOk((Boolean) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(false);
      AnswerShippingQuery answerShippingQuery0 = new AnswerShippingQuery("_@[sORe}V@", boolean0);
      String string0 = answerShippingQuery0.getErrorMessage();
      assertNull(string0);
      assertEquals("_@[sORe}V@", answerShippingQuery0.getShippingQueryId());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      AnswerShippingQuery answerShippingQuery0 = new AnswerShippingQuery();
      String string0 = answerShippingQuery0.getShippingQueryId();
      assertNull(string0);
  }
}
