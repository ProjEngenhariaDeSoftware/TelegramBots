/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 26 13:09:03 GMT 2018
 */

package org.telegram.telegrambots.meta.api.objects.passport.dataerror;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.telegram.telegrambots.meta.api.objects.passport.dataerror.PassportElementErrorReverseSide;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PassportElementErrorReverseSide_ESTest extends PassportElementErrorReverseSide_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PassportElementErrorReverseSide passportElementErrorReverseSide0 = new PassportElementErrorReverseSide("s", "s", "s");
      String string0 = passportElementErrorReverseSide0.getType();
      assertEquals("s", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PassportElementErrorReverseSide passportElementErrorReverseSide0 = new PassportElementErrorReverseSide("", "", "");
      String string0 = passportElementErrorReverseSide0.getType();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PassportElementErrorReverseSide passportElementErrorReverseSide0 = new PassportElementErrorReverseSide("s", "s", "s");
      String string0 = passportElementErrorReverseSide0.getMessage();
      assertEquals("s", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PassportElementErrorReverseSide passportElementErrorReverseSide0 = new PassportElementErrorReverseSide();
      passportElementErrorReverseSide0.setMessage("");
      String string0 = passportElementErrorReverseSide0.getMessage();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PassportElementErrorReverseSide passportElementErrorReverseSide0 = new PassportElementErrorReverseSide();
      PassportElementErrorReverseSide passportElementErrorReverseSide1 = passportElementErrorReverseSide0.setFileHash("02#CW");
      String string0 = passportElementErrorReverseSide1.getFileHash();
      assertEquals("02#CW", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PassportElementErrorReverseSide passportElementErrorReverseSide0 = new PassportElementErrorReverseSide();
      PassportElementErrorReverseSide passportElementErrorReverseSide1 = passportElementErrorReverseSide0.setFileHash("");
      String string0 = passportElementErrorReverseSide1.getFileHash();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PassportElementErrorReverseSide passportElementErrorReverseSide0 = new PassportElementErrorReverseSide();
      // Undeclared exception!
      try { 
        passportElementErrorReverseSide0.setMessage((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PassportElementErrorReverseSide passportElementErrorReverseSide0 = null;
      try {
        passportElementErrorReverseSide0 = new PassportElementErrorReverseSide("", "@yVd,X' b", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PassportElementErrorReverseSide passportElementErrorReverseSide0 = new PassportElementErrorReverseSide("x", "x", "x");
      passportElementErrorReverseSide0.validate();
      assertEquals("x", passportElementErrorReverseSide0.getMessage());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PassportElementErrorReverseSide passportElementErrorReverseSide0 = new PassportElementErrorReverseSide();
      passportElementErrorReverseSide0.setFileHash("0lEQW");
      passportElementErrorReverseSide0.setMessage("0lEQW");
      try { 
        passportElementErrorReverseSide0.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Type parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.objects.passport.dataerror.PassportElementErrorReverseSide", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PassportElementErrorReverseSide passportElementErrorReverseSide0 = new PassportElementErrorReverseSide("", ",A]>", ",A]>");
      PassportElementErrorReverseSide passportElementErrorReverseSide1 = passportElementErrorReverseSide0.setMessage("");
      try { 
        passportElementErrorReverseSide1.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Message parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.objects.passport.dataerror.PassportElementErrorReverseSide", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PassportElementErrorReverseSide passportElementErrorReverseSide0 = new PassportElementErrorReverseSide();
      passportElementErrorReverseSide0.setFileHash("02#CW");
      try { 
        passportElementErrorReverseSide0.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Message parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.objects.passport.dataerror.PassportElementErrorReverseSide", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PassportElementErrorReverseSide passportElementErrorReverseSide0 = new PassportElementErrorReverseSide("", "", "");
      try { 
        passportElementErrorReverseSide0.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File hash parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.objects.passport.dataerror.PassportElementErrorReverseSide", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PassportElementErrorReverseSide passportElementErrorReverseSide0 = new PassportElementErrorReverseSide("", "0q=3", "-WV~<");
      try { 
        passportElementErrorReverseSide0.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Type parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.objects.passport.dataerror.PassportElementErrorReverseSide", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PassportElementErrorReverseSide passportElementErrorReverseSide0 = new PassportElementErrorReverseSide();
      try { 
        passportElementErrorReverseSide0.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File hash parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.objects.passport.dataerror.PassportElementErrorReverseSide", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PassportElementErrorReverseSide passportElementErrorReverseSide0 = new PassportElementErrorReverseSide("K,MG}'WH 2", "K,MG}'WH 2", "org.telegram.telegrambots.meta.api.objects.passport.dataerror.PassportElementErrorReverseSide");
      // Undeclared exception!
      try { 
        passportElementErrorReverseSide0.setType((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PassportElementErrorReverseSide passportElementErrorReverseSide0 = new PassportElementErrorReverseSide();
      String string0 = passportElementErrorReverseSide0.getSource();
      assertEquals("reverse_side", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PassportElementErrorReverseSide passportElementErrorReverseSide0 = new PassportElementErrorReverseSide();
      PassportElementErrorReverseSide passportElementErrorReverseSide1 = passportElementErrorReverseSide0.setType("nh{+pe'|F\"2Eys");
      assertEquals("nh{+pe'|F\"2Eys", passportElementErrorReverseSide1.getType());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PassportElementErrorReverseSide passportElementErrorReverseSide0 = new PassportElementErrorReverseSide();
      String string0 = passportElementErrorReverseSide0.getFileHash();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PassportElementErrorReverseSide passportElementErrorReverseSide0 = new PassportElementErrorReverseSide();
      String string0 = passportElementErrorReverseSide0.getType();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PassportElementErrorReverseSide passportElementErrorReverseSide0 = new PassportElementErrorReverseSide();
      String string0 = passportElementErrorReverseSide0.getMessage();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PassportElementErrorReverseSide passportElementErrorReverseSide0 = new PassportElementErrorReverseSide();
      String string0 = passportElementErrorReverseSide0.toString();
      assertEquals("PassportElementErrorReverseSide{source='reverse_side', type='null', fileHash='null', message='null'}", string0);
  }
}
