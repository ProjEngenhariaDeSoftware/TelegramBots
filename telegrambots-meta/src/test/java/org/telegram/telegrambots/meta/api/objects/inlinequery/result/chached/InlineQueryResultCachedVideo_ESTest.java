/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 26 13:17:54 GMT 2018
 */

package org.telegram.telegrambots.meta.api.objects.inlinequery.result.chached;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.telegram.telegrambots.meta.api.objects.inlinequery.inputmessagecontent.InputContactMessageContent;
import org.telegram.telegrambots.meta.api.objects.inlinequery.inputmessagecontent.InputMessageContent;
import org.telegram.telegrambots.meta.api.objects.inlinequery.inputmessagecontent.InputTextMessageContent;
import org.telegram.telegrambots.meta.api.objects.inlinequery.result.chached.InlineQueryResultCachedVideo;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class InlineQueryResultCachedVideo_ESTest extends InlineQueryResultCachedVideo_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      InlineQueryResultCachedVideo inlineQueryResultCachedVideo0 = new InlineQueryResultCachedVideo();
      InlineQueryResultCachedVideo inlineQueryResultCachedVideo1 = inlineQueryResultCachedVideo0.setVideoFileId("description");
      String string0 = inlineQueryResultCachedVideo1.getVideoFileId();
      assertEquals("description", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      InlineQueryResultCachedVideo inlineQueryResultCachedVideo0 = new InlineQueryResultCachedVideo();
      inlineQueryResultCachedVideo0.setTitle("");
      String string0 = inlineQueryResultCachedVideo0.getTitle();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      InlineQueryResultCachedVideo inlineQueryResultCachedVideo0 = new InlineQueryResultCachedVideo();
      InlineQueryResultCachedVideo inlineQueryResultCachedVideo1 = inlineQueryResultCachedVideo0.setParseMode("callback_data");
      String string0 = inlineQueryResultCachedVideo1.getParseMode();
      assertEquals("callback_data", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      InlineQueryResultCachedVideo inlineQueryResultCachedVideo0 = new InlineQueryResultCachedVideo();
      inlineQueryResultCachedVideo0.setParseMode("");
      String string0 = inlineQueryResultCachedVideo0.getParseMode();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      InlineQueryResultCachedVideo inlineQueryResultCachedVideo0 = new InlineQueryResultCachedVideo();
      InputContactMessageContent inputContactMessageContent0 = new InputContactMessageContent();
      InlineQueryResultCachedVideo inlineQueryResultCachedVideo1 = inlineQueryResultCachedVideo0.setInputMessageContent(inputContactMessageContent0);
      InputContactMessageContent inputContactMessageContent1 = (InputContactMessageContent)inlineQueryResultCachedVideo1.getInputMessageContent();
      assertNull(inputContactMessageContent1.getPhoneNumber());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      InlineQueryResultCachedVideo inlineQueryResultCachedVideo0 = new InlineQueryResultCachedVideo();
      InlineQueryResultCachedVideo inlineQueryResultCachedVideo1 = inlineQueryResultCachedVideo0.setId("k\\0wsOuX~@");
      String string0 = inlineQueryResultCachedVideo1.getId();
      assertEquals("k\\0wsOuX~@", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      InlineQueryResultCachedVideo inlineQueryResultCachedVideo0 = new InlineQueryResultCachedVideo();
      InlineQueryResultCachedVideo inlineQueryResultCachedVideo1 = inlineQueryResultCachedVideo0.setId("");
      String string0 = inlineQueryResultCachedVideo1.getId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      InlineQueryResultCachedVideo inlineQueryResultCachedVideo0 = new InlineQueryResultCachedVideo();
      inlineQueryResultCachedVideo0.setDescription("p`3_Oo3&`");
      String string0 = inlineQueryResultCachedVideo0.getDescription();
      assertEquals("p`3_Oo3&`", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      InlineQueryResultCachedVideo inlineQueryResultCachedVideo0 = new InlineQueryResultCachedVideo();
      inlineQueryResultCachedVideo0.setCaption("VideoFileId parameter can't be empty");
      String string0 = inlineQueryResultCachedVideo0.getCaption();
      assertEquals("VideoFileId parameter can't be empty", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      InlineQueryResultCachedVideo inlineQueryResultCachedVideo0 = new InlineQueryResultCachedVideo();
      InlineQueryResultCachedVideo inlineQueryResultCachedVideo1 = inlineQueryResultCachedVideo0.setVideoFileId("k}");
      inlineQueryResultCachedVideo1.setId("k}");
      InlineKeyboardMarkup inlineKeyboardMarkup0 = new InlineKeyboardMarkup();
      LinkedList<List<InlineKeyboardButton>> linkedList0 = new LinkedList<List<InlineKeyboardButton>>();
      linkedList0.add((List<InlineKeyboardButton>) null);
      inlineKeyboardMarkup0.setKeyboard(linkedList0);
      inlineQueryResultCachedVideo0.setReplyMarkup(inlineKeyboardMarkup0);
      // Undeclared exception!
      try { 
        inlineQueryResultCachedVideo0.validate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      InlineQueryResultCachedVideo inlineQueryResultCachedVideo0 = new InlineQueryResultCachedVideo();
      InlineQueryResultCachedVideo inlineQueryResultCachedVideo1 = inlineQueryResultCachedVideo0.setVideoFileId("k}");
      InlineQueryResultCachedVideo inlineQueryResultCachedVideo2 = inlineQueryResultCachedVideo1.setId("k}");
      InlineKeyboardMarkup inlineKeyboardMarkup0 = new InlineKeyboardMarkup();
      inlineQueryResultCachedVideo0.setReplyMarkup(inlineKeyboardMarkup0);
      inlineQueryResultCachedVideo0.validate();
      assertSame(inlineQueryResultCachedVideo0, inlineQueryResultCachedVideo2);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      InlineQueryResultCachedVideo inlineQueryResultCachedVideo0 = new InlineQueryResultCachedVideo();
      inlineQueryResultCachedVideo0.setVideoFileId("u");
      inlineQueryResultCachedVideo0.setId("u");
      inlineQueryResultCachedVideo0.validate();
      assertEquals("video", inlineQueryResultCachedVideo0.getType());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      InlineQueryResultCachedVideo inlineQueryResultCachedVideo0 = new InlineQueryResultCachedVideo();
      inlineQueryResultCachedVideo0.setId("InlineQueryResultCachedVideo{type='video', id='null', videoFileId='null', title='null', description='null', caption='null', inputMessageContent=null, replyMarkup=null, parseMode='null'}");
      InlineQueryResultCachedVideo inlineQueryResultCachedVideo1 = inlineQueryResultCachedVideo0.setVideoFileId("");
      try { 
        inlineQueryResultCachedVideo1.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // VideoFileId parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.objects.inlinequery.result.chached.InlineQueryResultCachedVideo", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      InlineQueryResultCachedVideo inlineQueryResultCachedVideo0 = new InlineQueryResultCachedVideo();
      InlineQueryResultCachedVideo inlineQueryResultCachedVideo1 = inlineQueryResultCachedVideo0.setId("");
      try { 
        inlineQueryResultCachedVideo1.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // ID parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.objects.inlinequery.result.chached.InlineQueryResultCachedVideo", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      InlineQueryResultCachedVideo inlineQueryResultCachedVideo0 = new InlineQueryResultCachedVideo();
      try { 
        inlineQueryResultCachedVideo0.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // ID parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.objects.inlinequery.result.chached.InlineQueryResultCachedVideo", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      InlineQueryResultCachedVideo inlineQueryResultCachedVideo0 = new InlineQueryResultCachedVideo();
      InlineKeyboardMarkup inlineKeyboardMarkup0 = inlineQueryResultCachedVideo0.getReplyMarkup();
      assertNull(inlineKeyboardMarkup0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      InlineQueryResultCachedVideo inlineQueryResultCachedVideo0 = new InlineQueryResultCachedVideo();
      String string0 = inlineQueryResultCachedVideo0.getCaption();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      InlineQueryResultCachedVideo inlineQueryResultCachedVideo0 = new InlineQueryResultCachedVideo();
      InputMessageContent inputMessageContent0 = inlineQueryResultCachedVideo0.getInputMessageContent();
      assertNull(inputMessageContent0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      InlineQueryResultCachedVideo inlineQueryResultCachedVideo0 = new InlineQueryResultCachedVideo();
      String string0 = inlineQueryResultCachedVideo0.toString();
      assertEquals("InlineQueryResultCachedVideo{type='video', id='null', videoFileId='null', title='null', description='null', caption='null', inputMessageContent=null, replyMarkup=null, parseMode='null'}", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      InlineQueryResultCachedVideo inlineQueryResultCachedVideo0 = new InlineQueryResultCachedVideo();
      String string0 = inlineQueryResultCachedVideo0.getTitle();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      InlineQueryResultCachedVideo inlineQueryResultCachedVideo0 = new InlineQueryResultCachedVideo();
      inlineQueryResultCachedVideo0.setVideoFileId("");
      String string0 = inlineQueryResultCachedVideo0.getVideoFileId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      InlineQueryResultCachedVideo inlineQueryResultCachedVideo0 = new InlineQueryResultCachedVideo();
      InlineKeyboardMarkup inlineKeyboardMarkup0 = new InlineKeyboardMarkup();
      InlineQueryResultCachedVideo inlineQueryResultCachedVideo1 = inlineQueryResultCachedVideo0.setReplyMarkup(inlineKeyboardMarkup0);
      InlineKeyboardMarkup inlineKeyboardMarkup1 = inlineQueryResultCachedVideo1.getReplyMarkup();
      assertSame(inlineKeyboardMarkup0, inlineKeyboardMarkup1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      InlineQueryResultCachedVideo inlineQueryResultCachedVideo0 = new InlineQueryResultCachedVideo();
      String string0 = inlineQueryResultCachedVideo0.getVideoFileId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      InlineQueryResultCachedVideo inlineQueryResultCachedVideo0 = new InlineQueryResultCachedVideo();
      InputTextMessageContent inputTextMessageContent0 = new InputTextMessageContent();
      inlineQueryResultCachedVideo0.setInputMessageContent(inputTextMessageContent0);
      inlineQueryResultCachedVideo0.setVideoFileId("u");
      inlineQueryResultCachedVideo0.setId("u");
      try { 
        inlineQueryResultCachedVideo0.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // MessageText parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.objects.inlinequery.inputmessagecontent.InputTextMessageContent", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      InlineQueryResultCachedVideo inlineQueryResultCachedVideo0 = new InlineQueryResultCachedVideo();
      String string0 = inlineQueryResultCachedVideo0.getType();
      assertEquals("video", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      InlineQueryResultCachedVideo inlineQueryResultCachedVideo0 = new InlineQueryResultCachedVideo();
      inlineQueryResultCachedVideo0.setCaption("");
      String string0 = inlineQueryResultCachedVideo0.getCaption();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      InlineQueryResultCachedVideo inlineQueryResultCachedVideo0 = new InlineQueryResultCachedVideo();
      inlineQueryResultCachedVideo0.setId("p`3_Oo3&`");
      try { 
        inlineQueryResultCachedVideo0.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // VideoFileId parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.objects.inlinequery.result.chached.InlineQueryResultCachedVideo", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      InlineQueryResultCachedVideo inlineQueryResultCachedVideo0 = new InlineQueryResultCachedVideo();
      inlineQueryResultCachedVideo0.setTitle("p`3_Oo3&`");
      String string0 = inlineQueryResultCachedVideo0.getTitle();
      assertEquals("p`3_Oo3&`", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      InlineQueryResultCachedVideo inlineQueryResultCachedVideo0 = new InlineQueryResultCachedVideo();
      String string0 = inlineQueryResultCachedVideo0.getParseMode();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      InlineQueryResultCachedVideo inlineQueryResultCachedVideo0 = new InlineQueryResultCachedVideo();
      String string0 = inlineQueryResultCachedVideo0.getDescription();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      InlineQueryResultCachedVideo inlineQueryResultCachedVideo0 = new InlineQueryResultCachedVideo();
      String string0 = inlineQueryResultCachedVideo0.getId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      InlineQueryResultCachedVideo inlineQueryResultCachedVideo0 = new InlineQueryResultCachedVideo();
      inlineQueryResultCachedVideo0.setDescription("");
      String string0 = inlineQueryResultCachedVideo0.getDescription();
      assertEquals("", string0);
  }
}
