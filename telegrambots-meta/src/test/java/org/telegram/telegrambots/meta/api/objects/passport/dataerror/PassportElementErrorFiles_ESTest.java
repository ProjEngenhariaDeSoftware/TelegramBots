/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 26 13:05:57 GMT 2018
 */

package org.telegram.telegrambots.meta.api.objects.passport.dataerror;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.telegram.telegrambots.meta.api.objects.passport.dataerror.PassportElementErrorFiles;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PassportElementErrorFiles_ESTest extends PassportElementErrorFiles_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PassportElementErrorFiles passportElementErrorFiles0 = new PassportElementErrorFiles();
      String string0 = passportElementErrorFiles0.getType();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PassportElementErrorFiles passportElementErrorFiles0 = new PassportElementErrorFiles();
      PassportElementErrorFiles passportElementErrorFiles1 = passportElementErrorFiles0.setType("");
      String string0 = passportElementErrorFiles1.getType();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PassportElementErrorFiles passportElementErrorFiles0 = new PassportElementErrorFiles();
      String string0 = passportElementErrorFiles0.getMessage();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PassportElementErrorFiles passportElementErrorFiles0 = new PassportElementErrorFiles();
      passportElementErrorFiles0.setMessage("");
      String string0 = passportElementErrorFiles0.getMessage();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      PassportElementErrorFiles passportElementErrorFiles0 = new PassportElementErrorFiles("Message parameter can't be empty", linkedList0, "Message parameter can't be empty");
      List<String> list0 = passportElementErrorFiles0.getFileHashes();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PassportElementErrorFiles passportElementErrorFiles0 = new PassportElementErrorFiles();
      // Undeclared exception!
      try { 
        passportElementErrorFiles0.setType((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      PassportElementErrorFiles passportElementErrorFiles0 = new PassportElementErrorFiles("PassportElementErrorFile{source='file', type='", linkedList0, "PassportElementErrorFile{source='file', type='");
      // Undeclared exception!
      try { 
        passportElementErrorFiles0.setMessage((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PassportElementErrorFiles passportElementErrorFiles0 = new PassportElementErrorFiles();
      // Undeclared exception!
      try { 
        passportElementErrorFiles0.setFileHashes((List<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PassportElementErrorFiles passportElementErrorFiles0 = new PassportElementErrorFiles();
      // Undeclared exception!
      try { 
        passportElementErrorFiles0.addFileHash((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      PassportElementErrorFiles passportElementErrorFiles0 = null;
      try {
        passportElementErrorFiles0 = new PassportElementErrorFiles("", linkedList0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      PassportElementErrorFiles passportElementErrorFiles0 = new PassportElementErrorFiles("", linkedList0, "E6~%:h]J");
      PassportElementErrorFiles passportElementErrorFiles1 = passportElementErrorFiles0.addFileHash("E6~%:h]J");
      try { 
        passportElementErrorFiles1.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Type parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.objects.passport.dataerror.PassportElementErrorFiles", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PassportElementErrorFiles passportElementErrorFiles0 = new PassportElementErrorFiles();
      PassportElementErrorFiles passportElementErrorFiles1 = passportElementErrorFiles0.addFileHash("end index");
      PassportElementErrorFiles passportElementErrorFiles2 = passportElementErrorFiles1.setMessage("end index");
      try { 
        passportElementErrorFiles2.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Type parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.objects.passport.dataerror.PassportElementErrorFiles", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PassportElementErrorFiles passportElementErrorFiles0 = new PassportElementErrorFiles();
      passportElementErrorFiles0.setMessage("");
      PassportElementErrorFiles passportElementErrorFiles1 = passportElementErrorFiles0.addFileHash("");
      try { 
        passportElementErrorFiles1.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Message parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.objects.passport.dataerror.PassportElementErrorFiles", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PassportElementErrorFiles passportElementErrorFiles0 = new PassportElementErrorFiles();
      passportElementErrorFiles0.addFileHash("y`[");
      try { 
        passportElementErrorFiles0.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Message parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.objects.passport.dataerror.PassportElementErrorFiles", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      PassportElementErrorFiles passportElementErrorFiles0 = new PassportElementErrorFiles("PassportElementErrorFile{source='file', type='", linkedList0, "PassportElementErrorFile{source='file', type='");
      linkedList0.add("PassportElementErrorFile{source='file', type='");
      passportElementErrorFiles0.validate();
      assertEquals("file", passportElementErrorFiles0.getSource());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      PassportElementErrorFiles passportElementErrorFiles0 = new PassportElementErrorFiles("PassportElementErrorFile{source='file', type='", linkedList0, "PassportElementErrorFile{source='file', type='");
      try { 
        passportElementErrorFiles0.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File hash parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.objects.passport.dataerror.PassportElementErrorFiles", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PassportElementErrorFiles passportElementErrorFiles0 = new PassportElementErrorFiles();
      try { 
        passportElementErrorFiles0.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File hash parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.objects.passport.dataerror.PassportElementErrorFiles", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PassportElementErrorFiles passportElementErrorFiles0 = new PassportElementErrorFiles();
      passportElementErrorFiles0.addFileHash("h");
      List<String> list0 = passportElementErrorFiles0.getFileHashes();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      PassportElementErrorFiles passportElementErrorFiles0 = new PassportElementErrorFiles("PassportElementErrorFile{source='file', type='", linkedList0, "PassportElementErrorFile{source='file', type='");
      String string0 = passportElementErrorFiles0.getSource();
      assertEquals("file", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      PassportElementErrorFiles passportElementErrorFiles0 = new PassportElementErrorFiles("PassportElementErrorFile{source='file', type='", linkedList0, "PassportElementErrorFile{source='file', type='");
      String string0 = passportElementErrorFiles0.toString();
      assertEquals("PassportElementErrorFile{source='file', type='PassportElementErrorFile{source='file', type='', fileHashes='[]', message='PassportElementErrorFile{source='file', type=''}", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      PassportElementErrorFiles passportElementErrorFiles0 = new PassportElementErrorFiles("PassportElementErrorFile{source='file', type='", linkedList0, "PassportElementErrorFile{source='file', type='");
      String string0 = passportElementErrorFiles0.getType();
      assertEquals("PassportElementErrorFile{source='file', type='", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      PassportElementErrorFiles passportElementErrorFiles0 = new PassportElementErrorFiles("PassportElementErrorFile{source='file', type='", linkedList0, "PassportElementErrorFile{source='file', type='");
      PassportElementErrorFiles passportElementErrorFiles1 = passportElementErrorFiles0.setFileHashes(linkedList0);
      assertSame(passportElementErrorFiles0, passportElementErrorFiles1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PassportElementErrorFiles passportElementErrorFiles0 = new PassportElementErrorFiles();
      List<String> list0 = passportElementErrorFiles0.getFileHashes();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      PassportElementErrorFiles passportElementErrorFiles0 = new PassportElementErrorFiles("PassportElementErrorFile{source='file', type='", linkedList0, "PassportElementErrorFile{source='file', type='");
      String string0 = passportElementErrorFiles0.getMessage();
      assertEquals("PassportElementErrorFile{source='file', type='", string0);
  }
}
