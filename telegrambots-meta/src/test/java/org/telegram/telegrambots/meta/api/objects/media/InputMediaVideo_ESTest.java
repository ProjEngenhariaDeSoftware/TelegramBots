/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 26 13:44:32 GMT 2018
 */

package org.telegram.telegrambots.meta.api.objects.media;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.InputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;
import org.telegram.telegrambots.meta.api.objects.InputFile;
import org.telegram.telegrambots.meta.api.objects.media.InputMediaVideo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class InputMediaVideo_ESTest extends InputMediaVideo_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      InputMediaVideo inputMediaVideo0 = new InputMediaVideo("", ">cUh.$5M !&'M`lH@ N");
      MockFile mockFile0 = new MockFile("thumb");
      inputMediaVideo0.setMedia((File) mockFile0, "");
      Integer integer0 = new Integer((-922));
      InputMediaVideo inputMediaVideo1 = inputMediaVideo0.setWidth(integer0);
      assertEquals((-922), (int)inputMediaVideo1.getWidth());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      InputMediaVideo inputMediaVideo0 = new InputMediaVideo();
      MockFile mockFile0 = new MockFile("supports_streaming", "thumb");
      inputMediaVideo0.setMedia((File) mockFile0, "type");
      InputFile inputFile0 = new InputFile();
      InputMediaVideo inputMediaVideo1 = inputMediaVideo0.setThumb(inputFile0);
      assertNull(inputMediaVideo1.getDuration());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      InputMediaVideo inputMediaVideo0 = new InputMediaVideo("", ">cUh.$5M !&'M`lH@ N");
      MockFile mockFile0 = new MockFile("thumb");
      inputMediaVideo0.setMedia((File) mockFile0, "");
      InputMediaVideo inputMediaVideo1 = inputMediaVideo0.setSupportsStreaming((Boolean) null);
      assertSame(inputMediaVideo0, inputMediaVideo1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      InputMediaVideo inputMediaVideo0 = new InputMediaVideo();
      Integer integer0 = new Integer((-1));
      MockFile mockFile0 = new MockFile("supports_streaming", "thumb");
      inputMediaVideo0.setMedia((File) mockFile0, "type");
      InputMediaVideo inputMediaVideo1 = inputMediaVideo0.setHeight(integer0);
      assertNull(inputMediaVideo1.getDuration());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      InputMediaVideo inputMediaVideo0 = new InputMediaVideo();
      InputMediaVideo inputMediaVideo1 = inputMediaVideo0.setMedia((InputStream) null, "NON_EMPTY");
      Integer integer0 = new Integer(5);
      InputMediaVideo inputMediaVideo2 = inputMediaVideo1.setDuration(integer0);
      assertSame(inputMediaVideo2, inputMediaVideo0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      InputMediaVideo inputMediaVideo0 = new InputMediaVideo("gA*gw\"0!9G+@2z*~>8", "L;rc#_C=f;<");
      Integer integer0 = new Integer((-2298));
      inputMediaVideo0.setWidth(integer0);
      Integer integer1 = inputMediaVideo0.getWidth();
      assertEquals((-2298), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      InputMediaVideo inputMediaVideo0 = new InputMediaVideo();
      Integer integer0 = new Integer(0);
      inputMediaVideo0.setWidth(integer0);
      Integer integer1 = inputMediaVideo0.getWidth();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      InputMediaVideo inputMediaVideo0 = new InputMediaVideo("", "");
      Integer integer0 = new Integer(3159);
      InputMediaVideo inputMediaVideo1 = inputMediaVideo0.setWidth(integer0);
      Integer integer1 = inputMediaVideo1.getWidth();
      assertEquals(3159, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      InputMediaVideo inputMediaVideo0 = new InputMediaVideo("22gxZu\"Dj3", "22gxZu\"Dj3");
      Integer integer0 = new Integer(3017);
      inputMediaVideo0.setWidth(integer0);
      Integer integer1 = inputMediaVideo0.getWidth();
      assertEquals(3017, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      InputMediaVideo inputMediaVideo0 = new InputMediaVideo();
      MockFile mockFile0 = new MockFile("", "org.telegram.telegrambots.meta.exceptions.TelegramApiValidationException");
      InputFile inputFile0 = new InputFile(mockFile0, ", parseMode='");
      InputMediaVideo inputMediaVideo1 = inputMediaVideo0.setThumb(inputFile0);
      InputFile inputFile1 = inputMediaVideo1.getThumb();
      assertTrue(inputFile1.isNew());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      InputMediaVideo inputMediaVideo0 = new InputMediaVideo();
      InputFile inputFile0 = new InputFile("thumb");
      InputMediaVideo inputMediaVideo1 = inputMediaVideo0.setThumb(inputFile0);
      InputFile inputFile1 = inputMediaVideo1.getThumb();
      assertSame(inputFile1, inputFile0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      InputMediaVideo inputMediaVideo0 = new InputMediaVideo();
      Boolean boolean0 = Boolean.TRUE;
      inputMediaVideo0.setSupportsStreaming(boolean0);
      Boolean boolean1 = inputMediaVideo0.getSupportsStreaming();
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      InputMediaVideo inputMediaVideo0 = new InputMediaVideo();
      Boolean boolean0 = Boolean.FALSE;
      inputMediaVideo0.setSupportsStreaming(boolean0);
      Boolean boolean1 = inputMediaVideo0.getSupportsStreaming();
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      InputMediaVideo inputMediaVideo0 = new InputMediaVideo("@~&/'C {3r", "@~&/'C {3r");
      Integer integer0 = new Integer(0);
      inputMediaVideo0.setHeight(integer0);
      Integer integer1 = inputMediaVideo0.getHeight();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      InputMediaVideo inputMediaVideo0 = new InputMediaVideo(", height=", "<RP;+2W:o");
      Integer integer0 = new Integer((-2210));
      inputMediaVideo0.setHeight(integer0);
      Integer integer1 = inputMediaVideo0.getHeight();
      assertEquals((-2210), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      InputMediaVideo inputMediaVideo0 = new InputMediaVideo();
      Integer integer0 = new Integer(3564);
      inputMediaVideo0.setHeight(integer0);
      Integer integer1 = inputMediaVideo0.getHeight();
      assertEquals(3564, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      InputMediaVideo inputMediaVideo0 = new InputMediaVideo();
      Integer integer0 = new Integer(0);
      inputMediaVideo0.setDuration(integer0);
      Integer integer1 = inputMediaVideo0.getDuration();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      InputMediaVideo inputMediaVideo0 = new InputMediaVideo();
      Integer integer0 = new Integer(5);
      inputMediaVideo0.setDuration(integer0);
      Integer integer1 = inputMediaVideo0.getDuration();
      assertEquals(5, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      InputMediaVideo inputMediaVideo0 = new InputMediaVideo("", "");
      Integer integer0 = new Integer((-119));
      InputMediaVideo inputMediaVideo1 = inputMediaVideo0.setDuration(integer0);
      Integer integer1 = inputMediaVideo1.getDuration();
      assertEquals((-119), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      InputMediaVideo inputMediaVideo0 = new InputMediaVideo("InputMediaVideo{width=", "InputMediaVideo{width=");
      inputMediaVideo0.setMedia("");
      try { 
        inputMediaVideo0.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Media can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.objects.media.InputMedia", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      InputMediaVideo inputMediaVideo0 = new InputMediaVideo();
      Boolean boolean0 = inputMediaVideo0.getSupportsStreaming();
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      InputMediaVideo inputMediaVideo0 = new InputMediaVideo();
      Integer integer0 = inputMediaVideo0.getHeight();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      InputMediaVideo inputMediaVideo0 = new InputMediaVideo("InputMediaVideo{width=", "InputMediaVideo{width=");
      String string0 = inputMediaVideo0.toString();
      assertEquals("InputMediaVideo{width=null, height=null, duration=null, supportsStreaming=null} InputMedia{media='InputMediaVideo{width=', caption='InputMediaVideo{width=', parseMode='null', isNewMedia=false, mediaName='null', newMediaFile=null, newMediaStream=null}", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      InputMediaVideo inputMediaVideo0 = new InputMediaVideo();
      Integer integer0 = inputMediaVideo0.getWidth();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      InputMediaVideo inputMediaVideo0 = new InputMediaVideo();
      Integer integer0 = inputMediaVideo0.getDuration();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      InputMediaVideo inputMediaVideo0 = new InputMediaVideo("InputMediaVideo{width=", "InputMediaVideo{width=");
      inputMediaVideo0.validate();
      assertNull(inputMediaVideo0.getHeight());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      InputMediaVideo inputMediaVideo0 = new InputMediaVideo();
      InputFile inputFile0 = inputMediaVideo0.getThumb();
      assertNull(inputFile0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      InputMediaVideo inputMediaVideo0 = new InputMediaVideo("{Q~1T!sX1YNh64", "{Q~1T!sX1YNh64");
      String string0 = inputMediaVideo0.getType();
      assertEquals("video", string0);
  }
}
