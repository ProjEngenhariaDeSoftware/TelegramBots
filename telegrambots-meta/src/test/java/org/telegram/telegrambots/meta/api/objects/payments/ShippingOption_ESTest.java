/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 26 13:03:56 GMT 2018
 */

package org.telegram.telegrambots.meta.api.objects.payments;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.telegram.telegrambots.meta.api.objects.payments.LabeledPrice;
import org.telegram.telegrambots.meta.api.objects.payments.ShippingOption;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ShippingOption_ESTest extends ShippingOption_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<LabeledPrice> linkedList0 = new LinkedList<LabeledPrice>();
      ShippingOption shippingOption0 = new ShippingOption("?NB$AR_dF(_", "?NB$AR_dF(_", linkedList0);
      String string0 = shippingOption0.getTitle();
      assertEquals("?NB$AR_dF(_", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<LabeledPrice> linkedList0 = new LinkedList<LabeledPrice>();
      ShippingOption shippingOption0 = new ShippingOption("K", "", linkedList0);
      String string0 = shippingOption0.getTitle();
      assertEquals("K", shippingOption0.getId());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ShippingOption shippingOption0 = new ShippingOption();
      List<LabeledPrice> list0 = shippingOption0.getPrices();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<LabeledPrice> linkedList0 = new LinkedList<LabeledPrice>();
      ShippingOption shippingOption0 = new ShippingOption("<||+@TQKK4gq", "<||+@TQKK4gq", linkedList0);
      Integer integer0 = new Integer(1);
      LabeledPrice labeledPrice0 = new LabeledPrice("<||+@TQKK4gq", integer0);
      linkedList0.add(labeledPrice0);
      List<LabeledPrice> list0 = shippingOption0.getPrices();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ShippingOption shippingOption0 = new ShippingOption();
      String string0 = shippingOption0.getId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<LabeledPrice> linkedList0 = new LinkedList<LabeledPrice>();
      ShippingOption shippingOption0 = new ShippingOption("^7t:5[oO&:Q7iTo", "^7t:5[oO&:Q7iTo", linkedList0);
      ShippingOption shippingOption1 = shippingOption0.setId("");
      String string0 = shippingOption1.getId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ShippingOption shippingOption0 = new ShippingOption();
      // Undeclared exception!
      try { 
        shippingOption0.setTitle((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ShippingOption shippingOption0 = new ShippingOption();
      // Undeclared exception!
      try { 
        shippingOption0.setPrices((List<LabeledPrice>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ShippingOption shippingOption0 = null;
      try {
        shippingOption0 = new ShippingOption((String) null, (String) null, (List<LabeledPrice>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<LabeledPrice> linkedList0 = new LinkedList<LabeledPrice>();
      ShippingOption shippingOption0 = new ShippingOption("<||+@TQKK4gq", "<||+@TQKK4gq", linkedList0);
      Integer integer0 = new Integer(1);
      LabeledPrice labeledPrice0 = new LabeledPrice("<||+@TQKK4gq", integer0);
      linkedList0.add(labeledPrice0);
      shippingOption0.validate();
      assertEquals("<||+@TQKK4gq", shippingOption0.getTitle());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<LabeledPrice> linkedList0 = new LinkedList<LabeledPrice>();
      LabeledPrice labeledPrice0 = linkedList0.pollLast();
      linkedList0.offerFirst(labeledPrice0);
      ShippingOption shippingOption0 = new ShippingOption("a)_PRE]L1$?75Z}2Niw", "a)_PRE]L1$?75Z}2Niw", linkedList0);
      // Undeclared exception!
      try { 
        shippingOption0.validate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.telegram.telegrambots.meta.api.objects.payments.ShippingOption", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<LabeledPrice> linkedList0 = new LinkedList<LabeledPrice>();
      ShippingOption shippingOption0 = new ShippingOption("K", "", linkedList0);
      try { 
        shippingOption0.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Title parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.objects.payments.ShippingOption", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ShippingOption shippingOption0 = new ShippingOption();
      shippingOption0.setId("Fl\"9tUsMn]tCKNNm%");
      try { 
        shippingOption0.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Title parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.objects.payments.ShippingOption", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ShippingOption shippingOption0 = new ShippingOption();
      ShippingOption shippingOption1 = shippingOption0.setId("");
      try { 
        shippingOption1.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Id parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.objects.payments.ShippingOption", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<LabeledPrice> linkedList0 = new LinkedList<LabeledPrice>();
      ShippingOption shippingOption0 = new ShippingOption("a)_PRE]L1$?75Z}2Niw", "a)_PRE]L1$?75Z}2Niw", linkedList0);
      try { 
        shippingOption0.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Prices parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.objects.payments.ShippingOption", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ShippingOption shippingOption0 = new ShippingOption();
      try { 
        shippingOption0.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Id parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.objects.payments.ShippingOption", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<LabeledPrice> linkedList0 = new LinkedList<LabeledPrice>();
      ShippingOption shippingOption0 = new ShippingOption("a)_PRE]L1$?75Z}2Niw", "a)_PRE]L1$?75Z}2Niw", linkedList0);
      String string0 = shippingOption0.toString();
      assertEquals("ShippingOption{id='a)_PRE]L1$?75Z}2Niw', title='a)_PRE]L1$?75Z}2Niw', prices=[]}", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ShippingOption shippingOption0 = new ShippingOption();
      // Undeclared exception!
      try { 
        shippingOption0.setId((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ShippingOption shippingOption0 = new ShippingOption();
      String string0 = shippingOption0.getTitle();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<LabeledPrice> linkedList0 = new LinkedList<LabeledPrice>();
      ShippingOption shippingOption0 = new ShippingOption("<||+@TQKK4gq", "<||+@TQKK4gq", linkedList0);
      ShippingOption shippingOption1 = shippingOption0.setPrices(linkedList0);
      assertSame(shippingOption1, shippingOption0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedList<LabeledPrice> linkedList0 = new LinkedList<LabeledPrice>();
      ShippingOption shippingOption0 = new ShippingOption("K", "", linkedList0);
      String string0 = shippingOption0.getId();
      assertEquals("K", string0);
      assertEquals("", shippingOption0.getTitle());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedList<LabeledPrice> linkedList0 = new LinkedList<LabeledPrice>();
      ShippingOption shippingOption0 = new ShippingOption("<||+@TQKK4gq", "<||+@TQKK4gq", linkedList0);
      List<LabeledPrice> list0 = shippingOption0.getPrices();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ShippingOption shippingOption0 = new ShippingOption();
      ShippingOption shippingOption1 = shippingOption0.setTitle(", prices=");
      ShippingOption shippingOption2 = shippingOption1.setId("lAhW6");
      try { 
        shippingOption2.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Prices parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.objects.payments.ShippingOption", e);
      }
  }
}
