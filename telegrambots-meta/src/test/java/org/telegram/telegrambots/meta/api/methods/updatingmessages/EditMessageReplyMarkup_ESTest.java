/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 26 13:01:10 GMT 2018
 */

package org.telegram.telegrambots.meta.api.methods.updatingmessages;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageReplyMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EditMessageReplyMarkup_ESTest extends EditMessageReplyMarkup_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      EditMessageReplyMarkup editMessageReplyMarkup0 = new EditMessageReplyMarkup();
      Integer integer0 = new Integer((-1133));
      editMessageReplyMarkup0.setMessageId(integer0);
      Integer integer1 = editMessageReplyMarkup0.getMessageId();
      assertEquals((-1133), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      EditMessageReplyMarkup editMessageReplyMarkup0 = new EditMessageReplyMarkup();
      Integer integer0 = new Integer(0);
      editMessageReplyMarkup0.setMessageId(integer0);
      Integer integer1 = editMessageReplyMarkup0.getMessageId();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EditMessageReplyMarkup editMessageReplyMarkup0 = new EditMessageReplyMarkup();
      Integer integer0 = new Integer(49);
      editMessageReplyMarkup0.setMessageId(integer0);
      Integer integer1 = editMessageReplyMarkup0.getMessageId();
      assertEquals(49, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      EditMessageReplyMarkup editMessageReplyMarkup0 = new EditMessageReplyMarkup();
      EditMessageReplyMarkup editMessageReplyMarkup1 = editMessageReplyMarkup0.setInlineMessageId("cG");
      String string0 = editMessageReplyMarkup1.getInlineMessageId();
      assertEquals("cG", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EditMessageReplyMarkup editMessageReplyMarkup0 = new EditMessageReplyMarkup();
      editMessageReplyMarkup0.setInlineMessageId("");
      String string0 = editMessageReplyMarkup0.getInlineMessageId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      EditMessageReplyMarkup editMessageReplyMarkup0 = new EditMessageReplyMarkup();
      EditMessageReplyMarkup editMessageReplyMarkup1 = editMessageReplyMarkup0.setChatId("com.fasterxml.jackson.databind.deser.DefaultDeserializationContext$Impl");
      String string0 = editMessageReplyMarkup1.getChatId();
      assertEquals("com.fasterxml.jackson.databind.deser.DefaultDeserializationContext$Impl", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      EditMessageReplyMarkup editMessageReplyMarkup0 = new EditMessageReplyMarkup();
      EditMessageReplyMarkup editMessageReplyMarkup1 = editMessageReplyMarkup0.setChatId("");
      String string0 = editMessageReplyMarkup1.getChatId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      EditMessageReplyMarkup editMessageReplyMarkup0 = new EditMessageReplyMarkup();
      InlineKeyboardMarkup inlineKeyboardMarkup0 = new InlineKeyboardMarkup();
      LinkedList<List<InlineKeyboardButton>> linkedList0 = new LinkedList<List<InlineKeyboardButton>>();
      linkedList0.addLast((List<InlineKeyboardButton>) null);
      InlineKeyboardMarkup inlineKeyboardMarkup1 = inlineKeyboardMarkup0.setKeyboard(linkedList0);
      editMessageReplyMarkup0.setReplyMarkup(inlineKeyboardMarkup1);
      editMessageReplyMarkup0.setInlineMessageId("editmessagereplymarkup");
      // Undeclared exception!
      try { 
        editMessageReplyMarkup0.validate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      EditMessageReplyMarkup editMessageReplyMarkup0 = new EditMessageReplyMarkup();
      // Undeclared exception!
      try { 
        editMessageReplyMarkup0.setChatId((Long) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageReplyMarkup", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EditMessageReplyMarkup editMessageReplyMarkup0 = new EditMessageReplyMarkup();
      // Undeclared exception!
      try { 
        editMessageReplyMarkup0.deserializeResponse("{})");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageReplyMarkup", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EditMessageReplyMarkup editMessageReplyMarkup0 = new EditMessageReplyMarkup();
      Integer integer0 = new Integer(288);
      InlineKeyboardMarkup inlineKeyboardMarkup0 = new InlineKeyboardMarkup();
      EditMessageReplyMarkup editMessageReplyMarkup1 = editMessageReplyMarkup0.setReplyMarkup(inlineKeyboardMarkup0);
      EditMessageReplyMarkup editMessageReplyMarkup2 = editMessageReplyMarkup1.setMessageId(integer0);
      Long long0 = Long.valueOf((long) 288);
      editMessageReplyMarkup2.setChatId(long0);
      editMessageReplyMarkup2.validate();
      assertSame(editMessageReplyMarkup2, editMessageReplyMarkup1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EditMessageReplyMarkup editMessageReplyMarkup0 = new EditMessageReplyMarkup();
      editMessageReplyMarkup0.setInlineMessageId("editmessagereplymarkup");
      EditMessageReplyMarkup editMessageReplyMarkup1 = editMessageReplyMarkup0.setChatId("editmessagereplymarkup");
      try { 
        editMessageReplyMarkup1.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // ChatId parameter must be empty if inlineMessageId is provided
         //
         verifyException("org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageReplyMarkup", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      EditMessageReplyMarkup editMessageReplyMarkup0 = new EditMessageReplyMarkup();
      Integer integer0 = new Integer(288);
      EditMessageReplyMarkup editMessageReplyMarkup1 = editMessageReplyMarkup0.setMessageId(integer0);
      Long long0 = Long.valueOf((long) 288);
      editMessageReplyMarkup1.setChatId(long0);
      editMessageReplyMarkup1.validate();
      assertSame(editMessageReplyMarkup1, editMessageReplyMarkup0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      EditMessageReplyMarkup editMessageReplyMarkup0 = new EditMessageReplyMarkup();
      try { 
        editMessageReplyMarkup0.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // ChatId parameter can't be empty if inlineMessageId is not present
         //
         verifyException("org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageReplyMarkup", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      EditMessageReplyMarkup editMessageReplyMarkup0 = new EditMessageReplyMarkup();
      try { 
        editMessageReplyMarkup0.deserializeResponse("editmessagereplymarkup");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unable to deserialize response
         //
         verifyException("org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageReplyMarkup", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      EditMessageReplyMarkup editMessageReplyMarkup0 = new EditMessageReplyMarkup();
      String string0 = editMessageReplyMarkup0.toString();
      assertEquals("EditMessageReplyMarkup{chatId=null, messageId=null, inlineMessageId=null, replyMarkup=null}", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      EditMessageReplyMarkup editMessageReplyMarkup0 = new EditMessageReplyMarkup();
      Integer integer0 = editMessageReplyMarkup0.getMessageId();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      EditMessageReplyMarkup editMessageReplyMarkup0 = new EditMessageReplyMarkup();
      InlineKeyboardMarkup inlineKeyboardMarkup0 = editMessageReplyMarkup0.getReplyMarkup();
      assertNull(inlineKeyboardMarkup0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      EditMessageReplyMarkup editMessageReplyMarkup0 = new EditMessageReplyMarkup();
      Long long0 = Long.valueOf((long) 288);
      editMessageReplyMarkup0.setChatId(long0);
      try { 
        editMessageReplyMarkup0.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // MessageId parameter can't be empty if inlineMessageId is not present
         //
         verifyException("org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageReplyMarkup", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      EditMessageReplyMarkup editMessageReplyMarkup0 = new EditMessageReplyMarkup();
      String string0 = editMessageReplyMarkup0.getInlineMessageId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      EditMessageReplyMarkup editMessageReplyMarkup0 = new EditMessageReplyMarkup();
      String string0 = editMessageReplyMarkup0.getMethod();
      assertEquals("editmessagereplymarkup", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      EditMessageReplyMarkup editMessageReplyMarkup0 = new EditMessageReplyMarkup();
      Integer integer0 = new Integer(0);
      editMessageReplyMarkup0.setMessageId(integer0);
      EditMessageReplyMarkup editMessageReplyMarkup1 = editMessageReplyMarkup0.setInlineMessageId("");
      try { 
        editMessageReplyMarkup1.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // MessageId parameter must be empty if inlineMessageId is provided
         //
         verifyException("org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageReplyMarkup", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      EditMessageReplyMarkup editMessageReplyMarkup0 = new EditMessageReplyMarkup();
      InlineKeyboardMarkup inlineKeyboardMarkup0 = new InlineKeyboardMarkup();
      EditMessageReplyMarkup editMessageReplyMarkup1 = editMessageReplyMarkup0.setReplyMarkup(inlineKeyboardMarkup0);
      InlineKeyboardMarkup inlineKeyboardMarkup1 = editMessageReplyMarkup1.getReplyMarkup();
      assertSame(inlineKeyboardMarkup0, inlineKeyboardMarkup1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      EditMessageReplyMarkup editMessageReplyMarkup0 = new EditMessageReplyMarkup();
      String string0 = editMessageReplyMarkup0.getChatId();
      assertNull(string0);
  }
}
