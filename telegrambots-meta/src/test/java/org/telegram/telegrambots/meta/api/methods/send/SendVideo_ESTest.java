/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 26 13:29:01 GMT 2018
 */

package org.telegram.telegrambots.meta.api.methods.send;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.InputStream;
import java.io.PipedInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;
import org.telegram.telegrambots.meta.api.methods.send.SendVideo;
import org.telegram.telegrambots.meta.api.objects.InputFile;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ForceReplyKeyboard;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboard;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SendVideo_ESTest extends SendVideo_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SendVideo sendVideo0 = new SendVideo();
      Integer integer0 = new Integer((-5247));
      sendVideo0.setWidth(integer0);
      Integer integer1 = sendVideo0.getWidth();
      assertEquals((-5247), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SendVideo sendVideo0 = new SendVideo();
      Integer integer0 = new Integer(0);
      SendVideo sendVideo1 = sendVideo0.setWidth(integer0);
      Integer integer1 = sendVideo1.getWidth();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SendVideo sendVideo0 = new SendVideo();
      Integer integer0 = new Integer(14);
      sendVideo0.setWidth(integer0);
      Integer integer1 = sendVideo0.getWidth();
      assertEquals(14, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SendVideo sendVideo0 = new SendVideo();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      sendVideo0.setVideo("", (InputStream) pipedInputStream0);
      InputFile inputFile0 = sendVideo0.getVideo();
      assertEquals("", inputFile0.getMediaName());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SendVideo sendVideo0 = new SendVideo();
      SendVideo sendVideo1 = sendVideo0.setVideo("width");
      InputFile inputFile0 = sendVideo1.getVideo();
      assertEquals("width", inputFile0.getAttachName());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SendVideo sendVideo0 = new SendVideo();
      InputFile inputFile0 = new InputFile("supports_streaming");
      MockFile mockFile0 = new MockFile("nFId&TQ|jVl{Q~Z7", "duration");
      InputFile inputFile1 = inputFile0.setMedia((File) mockFile0, "reply_to_message_id");
      SendVideo sendVideo1 = sendVideo0.setThumb(inputFile1);
      InputFile inputFile2 = sendVideo1.getThumb();
      assertSame(inputFile1, inputFile2);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SendVideo sendVideo0 = new SendVideo();
      InputFile inputFile0 = new InputFile("a");
      sendVideo0.setThumb(inputFile0);
      InputFile inputFile1 = sendVideo0.getThumb();
      assertEquals("a", inputFile1.getAttachName());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SendVideo sendVideo0 = new SendVideo();
      Boolean boolean0 = new Boolean(true);
      sendVideo0.setSupportsStreaming(boolean0);
      Boolean boolean1 = sendVideo0.getSupportsStreaming();
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SendVideo sendVideo0 = new SendVideo();
      Integer integer0 = new Integer((-1));
      sendVideo0.setReplyToMessageId(integer0);
      Integer integer1 = sendVideo0.getReplyToMessageId();
      assertEquals((-1), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SendVideo sendVideo0 = new SendVideo();
      Integer integer0 = new Integer(123);
      SendVideo sendVideo1 = sendVideo0.setReplyToMessageId(integer0);
      Integer integer1 = sendVideo1.getReplyToMessageId();
      assertEquals(123, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SendVideo sendVideo0 = new SendVideo();
      InlineKeyboardMarkup inlineKeyboardMarkup0 = new InlineKeyboardMarkup();
      SendVideo sendVideo1 = sendVideo0.setReplyMarkup(inlineKeyboardMarkup0);
      ReplyKeyboard replyKeyboard0 = sendVideo1.getReplyMarkup();
      assertSame(replyKeyboard0, inlineKeyboardMarkup0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SendVideo sendVideo0 = new SendVideo();
      sendVideo0.setParseMode("p48oB?^3i");
      String string0 = sendVideo0.getParseMode();
      assertEquals("p48oB?^3i", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SendVideo sendVideo0 = new SendVideo();
      sendVideo0.setParseMode("");
      String string0 = sendVideo0.getParseMode();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SendVideo sendVideo0 = new SendVideo();
      Integer integer0 = new Integer(0);
      sendVideo0.setHeight(integer0);
      Integer integer1 = sendVideo0.getHeight();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SendVideo sendVideo0 = new SendVideo();
      Integer integer0 = new Integer(2619);
      sendVideo0.setHeight(integer0);
      Integer integer1 = sendVideo0.getHeight();
      assertEquals(2619, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SendVideo sendVideo0 = new SendVideo();
      Integer integer0 = new Integer(0);
      sendVideo0.setDuration(integer0);
      Integer integer1 = sendVideo0.getDuration();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SendVideo sendVideo0 = new SendVideo();
      Integer integer0 = new Integer((byte)33);
      sendVideo0.setDuration(integer0);
      Integer integer1 = sendVideo0.getDuration();
      assertEquals(33, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SendVideo sendVideo0 = new SendVideo();
      Integer integer0 = new Integer((-1291));
      sendVideo0.setDuration(integer0);
      Integer integer1 = sendVideo0.getDuration();
      assertEquals((-1291), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SendVideo sendVideo0 = new SendVideo();
      SendVideo sendVideo1 = sendVideo0.setChatId("71\"({E;fE6INj/w'KC");
      String string0 = sendVideo1.getChatId();
      assertEquals("71\"({E;fE6INj/w'KC", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SendVideo sendVideo0 = new SendVideo();
      SendVideo sendVideo1 = sendVideo0.setChatId("");
      String string0 = sendVideo1.getChatId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SendVideo sendVideo0 = new SendVideo();
      sendVideo0.setCaption("");
      String string0 = sendVideo0.getCaption();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SendVideo sendVideo0 = new SendVideo();
      // Undeclared exception!
      try { 
        sendVideo0.setVideo((InputFile) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // video cannot be null!
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SendVideo sendVideo0 = new SendVideo();
      // Undeclared exception!
      try { 
        sendVideo0.setVideo((String) null, (InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // videoName cannot be null!
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SendVideo sendVideo0 = new SendVideo();
      // Undeclared exception!
      try { 
        sendVideo0.setChatId((Long) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SendVideo sendVideo0 = new SendVideo();
      try { 
        sendVideo0.deserializeResponse("parse_mode");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unable to deserialize response
         //
         verifyException("org.telegram.telegrambots.meta.api.methods.send.SendVideo", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SendVideo sendVideo0 = new SendVideo();
      MockFile mockFile0 = new MockFile("INFER_PROPERTY_MUTATORS", "supports_streaming");
      ForceReplyKeyboard forceReplyKeyboard0 = new ForceReplyKeyboard();
      SendVideo sendVideo1 = sendVideo0.setReplyMarkup(forceReplyKeyboard0);
      sendVideo1.setVideo((File) mockFile0);
      Long long0 = new Long(0L);
      SendVideo sendVideo2 = sendVideo1.setChatId(long0);
      sendVideo2.validate();
      assertNull(sendVideo2.getCaption());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SendVideo sendVideo0 = new SendVideo();
      MockFile mockFile0 = new MockFile("INFER_PROPERTY_MUTATORS", "supports_streaming");
      sendVideo0.setVideo((File) mockFile0);
      Long long0 = new Long(0L);
      SendVideo sendVideo1 = sendVideo0.setChatId(long0);
      sendVideo1.validate();
      assertNull(sendVideo1.getReplyToMessageId());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SendVideo sendVideo0 = new SendVideo();
      try { 
        sendVideo0.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // ChatId parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.methods.send.SendVideo", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SendVideo sendVideo0 = new SendVideo();
      // Undeclared exception!
      try { 
        sendVideo0.deserializeResponse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.JsonFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SendVideo sendVideo0 = new SendVideo();
      Long long0 = new Long(0L);
      SendVideo sendVideo1 = sendVideo0.setChatId(long0);
      try { 
        sendVideo1.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Video parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.methods.send.SendVideo", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SendVideo sendVideo0 = new SendVideo();
      Integer integer0 = new Integer((-1826));
      sendVideo0.setHeight(integer0);
      Integer integer1 = sendVideo0.getHeight();
      assertEquals((-1826), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SendVideo sendVideo0 = new SendVideo();
      InputFile inputFile0 = sendVideo0.getVideo();
      assertNull(inputFile0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SendVideo sendVideo0 = new SendVideo();
      Integer integer0 = sendVideo0.getWidth();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SendVideo sendVideo0 = new SendVideo();
      sendVideo0.disableNotification();
      Boolean boolean0 = sendVideo0.getDisableNotification();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SendVideo sendVideo0 = new SendVideo();
      Integer integer0 = new Integer(0);
      SendVideo sendVideo1 = sendVideo0.setReplyToMessageId(integer0);
      Integer integer1 = sendVideo1.getReplyToMessageId();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SendVideo sendVideo0 = new SendVideo();
      Integer integer0 = sendVideo0.getReplyToMessageId();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SendVideo sendVideo0 = new SendVideo();
      InputFile inputFile0 = new InputFile();
      SendVideo sendVideo1 = sendVideo0.setVideo(inputFile0);
      assertNull(sendVideo1.getChatId());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SendVideo sendVideo0 = new SendVideo();
      Integer integer0 = sendVideo0.getDuration();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SendVideo sendVideo0 = new SendVideo();
      Integer integer0 = sendVideo0.getHeight();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SendVideo sendVideo0 = new SendVideo();
      SendVideo sendVideo1 = sendVideo0.setCaption("not a valid Double value");
      String string0 = sendVideo1.getCaption();
      assertEquals("not a valid Double value", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SendVideo sendVideo0 = new SendVideo();
      sendVideo0.enableNotification();
      Boolean boolean0 = sendVideo0.getDisableNotification();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SendVideo sendVideo0 = new SendVideo();
      InputFile inputFile0 = new InputFile();
      SendVideo sendVideo1 = sendVideo0.setThumb(inputFile0);
      SendVideo sendVideo2 = sendVideo1.setChatId("video");
      sendVideo2.setVideo("disable_notification");
      try { 
        sendVideo0.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // File_id can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.objects.InputFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SendVideo sendVideo0 = new SendVideo();
      String string0 = sendVideo0.getChatId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SendVideo sendVideo0 = new SendVideo();
      String string0 = sendVideo0.toString();
      assertEquals("SendVideo{chatId='null', video=null, duration=null, caption='null', width=null, height=null, supportsStreaming=null, disableNotification=null, replyToMessageId=null, replyMarkup=null, parseMode='null', thumb=null}", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      SendVideo sendVideo0 = new SendVideo();
      InputFile inputFile0 = sendVideo0.getThumb();
      assertNull(inputFile0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SendVideo sendVideo0 = new SendVideo();
      // Undeclared exception!
      try { 
        sendVideo0.setVideo((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file cannot be null!
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SendVideo sendVideo0 = new SendVideo();
      Boolean boolean0 = new Boolean("");
      SendVideo sendVideo1 = sendVideo0.setSupportsStreaming(boolean0);
      Boolean boolean1 = sendVideo1.getSupportsStreaming();
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SendVideo sendVideo0 = new SendVideo();
      Boolean boolean0 = sendVideo0.getSupportsStreaming();
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      SendVideo sendVideo0 = new SendVideo();
      Boolean boolean0 = sendVideo0.getDisableNotification();
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SendVideo sendVideo0 = new SendVideo();
      String string0 = sendVideo0.getParseMode();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      SendVideo sendVideo0 = new SendVideo();
      ReplyKeyboard replyKeyboard0 = sendVideo0.getReplyMarkup();
      assertNull(replyKeyboard0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      SendVideo sendVideo0 = new SendVideo();
      String string0 = sendVideo0.getCaption();
      assertNull(string0);
  }
}
