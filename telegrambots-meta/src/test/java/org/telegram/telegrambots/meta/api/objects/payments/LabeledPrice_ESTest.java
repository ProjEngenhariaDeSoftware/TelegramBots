/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 26 13:38:28 GMT 2018
 */

package org.telegram.telegrambots.meta.api.objects.payments;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.telegram.telegrambots.meta.api.objects.payments.LabeledPrice;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LabeledPrice_ESTest extends LabeledPrice_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LabeledPrice labeledPrice0 = new LabeledPrice();
      labeledPrice0.setLabel("Q8UG8HK;qx:58?{?8Rm");
      String string0 = labeledPrice0.getLabel();
      assertEquals("Q8UG8HK;qx:58?{?8Rm", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer(0);
      LabeledPrice labeledPrice0 = new LabeledPrice("", integer0);
      String string0 = labeledPrice0.getLabel();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer(0);
      LabeledPrice labeledPrice0 = new LabeledPrice(";", integer0);
      Integer integer1 = labeledPrice0.getAmount();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = Integer.valueOf(1);
      LabeledPrice labeledPrice0 = new LabeledPrice("%D=Npl_J$8o?GzV", integer0);
      Integer integer1 = labeledPrice0.getAmount();
      assertEquals(1, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      LabeledPrice labeledPrice0 = new LabeledPrice("org.telegram.telegrambots.meta.api.objects.payments.LabeledPrice", integer0);
      Integer integer1 = labeledPrice0.getAmount();
      assertEquals((-1), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LabeledPrice labeledPrice0 = new LabeledPrice();
      // Undeclared exception!
      try { 
        labeledPrice0.setLabel((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LabeledPrice labeledPrice0 = new LabeledPrice();
      // Undeclared exception!
      try { 
        labeledPrice0.setAmount((Integer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer((-1197));
      LabeledPrice labeledPrice0 = null;
      try {
        labeledPrice0 = new LabeledPrice((String) null, integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LabeledPrice labeledPrice0 = new LabeledPrice();
      labeledPrice0.setLabel("Q8UG8HK;qx:58?{?8Rm");
      try { 
        labeledPrice0.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Amount parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.objects.payments.LabeledPrice", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LabeledPrice labeledPrice0 = new LabeledPrice();
      try { 
        labeledPrice0.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Label parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.objects.payments.LabeledPrice", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = new Integer((-783));
      LabeledPrice labeledPrice0 = new LabeledPrice("e", integer0);
      labeledPrice0.validate();
      assertEquals("e", labeledPrice0.getLabel());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LabeledPrice labeledPrice0 = new LabeledPrice();
      labeledPrice0.setLabel("");
      try { 
        labeledPrice0.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Label parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.objects.payments.LabeledPrice", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LabeledPrice labeledPrice0 = new LabeledPrice();
      String string0 = labeledPrice0.toString();
      assertEquals("LabeledPrice{label='null', amount=null}", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LabeledPrice labeledPrice0 = new LabeledPrice();
      String string0 = labeledPrice0.getLabel();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LabeledPrice labeledPrice0 = new LabeledPrice();
      Integer integer0 = Integer.getInteger("", (-20));
      labeledPrice0.setAmount(integer0);
      assertEquals((-20), (int)labeledPrice0.getAmount());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LabeledPrice labeledPrice0 = new LabeledPrice();
      Integer integer0 = labeledPrice0.getAmount();
      assertNull(integer0);
  }
}
