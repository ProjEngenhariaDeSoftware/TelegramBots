/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 26 13:32:07 GMT 2018
 */

package org.telegram.telegrambots.meta.api.methods.send;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FileDescriptor;
import java.io.InputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.junit.runner.RunWith;
import org.telegram.telegrambots.meta.api.methods.send.SendSticker;
import org.telegram.telegrambots.meta.api.objects.InputFile;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboard;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SendSticker_ESTest extends SendSticker_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SendSticker sendSticker0 = new SendSticker();
      InputFile inputFile0 = new InputFile("");
      SendSticker sendSticker1 = sendSticker0.setSticker(inputFile0);
      assertNull(sendSticker1.getDisableNotification());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SendSticker sendSticker0 = new SendSticker();
      File file0 = MockFile.createTempFile("gRHs<", "Attempt to write plain `java.math.BigDecimal` (see JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN) with illegal scale (%d): needs to be between [-%d, %d]");
      SendSticker sendSticker1 = sendSticker0.setSticker(file0);
      assertSame(sendSticker1, sendSticker0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SendSticker sendSticker0 = new SendSticker();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      sendSticker0.setSticker("G&@m1J-03cR", (InputStream) mockFileInputStream0);
      InputFile inputFile0 = sendSticker0.getSticker();
      assertEquals("attach://G&@m1J-03cR", inputFile0.getAttachName());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SendSticker sendSticker0 = new SendSticker();
      sendSticker0.setSticker("DEFAULT_INCLUSION");
      InputFile inputFile0 = sendSticker0.getSticker();
      assertEquals("DEFAULT_INCLUSION", inputFile0.getAttachName());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SendSticker sendSticker0 = new SendSticker();
      Integer integer0 = new Integer(125);
      sendSticker0.setReplyToMessageId(integer0);
      Integer integer1 = sendSticker0.getReplyToMessageId();
      assertEquals(125, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SendSticker sendSticker0 = new SendSticker();
      Integer integer0 = new Integer((-1));
      sendSticker0.setReplyToMessageId(integer0);
      Integer integer1 = sendSticker0.getReplyToMessageId();
      assertEquals((-1), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SendSticker sendSticker0 = new SendSticker();
      InlineKeyboardMarkup inlineKeyboardMarkup0 = new InlineKeyboardMarkup();
      SendSticker sendSticker1 = sendSticker0.setReplyMarkup(inlineKeyboardMarkup0);
      ReplyKeyboard replyKeyboard0 = sendSticker1.getReplyMarkup();
      assertSame(inlineKeyboardMarkup0, replyKeyboard0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SendSticker sendSticker0 = new SendSticker();
      Long long0 = new Long(871L);
      sendSticker0.setChatId(long0);
      String string0 = sendSticker0.getChatId();
      assertEquals("871", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SendSticker sendSticker0 = new SendSticker();
      sendSticker0.setChatId("");
      String string0 = sendSticker0.getChatId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SendSticker sendSticker0 = new SendSticker();
      // Undeclared exception!
      try { 
        sendSticker0.setSticker("", (InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // inputStream cannot be null!
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SendSticker sendSticker0 = new SendSticker();
      // Undeclared exception!
      try { 
        sendSticker0.setChatId((Long) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SendSticker sendSticker0 = new SendSticker();
      // Undeclared exception!
      try { 
        sendSticker0.deserializeResponse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.JsonFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SendSticker sendSticker0 = new SendSticker();
      SendSticker sendSticker1 = sendSticker0.setChatId("disable_notification");
      ReplyKeyboardMarkup replyKeyboardMarkup0 = new ReplyKeyboardMarkup();
      SendSticker sendSticker2 = sendSticker1.setReplyMarkup(replyKeyboardMarkup0);
      sendSticker2.setSticker("sticker");
      sendSticker0.validate();
      assertEquals("disable_notification", sendSticker0.getChatId());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SendSticker sendSticker0 = new SendSticker();
      SendSticker sendSticker1 = sendSticker0.setChatId("disable_notification");
      sendSticker0.setSticker("sticker");
      sendSticker1.validate();
      assertEquals("disable_notification", sendSticker1.getChatId());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SendSticker sendSticker0 = new SendSticker();
      try { 
        sendSticker0.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // ChatId parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.methods.send.SendSticker", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SendSticker sendSticker0 = new SendSticker();
      sendSticker0.setChatId("sendsticker");
      try { 
        sendSticker0.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Sticker parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.methods.send.SendSticker", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SendSticker sendSticker0 = new SendSticker();
      String string0 = sendSticker0.getChatId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SendSticker sendSticker0 = new SendSticker();
      sendSticker0.enableNotification();
      Boolean boolean0 = sendSticker0.getDisableNotification();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SendSticker sendSticker0 = new SendSticker();
      String string0 = sendSticker0.toString();
      assertEquals("SendSticker{chatId='null', sticker=null, disableNotification=null, replyToMessageId=null, replyMarkup=null}", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SendSticker sendSticker0 = new SendSticker();
      Boolean boolean0 = sendSticker0.getDisableNotification();
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SendSticker sendSticker0 = new SendSticker();
      // Undeclared exception!
      try { 
        sendSticker0.setSticker((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file cannot be null!
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SendSticker sendSticker0 = new SendSticker();
      InputFile inputFile0 = sendSticker0.getSticker();
      assertNull(inputFile0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SendSticker sendSticker0 = new SendSticker();
      Integer integer0 = sendSticker0.getReplyToMessageId();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SendSticker sendSticker0 = new SendSticker();
      sendSticker0.disableNotification();
      Boolean boolean0 = sendSticker0.getDisableNotification();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SendSticker sendSticker0 = new SendSticker();
      ReplyKeyboard replyKeyboard0 = sendSticker0.getReplyMarkup();
      assertNull(replyKeyboard0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SendSticker sendSticker0 = new SendSticker();
      // Undeclared exception!
      try { 
        sendSticker0.setSticker((InputFile) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // sticker cannot be null!
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SendSticker sendSticker0 = new SendSticker();
      Integer integer0 = new Integer(0);
      sendSticker0.setReplyToMessageId(integer0);
      Integer integer1 = sendSticker0.getReplyToMessageId();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SendSticker sendSticker0 = new SendSticker();
      try { 
        sendSticker0.deserializeResponse("0");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unable to deserialize response
         //
         verifyException("org.telegram.telegrambots.meta.api.methods.send.SendSticker", e);
      }
  }
}
