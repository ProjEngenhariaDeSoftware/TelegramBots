/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 26 13:00:56 GMT 2018
 */

package org.telegram.telegrambots.meta.api.objects.passport.dataerror;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.telegram.telegrambots.meta.api.objects.passport.dataerror.PassportElementErrorDataField;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PassportElementErrorDataField_ESTest extends PassportElementErrorDataField_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PassportElementErrorDataField passportElementErrorDataField0 = new PassportElementErrorDataField("x", "x", "x", "x");
      String string0 = passportElementErrorDataField0.getType();
      assertEquals("x", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PassportElementErrorDataField passportElementErrorDataField0 = new PassportElementErrorDataField("", "", "", "");
      String string0 = passportElementErrorDataField0.getType();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PassportElementErrorDataField passportElementErrorDataField0 = new PassportElementErrorDataField();
      String string0 = passportElementErrorDataField0.getMessage();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PassportElementErrorDataField passportElementErrorDataField0 = new PassportElementErrorDataField("", "", "", "");
      String string0 = passportElementErrorDataField0.getMessage();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PassportElementErrorDataField passportElementErrorDataField0 = new PassportElementErrorDataField();
      String string0 = passportElementErrorDataField0.getFieldName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PassportElementErrorDataField passportElementErrorDataField0 = new PassportElementErrorDataField("", "", "", "");
      String string0 = passportElementErrorDataField0.getFieldName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PassportElementErrorDataField passportElementErrorDataField0 = new PassportElementErrorDataField("vOiq", "vOiq", "vOiq", "vOiq");
      String string0 = passportElementErrorDataField0.getDataHash();
      assertEquals("vOiq", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PassportElementErrorDataField passportElementErrorDataField0 = new PassportElementErrorDataField();
      PassportElementErrorDataField passportElementErrorDataField1 = passportElementErrorDataField0.setDataHash("");
      String string0 = passportElementErrorDataField1.getDataHash();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PassportElementErrorDataField passportElementErrorDataField0 = new PassportElementErrorDataField();
      // Undeclared exception!
      try { 
        passportElementErrorDataField0.setType((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PassportElementErrorDataField passportElementErrorDataField0 = new PassportElementErrorDataField();
      // Undeclared exception!
      try { 
        passportElementErrorDataField0.setMessage((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PassportElementErrorDataField passportElementErrorDataField0 = new PassportElementErrorDataField();
      // Undeclared exception!
      try { 
        passportElementErrorDataField0.setFieldName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PassportElementErrorDataField passportElementErrorDataField0 = new PassportElementErrorDataField("Gw-T{RNi", "WTr _ph2`K)y", "z^vt_dI0fb[#D|/e~B", "WTr _ph2`K)y");
      // Undeclared exception!
      try { 
        passportElementErrorDataField0.setDataHash((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PassportElementErrorDataField passportElementErrorDataField0 = null;
      try {
        passportElementErrorDataField0 = new PassportElementErrorDataField("`k*A>'Mr&6", "`k*A>'Mr&6", "`k*A>'Mr&6", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PassportElementErrorDataField passportElementErrorDataField0 = new PassportElementErrorDataField("$:%rM5Jzmu", "$:%rM5Jzmu", "$:%rM5Jzmu", "$:%rM5Jzmu");
      PassportElementErrorDataField passportElementErrorDataField1 = passportElementErrorDataField0.setType("");
      try { 
        passportElementErrorDataField1.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Type parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.objects.passport.dataerror.PassportElementErrorDataField", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PassportElementErrorDataField passportElementErrorDataField0 = new PassportElementErrorDataField("J", "J", "J", "J");
      passportElementErrorDataField0.validate();
      assertEquals("J", passportElementErrorDataField0.getFieldName());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PassportElementErrorDataField passportElementErrorDataField0 = new PassportElementErrorDataField("JSG(z'Yojyz0_g<WR", "JSG(z'Yojyz0_g<WR", "JSG(z'Yojyz0_g<WR", "");
      try { 
        passportElementErrorDataField0.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Message parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.objects.passport.dataerror.PassportElementErrorDataField", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PassportElementErrorDataField passportElementErrorDataField0 = new PassportElementErrorDataField();
      PassportElementErrorDataField passportElementErrorDataField1 = passportElementErrorDataField0.setFieldName("{j#7'JJ");
      PassportElementErrorDataField passportElementErrorDataField2 = passportElementErrorDataField1.setDataHash("{j#7'JJ");
      passportElementErrorDataField2.setMessage("PassportElementErrorDataField{source='data', type='null', fieldName='{j#7'JJ', dataHash='{j#7'JJ', message='null'}");
      try { 
        passportElementErrorDataField1.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Type parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.objects.passport.dataerror.PassportElementErrorDataField", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PassportElementErrorDataField passportElementErrorDataField0 = new PassportElementErrorDataField();
      PassportElementErrorDataField passportElementErrorDataField1 = passportElementErrorDataField0.setFieldName("{j#7'JJ");
      passportElementErrorDataField1.setDataHash("{j#7'JJ");
      try { 
        passportElementErrorDataField1.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Message parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.objects.passport.dataerror.PassportElementErrorDataField", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PassportElementErrorDataField passportElementErrorDataField0 = new PassportElementErrorDataField("", "", "", "");
      try { 
        passportElementErrorDataField0.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Field Name parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.objects.passport.dataerror.PassportElementErrorDataField", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PassportElementErrorDataField passportElementErrorDataField0 = new PassportElementErrorDataField();
      PassportElementErrorDataField passportElementErrorDataField1 = passportElementErrorDataField0.setFieldName("{j#7'JJ");
      try { 
        passportElementErrorDataField1.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Data hash parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.objects.passport.dataerror.PassportElementErrorDataField", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PassportElementErrorDataField passportElementErrorDataField0 = new PassportElementErrorDataField();
      try { 
        passportElementErrorDataField0.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Field Name parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.objects.passport.dataerror.PassportElementErrorDataField", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PassportElementErrorDataField passportElementErrorDataField0 = new PassportElementErrorDataField();
      String string0 = passportElementErrorDataField0.getSource();
      assertEquals("data", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PassportElementErrorDataField passportElementErrorDataField0 = new PassportElementErrorDataField();
      String string0 = passportElementErrorDataField0.getDataHash();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PassportElementErrorDataField passportElementErrorDataField0 = new PassportElementErrorDataField();
      String string0 = passportElementErrorDataField0.toString();
      assertEquals("PassportElementErrorDataField{source='data', type='null', fieldName='null', dataHash='null', message='null'}", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PassportElementErrorDataField passportElementErrorDataField0 = new PassportElementErrorDataField("J", "J", "J", "J");
      String string0 = passportElementErrorDataField0.getMessage();
      assertEquals("J", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PassportElementErrorDataField passportElementErrorDataField0 = new PassportElementErrorDataField("J", "J", "J", "J");
      String string0 = passportElementErrorDataField0.getFieldName();
      assertEquals("J", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PassportElementErrorDataField passportElementErrorDataField0 = new PassportElementErrorDataField();
      String string0 = passportElementErrorDataField0.getType();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PassportElementErrorDataField passportElementErrorDataField0 = new PassportElementErrorDataField("", "", "", "");
      passportElementErrorDataField0.setFieldName("VdaoQa0#z");
      try { 
        passportElementErrorDataField0.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Data hash parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.objects.passport.dataerror.PassportElementErrorDataField", e);
      }
  }
}
