/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 26 13:11:38 GMT 2018
 */

package org.telegram.telegrambots.meta.api.objects.inlinequery.result;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.telegram.telegrambots.meta.api.objects.inlinequery.inputmessagecontent.InputMessageContent;
import org.telegram.telegrambots.meta.api.objects.inlinequery.inputmessagecontent.InputTextMessageContent;
import org.telegram.telegrambots.meta.api.objects.inlinequery.result.InlineQueryResultAudio;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class InlineQueryResultAudio_ESTest extends InlineQueryResultAudio_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      InlineQueryResultAudio inlineQueryResultAudio0 = new InlineQueryResultAudio();
      InlineQueryResultAudio inlineQueryResultAudio1 = inlineQueryResultAudio0.setTitle(".7o5Oa)j3p");
      String string0 = inlineQueryResultAudio1.getTitle();
      assertEquals(".7o5Oa)j3p", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      InlineQueryResultAudio inlineQueryResultAudio0 = new InlineQueryResultAudio();
      InlineQueryResultAudio inlineQueryResultAudio1 = inlineQueryResultAudio0.setTitle("");
      String string0 = inlineQueryResultAudio1.getTitle();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      InlineQueryResultAudio inlineQueryResultAudio0 = new InlineQueryResultAudio();
      InlineQueryResultAudio inlineQueryResultAudio1 = inlineQueryResultAudio0.setPerformer("gQopF2bXM&'ney:[d%+");
      String string0 = inlineQueryResultAudio1.getPerformer();
      assertEquals("gQopF2bXM&'ney:[d%+", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      InlineQueryResultAudio inlineQueryResultAudio0 = new InlineQueryResultAudio();
      InlineQueryResultAudio inlineQueryResultAudio1 = inlineQueryResultAudio0.setPerformer("");
      String string0 = inlineQueryResultAudio1.getPerformer();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      InlineQueryResultAudio inlineQueryResultAudio0 = new InlineQueryResultAudio();
      InlineQueryResultAudio inlineQueryResultAudio1 = inlineQueryResultAudio0.setParseMode("audio_duration");
      String string0 = inlineQueryResultAudio1.getParseMode();
      assertEquals("audio_duration", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      InlineQueryResultAudio inlineQueryResultAudio0 = new InlineQueryResultAudio();
      InlineQueryResultAudio inlineQueryResultAudio1 = inlineQueryResultAudio0.setParseMode("");
      String string0 = inlineQueryResultAudio1.getParseMode();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      InlineQueryResultAudio inlineQueryResultAudio0 = new InlineQueryResultAudio();
      inlineQueryResultAudio0.setId("html");
      String string0 = inlineQueryResultAudio0.getId();
      assertEquals("html", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      InlineQueryResultAudio inlineQueryResultAudio0 = new InlineQueryResultAudio();
      InlineQueryResultAudio inlineQueryResultAudio1 = inlineQueryResultAudio0.setId("");
      String string0 = inlineQueryResultAudio1.getId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      InlineQueryResultAudio inlineQueryResultAudio0 = new InlineQueryResultAudio();
      InlineQueryResultAudio inlineQueryResultAudio1 = inlineQueryResultAudio0.setCaption("%3r$/i!FfA");
      String string0 = inlineQueryResultAudio1.getCaption();
      assertEquals("%3r$/i!FfA", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      InlineQueryResultAudio inlineQueryResultAudio0 = new InlineQueryResultAudio();
      InlineQueryResultAudio inlineQueryResultAudio1 = inlineQueryResultAudio0.setCaption("");
      String string0 = inlineQueryResultAudio1.getCaption();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      InlineQueryResultAudio inlineQueryResultAudio0 = new InlineQueryResultAudio();
      InlineQueryResultAudio inlineQueryResultAudio1 = inlineQueryResultAudio0.setAudioUrl("]");
      String string0 = inlineQueryResultAudio1.getAudioUrl();
      assertEquals("]", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      InlineQueryResultAudio inlineQueryResultAudio0 = new InlineQueryResultAudio();
      inlineQueryResultAudio0.setAudioUrl("");
      String string0 = inlineQueryResultAudio0.getAudioUrl();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      InlineQueryResultAudio inlineQueryResultAudio0 = new InlineQueryResultAudio();
      Integer integer0 = new Integer(1);
      inlineQueryResultAudio0.setAudioDuration(integer0);
      Integer integer1 = inlineQueryResultAudio0.getAudioDuration();
      assertEquals(1, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      InlineQueryResultAudio inlineQueryResultAudio0 = new InlineQueryResultAudio();
      Integer integer0 = new Integer(0);
      inlineQueryResultAudio0.setAudioDuration(integer0);
      Integer integer1 = inlineQueryResultAudio0.getAudioDuration();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      InlineQueryResultAudio inlineQueryResultAudio0 = new InlineQueryResultAudio();
      Integer integer0 = new Integer((-757));
      InlineQueryResultAudio inlineQueryResultAudio1 = inlineQueryResultAudio0.setAudioDuration(integer0);
      Integer integer1 = inlineQueryResultAudio1.getAudioDuration();
      assertEquals((-757), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      InlineQueryResultAudio inlineQueryResultAudio0 = new InlineQueryResultAudio();
      Integer integer0 = new Integer((-1));
      InlineQueryResultAudio inlineQueryResultAudio1 = inlineQueryResultAudio0.setAudioDuration(integer0);
      Integer integer1 = inlineQueryResultAudio1.getAudioDuration();
      assertEquals((-1), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      InlineQueryResultAudio inlineQueryResultAudio0 = new InlineQueryResultAudio();
      InlineQueryResultAudio inlineQueryResultAudio1 = inlineQueryResultAudio0.setId("]");
      InlineKeyboardMarkup inlineKeyboardMarkup0 = new InlineKeyboardMarkup();
      inlineQueryResultAudio0.setReplyMarkup(inlineKeyboardMarkup0);
      inlineQueryResultAudio1.setAudioUrl("]");
      inlineQueryResultAudio1.validate();
      assertNull(inlineQueryResultAudio1.getCaption());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      InlineQueryResultAudio inlineQueryResultAudio0 = new InlineQueryResultAudio();
      InlineQueryResultAudio inlineQueryResultAudio1 = inlineQueryResultAudio0.setAudioUrl("html");
      InputTextMessageContent inputTextMessageContent0 = new InputTextMessageContent();
      InlineQueryResultAudio inlineQueryResultAudio2 = inlineQueryResultAudio1.setInputMessageContent(inputTextMessageContent0);
      InlineQueryResultAudio inlineQueryResultAudio3 = inlineQueryResultAudio2.setId("html");
      try { 
        inlineQueryResultAudio3.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // MessageText parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.objects.inlinequery.inputmessagecontent.InputTextMessageContent", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      InlineQueryResultAudio inlineQueryResultAudio0 = new InlineQueryResultAudio();
      inlineQueryResultAudio0.setId("DL");
      inlineQueryResultAudio0.setAudioUrl("");
      try { 
        inlineQueryResultAudio0.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // AudioUrl parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.objects.inlinequery.result.InlineQueryResultAudio", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      InlineQueryResultAudio inlineQueryResultAudio0 = new InlineQueryResultAudio();
      inlineQueryResultAudio0.setId("");
      try { 
        inlineQueryResultAudio0.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // ID parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.objects.inlinequery.result.InlineQueryResultAudio", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      InlineQueryResultAudio inlineQueryResultAudio0 = new InlineQueryResultAudio();
      try { 
        inlineQueryResultAudio0.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // ID parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.objects.inlinequery.result.InlineQueryResultAudio", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      InlineQueryResultAudio inlineQueryResultAudio0 = new InlineQueryResultAudio();
      inlineQueryResultAudio0.setAudioUrl("html");
      InlineQueryResultAudio inlineQueryResultAudio1 = inlineQueryResultAudio0.setId("html");
      inlineQueryResultAudio1.validate();
      assertEquals("html", inlineQueryResultAudio1.getAudioUrl());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      InlineQueryResultAudio inlineQueryResultAudio0 = new InlineQueryResultAudio();
      Integer integer0 = inlineQueryResultAudio0.getAudioDuration();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      InlineQueryResultAudio inlineQueryResultAudio0 = new InlineQueryResultAudio();
      String string0 = inlineQueryResultAudio0.getParseMode();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      InlineQueryResultAudio inlineQueryResultAudio0 = new InlineQueryResultAudio();
      String string0 = inlineQueryResultAudio0.getAudioUrl();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      InlineQueryResultAudio inlineQueryResultAudio0 = new InlineQueryResultAudio();
      String string0 = inlineQueryResultAudio0.getTitle();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      InlineQueryResultAudio inlineQueryResultAudio0 = new InlineQueryResultAudio();
      InlineQueryResultAudio inlineQueryResultAudio1 = inlineQueryResultAudio0.setId("html");
      try { 
        inlineQueryResultAudio1.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // AudioUrl parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.objects.inlinequery.result.InlineQueryResultAudio", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      InlineQueryResultAudio inlineQueryResultAudio0 = new InlineQueryResultAudio();
      String string0 = inlineQueryResultAudio0.getId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      InlineQueryResultAudio inlineQueryResultAudio0 = new InlineQueryResultAudio();
      String string0 = inlineQueryResultAudio0.getCaption();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      InlineQueryResultAudio inlineQueryResultAudio0 = new InlineQueryResultAudio();
      InputTextMessageContent inputTextMessageContent0 = new InputTextMessageContent();
      InlineQueryResultAudio inlineQueryResultAudio1 = inlineQueryResultAudio0.setInputMessageContent(inputTextMessageContent0);
      InputTextMessageContent inputTextMessageContent1 = (InputTextMessageContent)inlineQueryResultAudio1.getInputMessageContent();
      assertNull(inputTextMessageContent1.getDisableWebPagePreview());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      InlineQueryResultAudio inlineQueryResultAudio0 = new InlineQueryResultAudio();
      String string0 = inlineQueryResultAudio0.toString();
      assertEquals("InlineQueryResultAudio{type='audio', id='null', audioUrl='null', title='null', performer='null', audioDuration=null, inputMessageContent=null, replyMarkup=null, caption='null', parseMode='null'}", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      InlineQueryResultAudio inlineQueryResultAudio0 = new InlineQueryResultAudio();
      InlineKeyboardMarkup inlineKeyboardMarkup0 = new InlineKeyboardMarkup();
      inlineQueryResultAudio0.setReplyMarkup(inlineKeyboardMarkup0);
      InlineKeyboardMarkup inlineKeyboardMarkup1 = inlineQueryResultAudio0.getReplyMarkup();
      assertSame(inlineKeyboardMarkup1, inlineKeyboardMarkup0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      InlineQueryResultAudio inlineQueryResultAudio0 = new InlineQueryResultAudio();
      InputMessageContent inputMessageContent0 = inlineQueryResultAudio0.getInputMessageContent();
      assertNull(inputMessageContent0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      InlineQueryResultAudio inlineQueryResultAudio0 = new InlineQueryResultAudio();
      String string0 = inlineQueryResultAudio0.getPerformer();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      InlineQueryResultAudio inlineQueryResultAudio0 = new InlineQueryResultAudio();
      String string0 = inlineQueryResultAudio0.getType();
      assertEquals("audio", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      InlineQueryResultAudio inlineQueryResultAudio0 = new InlineQueryResultAudio();
      InlineKeyboardMarkup inlineKeyboardMarkup0 = inlineQueryResultAudio0.getReplyMarkup();
      assertNull(inlineKeyboardMarkup0);
  }
}
