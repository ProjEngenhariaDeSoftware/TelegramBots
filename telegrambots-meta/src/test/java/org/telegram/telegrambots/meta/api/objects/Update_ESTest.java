/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 26 12:57:03 GMT 2018
 */

package org.telegram.telegrambots.meta.api.objects;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.telegram.telegrambots.meta.api.objects.CallbackQuery;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.inlinequery.ChosenInlineQuery;
import org.telegram.telegrambots.meta.api.objects.inlinequery.InlineQuery;
import org.telegram.telegrambots.meta.api.objects.payments.PreCheckoutQuery;
import org.telegram.telegrambots.meta.api.objects.payments.ShippingQuery;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Update_ESTest extends Update_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Update update0 = new Update();
      boolean boolean0 = update0.hasPreCheckoutQuery();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Update update0 = new Update();
      boolean boolean0 = update0.hasShippingQuery();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Update update0 = new Update();
      boolean boolean0 = update0.hasEditedChannelPost();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Update update0 = new Update();
      boolean boolean0 = update0.hasChannelPost();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Update update0 = new Update();
      boolean boolean0 = update0.hasEditedMessage();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Update update0 = new Update();
      boolean boolean0 = update0.hasCallbackQuery();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Update update0 = new Update();
      boolean boolean0 = update0.hasChosenInlineQuery();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Update update0 = new Update();
      boolean boolean0 = update0.hasInlineQuery();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Update update0 = new Update();
      boolean boolean0 = update0.hasMessage();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Update update0 = new Update();
      Message message0 = update0.getChannelPost();
      assertNull(message0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Update update0 = new Update();
      PreCheckoutQuery preCheckoutQuery0 = update0.getPreCheckoutQuery();
      assertNull(preCheckoutQuery0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Update update0 = new Update();
      Message message0 = update0.getEditedChannelPost();
      assertNull(message0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Update update0 = new Update();
      Message message0 = update0.getMessage();
      assertNull(message0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Update update0 = new Update();
      Integer integer0 = update0.getUpdateId();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Update update0 = new Update();
      String string0 = update0.toString();
      assertEquals("Update{updateId=null, message=null, inlineQuery=null, chosenInlineQuery=null, callbackQuery=null, editedMessage=null, channelPost=null, editedChannelPost=null, shippingQuery=null, preCheckoutQuery=null}", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Update update0 = new Update();
      ShippingQuery shippingQuery0 = update0.getShippingQuery();
      assertNull(shippingQuery0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Update update0 = new Update();
      Message message0 = update0.getEditedMessage();
      assertNull(message0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Update update0 = new Update();
      CallbackQuery callbackQuery0 = update0.getCallbackQuery();
      assertNull(callbackQuery0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Update update0 = new Update();
      InlineQuery inlineQuery0 = update0.getInlineQuery();
      assertNull(inlineQuery0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Update update0 = new Update();
      ChosenInlineQuery chosenInlineQuery0 = update0.getChosenInlineQuery();
      assertNull(chosenInlineQuery0);
  }
}
