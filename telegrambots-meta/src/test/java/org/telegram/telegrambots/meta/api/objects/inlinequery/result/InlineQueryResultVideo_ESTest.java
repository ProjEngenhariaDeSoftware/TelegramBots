/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 26 13:15:30 GMT 2018
 */

package org.telegram.telegrambots.meta.api.objects.inlinequery.result;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.telegram.telegrambots.meta.api.objects.inlinequery.inputmessagecontent.InputMessageContent;
import org.telegram.telegrambots.meta.api.objects.inlinequery.inputmessagecontent.InputVenueMessageContent;
import org.telegram.telegrambots.meta.api.objects.inlinequery.result.InlineQueryResultVideo;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class InlineQueryResultVideo_ESTest extends InlineQueryResultVideo_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      InlineQueryResultVideo inlineQueryResultVideo0 = new InlineQueryResultVideo();
      Integer integer0 = new Integer(0);
      inlineQueryResultVideo0.setVideoWidth(integer0);
      Integer integer1 = inlineQueryResultVideo0.getVideoWidth();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      InlineQueryResultVideo inlineQueryResultVideo0 = new InlineQueryResultVideo();
      Integer integer0 = new Integer(60);
      inlineQueryResultVideo0.setVideoWidth(integer0);
      Integer integer1 = inlineQueryResultVideo0.getVideoWidth();
      assertEquals(60, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      InlineQueryResultVideo inlineQueryResultVideo0 = new InlineQueryResultVideo();
      Integer integer0 = new Integer((-274));
      inlineQueryResultVideo0.setVideoWidth(integer0);
      Integer integer1 = inlineQueryResultVideo0.getVideoWidth();
      assertEquals((-274), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      InlineQueryResultVideo inlineQueryResultVideo0 = new InlineQueryResultVideo();
      inlineQueryResultVideo0.setVideoUrl(",9}%SmqY;[`R");
      String string0 = inlineQueryResultVideo0.getVideoUrl();
      assertEquals(",9}%SmqY;[`R", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      InlineQueryResultVideo inlineQueryResultVideo0 = new InlineQueryResultVideo();
      inlineQueryResultVideo0.setVideoUrl("");
      String string0 = inlineQueryResultVideo0.getVideoUrl();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      InlineQueryResultVideo inlineQueryResultVideo0 = new InlineQueryResultVideo();
      Integer integer0 = new Integer(0);
      inlineQueryResultVideo0.setVideoHeight(integer0);
      Integer integer1 = inlineQueryResultVideo0.getVideoHeight();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      InlineQueryResultVideo inlineQueryResultVideo0 = new InlineQueryResultVideo();
      Integer integer0 = new Integer((-1));
      inlineQueryResultVideo0.setVideoHeight(integer0);
      Integer integer1 = inlineQueryResultVideo0.getVideoHeight();
      assertEquals((-1), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      InlineQueryResultVideo inlineQueryResultVideo0 = new InlineQueryResultVideo();
      Integer integer0 = new Integer(39);
      inlineQueryResultVideo0.setVideoDuration(integer0);
      Integer integer1 = inlineQueryResultVideo0.getVideoDuration();
      assertEquals(39, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      InlineQueryResultVideo inlineQueryResultVideo0 = new InlineQueryResultVideo();
      Integer integer0 = new Integer(0);
      inlineQueryResultVideo0.setVideoDuration(integer0);
      Integer integer1 = inlineQueryResultVideo0.getVideoDuration();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      InlineQueryResultVideo inlineQueryResultVideo0 = new InlineQueryResultVideo();
      Integer integer0 = new Integer((-1244));
      inlineQueryResultVideo0.setVideoDuration(integer0);
      Integer integer1 = inlineQueryResultVideo0.getVideoDuration();
      assertEquals((-1244), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      InlineQueryResultVideo inlineQueryResultVideo0 = new InlineQueryResultVideo();
      Integer integer0 = new Integer((-2));
      inlineQueryResultVideo0.setVideoDuration(integer0);
      Integer integer1 = inlineQueryResultVideo0.getVideoDuration();
      assertEquals((-2), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      InlineQueryResultVideo inlineQueryResultVideo0 = new InlineQueryResultVideo();
      InlineQueryResultVideo inlineQueryResultVideo1 = inlineQueryResultVideo0.setTitle("fY(07iRXkPLzrgJ`");
      String string0 = inlineQueryResultVideo1.getTitle();
      assertEquals("fY(07iRXkPLzrgJ`", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      InlineQueryResultVideo inlineQueryResultVideo0 = new InlineQueryResultVideo();
      inlineQueryResultVideo0.setTitle("");
      String string0 = inlineQueryResultVideo0.getTitle();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      InlineQueryResultVideo inlineQueryResultVideo0 = new InlineQueryResultVideo();
      inlineQueryResultVideo0.setThumbUrl("m73T9w;8I4km");
      String string0 = inlineQueryResultVideo0.getThumbUrl();
      assertEquals("m73T9w;8I4km", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      InlineQueryResultVideo inlineQueryResultVideo0 = new InlineQueryResultVideo();
      inlineQueryResultVideo0.setThumbUrl("");
      String string0 = inlineQueryResultVideo0.getThumbUrl();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      InlineQueryResultVideo inlineQueryResultVideo0 = new InlineQueryResultVideo();
      inlineQueryResultVideo0.setParseMode("TA5b$P*@[J1ZU6v");
      String string0 = inlineQueryResultVideo0.getParseMode();
      assertEquals("TA5b$P*@[J1ZU6v", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      InlineQueryResultVideo inlineQueryResultVideo0 = new InlineQueryResultVideo();
      inlineQueryResultVideo0.setParseMode("");
      String string0 = inlineQueryResultVideo0.getParseMode();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      InlineQueryResultVideo inlineQueryResultVideo0 = new InlineQueryResultVideo();
      inlineQueryResultVideo0.setMimeType("):|tUkhd");
      String string0 = inlineQueryResultVideo0.getMimeType();
      assertEquals("):|tUkhd", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      InlineQueryResultVideo inlineQueryResultVideo0 = new InlineQueryResultVideo();
      InlineQueryResultVideo inlineQueryResultVideo1 = inlineQueryResultVideo0.setMimeType("");
      String string0 = inlineQueryResultVideo1.getMimeType();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      InlineQueryResultVideo inlineQueryResultVideo0 = new InlineQueryResultVideo();
      InlineQueryResultVideo inlineQueryResultVideo1 = inlineQueryResultVideo0.setId("w");
      String string0 = inlineQueryResultVideo1.getId();
      assertEquals("w", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      InlineQueryResultVideo inlineQueryResultVideo0 = new InlineQueryResultVideo();
      inlineQueryResultVideo0.setId("");
      String string0 = inlineQueryResultVideo0.getId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      InlineQueryResultVideo inlineQueryResultVideo0 = new InlineQueryResultVideo();
      inlineQueryResultVideo0.setDescription("org.telegram.telegrambots.meta.exceptions.TelegramApiValidationException");
      String string0 = inlineQueryResultVideo0.getDescription();
      assertEquals("org.telegram.telegrambots.meta.exceptions.TelegramApiValidationException", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      InlineQueryResultVideo inlineQueryResultVideo0 = new InlineQueryResultVideo();
      InlineQueryResultVideo inlineQueryResultVideo1 = inlineQueryResultVideo0.setDescription("");
      String string0 = inlineQueryResultVideo1.getDescription();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      InlineQueryResultVideo inlineQueryResultVideo0 = new InlineQueryResultVideo();
      InlineQueryResultVideo inlineQueryResultVideo1 = inlineQueryResultVideo0.setCaption("caption");
      String string0 = inlineQueryResultVideo1.getCaption();
      assertEquals("caption", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      InlineQueryResultVideo inlineQueryResultVideo0 = new InlineQueryResultVideo();
      InlineQueryResultVideo inlineQueryResultVideo1 = inlineQueryResultVideo0.setId("72(");
      InlineKeyboardMarkup inlineKeyboardMarkup0 = new InlineKeyboardMarkup();
      LinkedList<List<InlineKeyboardButton>> linkedList0 = new LinkedList<List<InlineKeyboardButton>>();
      InlineKeyboardMarkup inlineKeyboardMarkup1 = inlineKeyboardMarkup0.setKeyboard(linkedList0);
      InlineQueryResultVideo inlineQueryResultVideo2 = inlineQueryResultVideo0.setReplyMarkup(inlineKeyboardMarkup1);
      linkedList0.add((List<InlineKeyboardButton>) null);
      inlineQueryResultVideo2.setVideoUrl("?6%1M'o}yeM=s");
      // Undeclared exception!
      try { 
        inlineQueryResultVideo1.validate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      InlineQueryResultVideo inlineQueryResultVideo0 = new InlineQueryResultVideo();
      inlineQueryResultVideo0.setId("72(");
      InlineKeyboardMarkup inlineKeyboardMarkup0 = new InlineKeyboardMarkup();
      inlineQueryResultVideo0.setReplyMarkup(inlineKeyboardMarkup0);
      inlineQueryResultVideo0.setVideoUrl("?6%1M'o}yeM=s");
      inlineQueryResultVideo0.validate();
      assertNull(inlineQueryResultVideo0.getCaption());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      InlineQueryResultVideo inlineQueryResultVideo0 = new InlineQueryResultVideo();
      InlineQueryResultVideo inlineQueryResultVideo1 = inlineQueryResultVideo0.setId("#)wV7SRFQS<B");
      InputVenueMessageContent inputVenueMessageContent0 = new InputVenueMessageContent();
      inlineQueryResultVideo0.setInputMessageContent(inputVenueMessageContent0);
      inlineQueryResultVideo0.setVideoUrl("#)wV7SRFQS<B");
      try { 
        inlineQueryResultVideo1.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Latitude parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.objects.inlinequery.inputmessagecontent.InputVenueMessageContent", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      InlineQueryResultVideo inlineQueryResultVideo0 = new InlineQueryResultVideo();
      InlineQueryResultVideo inlineQueryResultVideo1 = inlineQueryResultVideo0.setId("72(");
      inlineQueryResultVideo0.setVideoUrl("?6%1M'o}yeM=s");
      inlineQueryResultVideo1.validate();
      assertSame(inlineQueryResultVideo0, inlineQueryResultVideo1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      InlineQueryResultVideo inlineQueryResultVideo0 = new InlineQueryResultVideo();
      InlineQueryResultVideo inlineQueryResultVideo1 = inlineQueryResultVideo0.setId("");
      try { 
        inlineQueryResultVideo1.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // ID parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.objects.inlinequery.result.InlineQueryResultVideo", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      InlineQueryResultVideo inlineQueryResultVideo0 = new InlineQueryResultVideo();
      try { 
        inlineQueryResultVideo0.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // ID parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.objects.inlinequery.result.InlineQueryResultVideo", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      InlineQueryResultVideo inlineQueryResultVideo0 = new InlineQueryResultVideo();
      String string0 = inlineQueryResultVideo0.getThumbUrl();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      InlineQueryResultVideo inlineQueryResultVideo0 = new InlineQueryResultVideo();
      Integer integer0 = inlineQueryResultVideo0.getVideoDuration();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      InlineQueryResultVideo inlineQueryResultVideo0 = new InlineQueryResultVideo();
      Integer integer0 = new Integer(95);
      InlineQueryResultVideo inlineQueryResultVideo1 = inlineQueryResultVideo0.setVideoHeight(integer0);
      Integer integer1 = inlineQueryResultVideo1.getVideoHeight();
      assertEquals(95, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      InlineQueryResultVideo inlineQueryResultVideo0 = new InlineQueryResultVideo();
      inlineQueryResultVideo0.setId("InlineQueryResultVideo{type='video', id='null', mimeType='u9IPBf>C+3T', videoUrl='', videoWidth=null, videoHeight=null, videoDuration=null, thumbUrl='u9IPBf>C+3T', title='null', description='null', caption='', inputMessageContent=null, replyMarkup=null, parseMode='null'}");
      try { 
        inlineQueryResultVideo0.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // VideoUrl parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.objects.inlinequery.result.InlineQueryResultVideo", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      InlineQueryResultVideo inlineQueryResultVideo0 = new InlineQueryResultVideo();
      InlineKeyboardMarkup inlineKeyboardMarkup0 = inlineQueryResultVideo0.getReplyMarkup();
      assertNull(inlineKeyboardMarkup0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      InlineQueryResultVideo inlineQueryResultVideo0 = new InlineQueryResultVideo();
      InputMessageContent inputMessageContent0 = inlineQueryResultVideo0.getInputMessageContent();
      assertNull(inputMessageContent0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      InlineQueryResultVideo inlineQueryResultVideo0 = new InlineQueryResultVideo();
      Integer integer0 = inlineQueryResultVideo0.getVideoWidth();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      InlineQueryResultVideo inlineQueryResultVideo0 = new InlineQueryResultVideo();
      inlineQueryResultVideo0.setVideoUrl("");
      inlineQueryResultVideo0.setId("InlineQueryResultVideo{type='video', id='null', mimeType='u9IPBf>C+3T', videoUrl='', videoWidth=null, videoHeight=null, videoDuration=null, thumbUrl='u9IPBf>C+3T', title='null', description='null', caption='', inputMessageContent=null, replyMarkup=null, parseMode='null'}");
      try { 
        inlineQueryResultVideo0.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // VideoUrl parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.objects.inlinequery.result.InlineQueryResultVideo", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      InlineQueryResultVideo inlineQueryResultVideo0 = new InlineQueryResultVideo();
      String string0 = inlineQueryResultVideo0.getParseMode();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      InlineQueryResultVideo inlineQueryResultVideo0 = new InlineQueryResultVideo();
      String string0 = inlineQueryResultVideo0.toString();
      assertEquals("InlineQueryResultVideo{type='video', id='null', mimeType='null', videoUrl='null', videoWidth=null, videoHeight=null, videoDuration=null, thumbUrl='null', title='null', description='null', caption='null', inputMessageContent=null, replyMarkup=null, parseMode='null'}", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      InlineQueryResultVideo inlineQueryResultVideo0 = new InlineQueryResultVideo();
      String string0 = inlineQueryResultVideo0.getType();
      assertEquals("video", string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      InlineQueryResultVideo inlineQueryResultVideo0 = new InlineQueryResultVideo();
      inlineQueryResultVideo0.setCaption("");
      String string0 = inlineQueryResultVideo0.getCaption();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      InlineQueryResultVideo inlineQueryResultVideo0 = new InlineQueryResultVideo();
      Integer integer0 = inlineQueryResultVideo0.getVideoHeight();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      InlineQueryResultVideo inlineQueryResultVideo0 = new InlineQueryResultVideo();
      String string0 = inlineQueryResultVideo0.getDescription();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      InlineQueryResultVideo inlineQueryResultVideo0 = new InlineQueryResultVideo();
      InlineKeyboardMarkup inlineKeyboardMarkup0 = new InlineKeyboardMarkup();
      inlineQueryResultVideo0.setReplyMarkup(inlineKeyboardMarkup0);
      InlineKeyboardMarkup inlineKeyboardMarkup1 = inlineQueryResultVideo0.getReplyMarkup();
      assertSame(inlineKeyboardMarkup1, inlineKeyboardMarkup0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      InlineQueryResultVideo inlineQueryResultVideo0 = new InlineQueryResultVideo();
      String string0 = inlineQueryResultVideo0.getTitle();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      InlineQueryResultVideo inlineQueryResultVideo0 = new InlineQueryResultVideo();
      InputVenueMessageContent inputVenueMessageContent0 = new InputVenueMessageContent();
      inlineQueryResultVideo0.setInputMessageContent(inputVenueMessageContent0);
      InputVenueMessageContent inputVenueMessageContent1 = (InputVenueMessageContent)inlineQueryResultVideo0.getInputMessageContent();
      assertNull(inputVenueMessageContent1.getAddress());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      InlineQueryResultVideo inlineQueryResultVideo0 = new InlineQueryResultVideo();
      String string0 = inlineQueryResultVideo0.getVideoUrl();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      InlineQueryResultVideo inlineQueryResultVideo0 = new InlineQueryResultVideo();
      String string0 = inlineQueryResultVideo0.getMimeType();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      InlineQueryResultVideo inlineQueryResultVideo0 = new InlineQueryResultVideo();
      String string0 = inlineQueryResultVideo0.getCaption();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      InlineQueryResultVideo inlineQueryResultVideo0 = new InlineQueryResultVideo();
      String string0 = inlineQueryResultVideo0.getId();
      assertNull(string0);
  }
}
