/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 26 13:22:56 GMT 2018
 */

package org.telegram.telegrambots.meta.api.methods.send;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.telegram.telegrambots.meta.api.methods.send.SendGame;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ForceReplyKeyboard;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboard;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SendGame_ESTest extends SendGame_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SendGame sendGame0 = new SendGame();
      Long long0 = new Long((-99L));
      SendGame sendGame1 = sendGame0.setChatId(long0);
      assertNull(sendGame1.getDisableNotification());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SendGame sendGame0 = new SendGame();
      Integer integer0 = new Integer(0);
      sendGame0.setReplyToMessageId(integer0);
      Integer integer1 = sendGame0.getReplyToMessageId();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SendGame sendGame0 = new SendGame();
      Integer integer0 = new Integer(200);
      sendGame0.setReplyToMessageId(integer0);
      Integer integer1 = sendGame0.getReplyToMessageId();
      assertEquals(200, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SendGame sendGame0 = new SendGame();
      ForceReplyKeyboard forceReplyKeyboard0 = new ForceReplyKeyboard();
      sendGame0.setReplyMarkup(forceReplyKeyboard0);
      ReplyKeyboard replyKeyboard0 = sendGame0.getReplyMarkup();
      assertSame(replyKeyboard0, forceReplyKeyboard0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SendGame sendGame0 = new SendGame();
      sendGame0.setGameShortName("sendGame");
      String string0 = sendGame0.getGameShortName();
      assertEquals("sendGame", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SendGame sendGame0 = new SendGame();
      SendGame sendGame1 = sendGame0.setGameShortName("");
      String string0 = sendGame1.getGameShortName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SendGame sendGame0 = new SendGame();
      SendGame sendGame1 = sendGame0.setChatId("sendGame");
      String string0 = sendGame1.getChatId();
      assertEquals("sendGame", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SendGame sendGame0 = new SendGame();
      sendGame0.setChatId("");
      String string0 = sendGame0.getChatId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SendGame sendGame0 = new SendGame();
      SendGame sendGame1 = sendGame0.setGameShortName("R3MT<]cLvrn7+nG|7");
      ReplyKeyboardMarkup replyKeyboardMarkup0 = new ReplyKeyboardMarkup();
      LinkedList<KeyboardRow> linkedList0 = new LinkedList<KeyboardRow>();
      ReplyKeyboardMarkup replyKeyboardMarkup1 = replyKeyboardMarkup0.setKeyboard(linkedList0);
      SendGame sendGame2 = sendGame1.setReplyMarkup(replyKeyboardMarkup1);
      linkedList0.add((KeyboardRow) null);
      sendGame2.setChatId("");
      // Undeclared exception!
      try { 
        sendGame0.validate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SendGame sendGame0 = new SendGame();
      try { 
        sendGame0.deserializeResponse("sendGame");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unable to deserialize response
         //
         verifyException("org.telegram.telegrambots.meta.api.methods.send.SendGame", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SendGame sendGame0 = new SendGame();
      SendGame sendGame1 = sendGame0.setGameShortName("R3MT<]cLvrn7+nG|7");
      ReplyKeyboardMarkup replyKeyboardMarkup0 = new ReplyKeyboardMarkup();
      SendGame sendGame2 = sendGame1.setReplyMarkup(replyKeyboardMarkup0);
      sendGame0.setChatId("");
      sendGame2.validate();
      assertEquals("", sendGame2.getChatId());
      assertEquals("R3MT<]cLvrn7+nG|7", sendGame2.getGameShortName());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SendGame sendGame0 = new SendGame();
      SendGame sendGame1 = sendGame0.setGameShortName("");
      sendGame1.setChatId("Error sending game");
      try { 
        sendGame0.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // GameShortName parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.methods.send.SendGame", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SendGame sendGame0 = new SendGame();
      SendGame sendGame1 = sendGame0.setChatId("4@Q(G");
      sendGame1.setGameShortName("4@Q(G");
      sendGame0.validate();
      assertEquals("4@Q(G", sendGame0.getGameShortName());
      assertEquals("4@Q(G", sendGame0.getChatId());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SendGame sendGame0 = new SendGame();
      try { 
        sendGame0.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // ChatId parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.methods.send.SendGame", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SendGame sendGame0 = new SendGame();
      String string0 = sendGame0.getMethod();
      assertEquals("sendGame", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SendGame sendGame0 = new SendGame();
      String string0 = sendGame0.getChatId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SendGame sendGame0 = new SendGame();
      sendGame0.setChatId("4@Q(G");
      try { 
        sendGame0.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // GameShortName parameter can't be empty
         //
         verifyException("org.telegram.telegrambots.meta.api.methods.send.SendGame", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SendGame sendGame0 = new SendGame();
      SendGame sendGame1 = sendGame0.enableNotification();
      assertNull(sendGame1.getDisableNotification());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SendGame sendGame0 = new SendGame();
      Boolean boolean0 = sendGame0.getDisableNotification();
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SendGame sendGame0 = new SendGame();
      String string0 = sendGame0.toString();
      assertEquals("SendGame{chatId='null', gameShortName='null', disableNotification=null, replyToMessageId=null, replyMarkup=null}", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SendGame sendGame0 = new SendGame();
      ReplyKeyboard replyKeyboard0 = sendGame0.getReplyMarkup();
      assertNull(replyKeyboard0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SendGame sendGame0 = new SendGame();
      // Undeclared exception!
      try { 
        sendGame0.setChatId((Long) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SendGame sendGame0 = new SendGame();
      Integer integer0 = new Integer((-2245));
      sendGame0.setReplyToMessageId(integer0);
      Integer integer1 = sendGame0.getReplyToMessageId();
      assertEquals((-2245), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SendGame sendGame0 = new SendGame();
      Integer integer0 = sendGame0.getReplyToMessageId();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SendGame sendGame0 = new SendGame();
      sendGame0.disableNotification();
      Boolean boolean0 = sendGame0.getDisableNotification();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SendGame sendGame0 = new SendGame();
      String string0 = sendGame0.getGameShortName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SendGame sendGame0 = new SendGame();
      // Undeclared exception!
      try { 
        sendGame0.deserializeResponse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.JsonFactory", e);
      }
  }
}
