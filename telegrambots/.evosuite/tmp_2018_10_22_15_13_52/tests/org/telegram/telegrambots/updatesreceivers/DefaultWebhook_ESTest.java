/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 22 18:23:56 GMT 2018
 */

package org.telegram.telegrambots.updatesreceivers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.telegram.telegrambots.meta.generics.WebhookBot;
import org.telegram.telegrambots.test.Fakes.FakeWebhook;
import org.telegram.telegrambots.updatesreceivers.DefaultWebhook;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DefaultWebhook_ESTest extends DefaultWebhook_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DefaultWebhook defaultWebhook0 = new DefaultWebhook();
      defaultWebhook0.setKeyStore("", "");
      defaultWebhook0.setInternalUrl("");
      // Undeclared exception!
      try { 
        defaultWebhook0.startServer();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A MultiException has 3 exceptions.  They are:
         // 1. org.glassfish.hk2.api.UnsatisfiedDependencyException: There was no object available for injection at org.jvnet.hk2.internal.SystemInjecteeImpl@0000001641
         // 2. org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: While attempting to resolve the dependencies of org.glassfish.jersey.internal.inject.JerseyClassAnalyzer errors were found
         // 3. org.evosuite.runtime.mock.java.lang.MockIllegalStateException: Unable to perform operation: resolve on org.glassfish.jersey.internal.inject.JerseyClassAnalyzer
         //
         verifyException("org.jvnet.hk2.internal.Collector", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DefaultWebhook defaultWebhook0 = new DefaultWebhook();
      defaultWebhook0.setInternalUrl("Error starting webhook server");
      // Undeclared exception!
      try { 
        defaultWebhook0.startServer();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal character in path at index 5: Error starting webhook server
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DefaultWebhook defaultWebhook0 = new DefaultWebhook();
      // Undeclared exception!
      try { 
        defaultWebhook0.setKeyStore((String) null, "Kz5qL~wc%?q7");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DefaultWebhook defaultWebhook0 = new DefaultWebhook();
      // Undeclared exception!
      try { 
        defaultWebhook0.registerWebhook((WebhookBot) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.telegram.telegrambots.updatesreceivers.RestApi", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DefaultWebhook defaultWebhook0 = new DefaultWebhook();
      try { 
        defaultWebhook0.setKeyStore("_94UUi5mR,;", "_94UUi5mR,;");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find or access server keystore file.
         //
         verifyException("org.telegram.telegrambots.updatesreceivers.DefaultWebhook", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      DefaultWebhook defaultWebhook0 = new DefaultWebhook();
      defaultWebhook0.setKeyStore("", (String) null);
      // Undeclared exception!
      try { 
        defaultWebhook0.startServer();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      DefaultWebhook defaultWebhook0 = new DefaultWebhook();
      FakeWebhook fakeWebhook0 = new FakeWebhook();
      defaultWebhook0.registerWebhook(fakeWebhook0);
      assertNull(fakeWebhook0.getBotUsername());
  }
}
