/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 22 18:21:57 GMT 2018
 */

package org.telegram.telegrambots.updatesreceivers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.junit.runner.RunWith;
import org.telegram.telegrambots.updatesreceivers.ExponentialBackOff;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ExponentialBackOff_ESTest extends ExponentialBackOff_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ExponentialBackOff.Builder exponentialBackOff_Builder0 = new ExponentialBackOff.Builder();
      ExponentialBackOff.Builder exponentialBackOff_Builder1 = exponentialBackOff_Builder0.setInitialIntervalMillis(30000);
      exponentialBackOff_Builder1.setMultiplier(1.0);
      ExponentialBackOff exponentialBackOff0 = exponentialBackOff_Builder1.build();
      long long0 = exponentialBackOff0.nextBackOffMillis();
      assertEquals(1.0, exponentialBackOff_Builder1.getMultiplier(), 0.01);
      assertEquals(15000L, long0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ExponentialBackOff.Builder exponentialBackOff_Builder0 = new ExponentialBackOff.Builder();
      ExponentialBackOff.Builder exponentialBackOff_Builder1 = exponentialBackOff_Builder0.setMultiplier(1);
      ExponentialBackOff exponentialBackOff0 = exponentialBackOff_Builder1.build();
      long long0 = exponentialBackOff0.nextBackOffMillis();
      assertEquals(500, exponentialBackOff0.getCurrentIntervalMillis());
      assertEquals(3600000, exponentialBackOff0.getMaxElapsedTimeMillis());
      assertEquals(250L, long0);
      assertEquals(0L, exponentialBackOff0.getElapsedTimeMillis());
      assertEquals(30000, exponentialBackOff0.getMaxIntervalMillis());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ExponentialBackOff.Builder exponentialBackOff_Builder0 = new ExponentialBackOff.Builder();
      ExponentialBackOff.Builder exponentialBackOff_Builder1 = exponentialBackOff_Builder0.setMaxElapsedTimeMillis(1668);
      ExponentialBackOff exponentialBackOff0 = new ExponentialBackOff(exponentialBackOff_Builder1);
      int int0 = exponentialBackOff0.getMaxElapsedTimeMillis();
      assertEquals(1668, exponentialBackOff_Builder0.getMaxElapsedTimeMillis());
      assertEquals(1668, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ExponentialBackOff.Builder exponentialBackOff_Builder0 = new ExponentialBackOff.Builder();
      exponentialBackOff_Builder0.setMaxIntervalMillis(3);
      exponentialBackOff_Builder0.setInitialIntervalMillis(3);
      ExponentialBackOff exponentialBackOff0 = exponentialBackOff_Builder0.build();
      int int0 = exponentialBackOff0.getMaxIntervalMillis();
      assertEquals(3, exponentialBackOff_Builder0.getInitialIntervalMillis());
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ExponentialBackOff.Builder exponentialBackOff_Builder0 = new ExponentialBackOff.Builder();
      assertEquals(1.5, exponentialBackOff_Builder0.getMultiplier(), 0.01);
      
      ExponentialBackOff.Builder exponentialBackOff_Builder1 = exponentialBackOff_Builder0.setMultiplier(1);
      ExponentialBackOff exponentialBackOff0 = exponentialBackOff_Builder1.build();
      double double0 = exponentialBackOff0.getMultiplier();
      assertEquals(1.0, exponentialBackOff_Builder0.getMultiplier(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ExponentialBackOff exponentialBackOff0 = new ExponentialBackOff();
      exponentialBackOff0.nextBackOffMillis();
      int int0 = exponentialBackOff0.getCurrentIntervalMillis();
      assertEquals(750, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ExponentialBackOff.Builder exponentialBackOff_Builder0 = new ExponentialBackOff.Builder();
      exponentialBackOff_Builder0.setInitialIntervalMillis(2721);
      ExponentialBackOff exponentialBackOff0 = exponentialBackOff_Builder0.build();
      int int0 = exponentialBackOff0.getInitialIntervalMillis();
      assertEquals(2721, exponentialBackOff_Builder0.getInitialIntervalMillis());
      assertEquals(2721, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ExponentialBackOff.Builder exponentialBackOff_Builder0 = new ExponentialBackOff.Builder();
      exponentialBackOff_Builder0.setRandomizationFactor(0);
      ExponentialBackOff exponentialBackOff0 = exponentialBackOff_Builder0.build();
      long long0 = exponentialBackOff0.nextBackOffMillis();
      assertEquals(0.0, exponentialBackOff_Builder0.getRandomizationFactor(), 0.01);
      assertEquals(500L, long0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ExponentialBackOff.Builder exponentialBackOff_Builder0 = new ExponentialBackOff.Builder();
      ExponentialBackOff.Builder exponentialBackOff_Builder1 = exponentialBackOff_Builder0.setMaxElapsedTimeMillis(1);
      ExponentialBackOff exponentialBackOff0 = exponentialBackOff_Builder1.build();
      exponentialBackOff0.startTimeNanos = 250L;
      long long0 = exponentialBackOff0.nextBackOffMillis();
      assertEquals(1, exponentialBackOff_Builder0.getMaxElapsedTimeMillis());
      assertEquals(1392409281L, exponentialBackOff0.getElapsedTimeMillis());
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ExponentialBackOff.Builder exponentialBackOff_Builder0 = new ExponentialBackOff.Builder();
      exponentialBackOff_Builder0.setInitialIntervalMillis(1);
      ExponentialBackOff exponentialBackOff0 = exponentialBackOff_Builder0.build();
      long long0 = exponentialBackOff0.nextBackOffMillis();
      assertEquals(1, exponentialBackOff_Builder0.getInitialIntervalMillis());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ExponentialBackOff.Builder exponentialBackOff_Builder0 = new ExponentialBackOff.Builder();
      assertEquals(0.5, exponentialBackOff_Builder0.getRandomizationFactor(), 0.01);
      
      exponentialBackOff_Builder0.setRandomizationFactor(0);
      ExponentialBackOff exponentialBackOff0 = exponentialBackOff_Builder0.build();
      double double0 = exponentialBackOff0.getRandomizationFactor();
      assertEquals(0.0, exponentialBackOff_Builder0.getRandomizationFactor(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = ExponentialBackOff.getRandomValueFromInterval(0.0, 0.0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = ExponentialBackOff.getRandomValueFromInterval(0.5, 0.5, 30000);
      assertEquals(30000, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int int0 = ExponentialBackOff.getRandomValueFromInterval(1.5, (-1221.2), 30000);
      assertEquals((-109924221), int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ExponentialBackOff exponentialBackOff0 = new ExponentialBackOff();
      exponentialBackOff0.startTimeNanos = 1L;
      long long0 = exponentialBackOff0.getElapsedTimeMillis();
      assertEquals(1392409281L, long0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ExponentialBackOff exponentialBackOff0 = null;
      try {
        exponentialBackOff0 = new ExponentialBackOff((ExponentialBackOff.Builder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.telegram.telegrambots.updatesreceivers.ExponentialBackOff", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ExponentialBackOff.Builder exponentialBackOff_Builder0 = new ExponentialBackOff.Builder();
      ExponentialBackOff.Builder exponentialBackOff_Builder1 = exponentialBackOff_Builder0.setMaxElapsedTimeMillis(0);
      ExponentialBackOff exponentialBackOff0 = null;
      try {
        exponentialBackOff0 = new ExponentialBackOff(exponentialBackOff_Builder1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ExponentialBackOff.Builder exponentialBackOff_Builder0 = new ExponentialBackOff.Builder();
      ExponentialBackOff.Builder exponentialBackOff_Builder1 = exponentialBackOff_Builder0.setMaxIntervalMillis((-748));
      ExponentialBackOff exponentialBackOff0 = null;
      try {
        exponentialBackOff0 = new ExponentialBackOff(exponentialBackOff_Builder1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ExponentialBackOff.Builder exponentialBackOff_Builder0 = new ExponentialBackOff.Builder();
      exponentialBackOff_Builder0.setMultiplier(0.0);
      ExponentialBackOff exponentialBackOff0 = null;
      try {
        exponentialBackOff0 = new ExponentialBackOff(exponentialBackOff_Builder0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ExponentialBackOff.Builder exponentialBackOff_Builder0 = new ExponentialBackOff.Builder();
      ExponentialBackOff.Builder exponentialBackOff_Builder1 = exponentialBackOff_Builder0.setRandomizationFactor(1.0);
      ExponentialBackOff exponentialBackOff0 = null;
      try {
        exponentialBackOff0 = new ExponentialBackOff(exponentialBackOff_Builder1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ExponentialBackOff.Builder exponentialBackOff_Builder0 = new ExponentialBackOff.Builder();
      ExponentialBackOff exponentialBackOff0 = exponentialBackOff_Builder0.build();
      exponentialBackOff0.reset();
      assertEquals(500, exponentialBackOff0.getCurrentIntervalMillis());
      assertEquals(0.5, exponentialBackOff0.getRandomizationFactor(), 0.01);
      assertEquals(3600000, exponentialBackOff0.getMaxElapsedTimeMillis());
      assertEquals(1.5, exponentialBackOff0.getMultiplier(), 0.01);
      assertEquals(30000, exponentialBackOff0.getMaxIntervalMillis());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ExponentialBackOff.Builder exponentialBackOff_Builder0 = new ExponentialBackOff.Builder();
      ExponentialBackOff exponentialBackOff0 = exponentialBackOff_Builder0.build();
      long long0 = exponentialBackOff0.getElapsedTimeMillis();
      assertEquals(500, exponentialBackOff0.getCurrentIntervalMillis());
      assertEquals(1.5, exponentialBackOff0.getMultiplier(), 0.01);
      assertEquals(3600000, exponentialBackOff0.getMaxElapsedTimeMillis());
      assertEquals(0L, long0);
      assertEquals(30000, exponentialBackOff0.getMaxIntervalMillis());
      assertEquals(0.5, exponentialBackOff0.getRandomizationFactor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ExponentialBackOff.Builder exponentialBackOff_Builder0 = new ExponentialBackOff.Builder();
      exponentialBackOff_Builder0.setMaxIntervalMillis(3);
      exponentialBackOff_Builder0.setInitialIntervalMillis(3);
      ExponentialBackOff exponentialBackOff0 = exponentialBackOff_Builder0.build();
      long long0 = exponentialBackOff0.nextBackOffMillis();
      assertEquals(3, exponentialBackOff_Builder0.getMaxIntervalMillis());
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ExponentialBackOff.Builder exponentialBackOff_Builder0 = new ExponentialBackOff.Builder();
      ExponentialBackOff.Builder exponentialBackOff_Builder1 = exponentialBackOff_Builder0.setRandomizationFactor((-1.0));
      ExponentialBackOff exponentialBackOff0 = null;
      try {
        exponentialBackOff0 = new ExponentialBackOff(exponentialBackOff_Builder1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ExponentialBackOff.Builder exponentialBackOff_Builder0 = new ExponentialBackOff.Builder();
      ExponentialBackOff.Builder exponentialBackOff_Builder1 = exponentialBackOff_Builder0.setInitialIntervalMillis(0);
      ExponentialBackOff exponentialBackOff0 = null;
      try {
        exponentialBackOff0 = new ExponentialBackOff(exponentialBackOff_Builder1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ExponentialBackOff.Builder exponentialBackOff_Builder0 = new ExponentialBackOff.Builder();
      ExponentialBackOff exponentialBackOff0 = exponentialBackOff_Builder0.build();
      double double0 = exponentialBackOff0.getRandomizationFactor();
      assertEquals(500, exponentialBackOff0.getCurrentIntervalMillis());
      assertEquals(3600000, exponentialBackOff0.getMaxElapsedTimeMillis());
      assertEquals(30000, exponentialBackOff_Builder0.getMaxIntervalMillis());
      assertEquals(30000, exponentialBackOff0.getMaxIntervalMillis());
      assertEquals(1.5, exponentialBackOff_Builder0.getMultiplier(), 0.01);
      assertEquals(0.5, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ExponentialBackOff exponentialBackOff0 = new ExponentialBackOff();
      System.setCurrentTimeMillis(217L);
      long long0 = exponentialBackOff0.getElapsedTimeMillis();
      assertEquals((-1392409281L), long0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ExponentialBackOff.Builder exponentialBackOff_Builder0 = new ExponentialBackOff.Builder();
      int int0 = exponentialBackOff_Builder0.getMaxIntervalMillis();
      assertEquals(0.5, exponentialBackOff_Builder0.getRandomizationFactor(), 0.01);
      assertEquals(1.5, exponentialBackOff_Builder0.getMultiplier(), 0.01);
      assertEquals(30000, int0);
      assertEquals(3600000, exponentialBackOff_Builder0.getMaxElapsedTimeMillis());
      assertEquals(500, exponentialBackOff_Builder0.getInitialIntervalMillis());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ExponentialBackOff.Builder exponentialBackOff_Builder0 = new ExponentialBackOff.Builder();
      double double0 = exponentialBackOff_Builder0.getRandomizationFactor();
      assertEquals(500, exponentialBackOff_Builder0.getInitialIntervalMillis());
      assertEquals(3600000, exponentialBackOff_Builder0.getMaxElapsedTimeMillis());
      assertEquals(0.5, double0, 0.01);
      assertEquals(1.5, exponentialBackOff_Builder0.getMultiplier(), 0.01);
      assertEquals(30000, exponentialBackOff_Builder0.getMaxIntervalMillis());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ExponentialBackOff.Builder exponentialBackOff_Builder0 = new ExponentialBackOff.Builder();
      double double0 = exponentialBackOff_Builder0.getMultiplier();
      assertEquals(1.5, double0, 0.01);
      assertEquals(3600000, exponentialBackOff_Builder0.getMaxElapsedTimeMillis());
      assertEquals(500, exponentialBackOff_Builder0.getInitialIntervalMillis());
      assertEquals(30000, exponentialBackOff_Builder0.getMaxIntervalMillis());
      assertEquals(0.5, exponentialBackOff_Builder0.getRandomizationFactor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ExponentialBackOff.Builder exponentialBackOff_Builder0 = new ExponentialBackOff.Builder();
      int int0 = exponentialBackOff_Builder0.getMaxElapsedTimeMillis();
      assertEquals(0.5, exponentialBackOff_Builder0.getRandomizationFactor(), 0.01);
      assertEquals(30000, exponentialBackOff_Builder0.getMaxIntervalMillis());
      assertEquals(1.5, exponentialBackOff_Builder0.getMultiplier(), 0.01);
      assertEquals(3600000, int0);
      assertEquals(500, exponentialBackOff_Builder0.getInitialIntervalMillis());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ExponentialBackOff.Builder exponentialBackOff_Builder0 = new ExponentialBackOff.Builder();
      int int0 = exponentialBackOff_Builder0.getInitialIntervalMillis();
      assertEquals(1.5, exponentialBackOff_Builder0.getMultiplier(), 0.01);
      assertEquals(30000, exponentialBackOff_Builder0.getMaxIntervalMillis());
      assertEquals(500, int0);
      assertEquals(0.5, exponentialBackOff_Builder0.getRandomizationFactor(), 0.01);
      assertEquals(3600000, exponentialBackOff_Builder0.getMaxElapsedTimeMillis());
  }
}
