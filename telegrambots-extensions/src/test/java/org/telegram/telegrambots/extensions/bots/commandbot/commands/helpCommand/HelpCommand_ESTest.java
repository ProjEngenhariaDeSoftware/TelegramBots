/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 05 15:03:14 GMT 2018
 */

package org.telegram.telegrambots.extensions.bots.commandbot.commands.helpCommand;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.telegram.telegrambots.extensions.bots.commandbot.commands.CommandRegistry;
import org.telegram.telegrambots.extensions.bots.commandbot.commands.IBotCommand;
import org.telegram.telegrambots.extensions.bots.commandbot.commands.ICommandRegistry;
import org.telegram.telegrambots.extensions.bots.commandbot.commands.helpCommand.HelpCommand;
import org.telegram.telegrambots.extensions.bots.commandbot.commands.helpCommand.IManCommand;
import org.telegram.telegrambots.meta.api.objects.Chat;
import org.telegram.telegrambots.meta.api.objects.User;
import org.telegram.telegrambots.meta.bots.AbsSender;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HelpCommand_ESTest extends HelpCommand_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      IBotCommand[] iBotCommandArray0 = new IBotCommand[0];
      String string0 = HelpCommand.getHelpText(iBotCommandArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CommandRegistry commandRegistry0 = new CommandRegistry(false, "w");
      HelpCommand helpCommand0 = new HelpCommand("w", "w", "w");
      commandRegistry0.register(helpCommand0);
      String string0 = HelpCommand.getHelpText((ICommandRegistry) commandRegistry0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CommandRegistry commandRegistry0 = new CommandRegistry(true, "");
      Collection<IBotCommand> collection0 = commandRegistry0.getRegisteredCommands();
      String string0 = HelpCommand.getHelpText(collection0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        HelpCommand.getManText((IManCommand) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.telegram.telegrambots.extensions.bots.commandbot.commands.helpCommand.HelpCommand", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IBotCommand[] iBotCommandArray0 = new IBotCommand[7];
      // Undeclared exception!
      try { 
        HelpCommand.getHelpText(iBotCommandArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<IBotCommand> linkedList0 = new LinkedList<IBotCommand>();
      linkedList0.add((IBotCommand) null);
      // Undeclared exception!
      try { 
        HelpCommand.getHelpText((Collection<IBotCommand>) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HelpCommand helpCommand0 = new HelpCommand("@NdD!M'q", "A/0d1rkQ{xR).", "U0H8|C)cg?<");
      IBotCommand[] iBotCommandArray0 = new IBotCommand[7];
      iBotCommandArray0[0] = (IBotCommand) helpCommand0;
      iBotCommandArray0[1] = (IBotCommand) helpCommand0;
      iBotCommandArray0[2] = (IBotCommand) helpCommand0;
      iBotCommandArray0[3] = (IBotCommand) helpCommand0;
      iBotCommandArray0[4] = (IBotCommand) helpCommand0;
      iBotCommandArray0[5] = (IBotCommand) helpCommand0;
      iBotCommandArray0[6] = (IBotCommand) helpCommand0;
      String string0 = HelpCommand.getHelpText(iBotCommandArray0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HelpCommand helpCommand0 = new HelpCommand();
      String string0 = HelpCommand.getManText((IManCommand) helpCommand0);
      assertEquals("<b>/help</b>\nshows all commands. Use /help [command] for more info\n-----------------\nThis command displays all commands the bot has to offer.\n /help [command] can display deeper information", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HelpCommand helpCommand0 = new HelpCommand();
      User user0 = new User();
      Chat chat0 = new Chat();
      String[] stringArray0 = new String[6];
      helpCommand0.execute((AbsSender) null, user0, chat0, stringArray0);
      assertNull(user0.getBot());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        HelpCommand.getManText((IBotCommand) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HelpCommand helpCommand0 = new HelpCommand();
      LinkedList<IBotCommand> linkedList0 = new LinkedList<IBotCommand>();
      linkedList0.offerLast(helpCommand0);
      String string0 = HelpCommand.getHelpText((Collection<IBotCommand>) linkedList0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HelpCommand helpCommand0 = null;
      try {
        helpCommand0 = new HelpCommand("", "shows all commands. Use /help [command] for more info", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // commandIdentifier for command cannot be null or empty
         //
         verifyException("org.telegram.telegrambots.extensions.bots.commandbot.commands.BotCommand", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CommandRegistry commandRegistry0 = new CommandRegistry(true, "");
      String string0 = HelpCommand.getHelpText((ICommandRegistry) commandRegistry0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        HelpCommand.getHelpText((ICommandRegistry) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.telegram.telegrambots.extensions.bots.commandbot.commands.helpCommand.HelpCommand", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HelpCommand helpCommand0 = new HelpCommand();
      String string0 = HelpCommand.getManText((IBotCommand) helpCommand0);
      assertEquals("<b>/help</b>\nshows all commands. Use /help [command] for more info\n-----------------\nThis command displays all commands the bot has to offer.\n /help [command] can display deeper information", string0);
  }
}
