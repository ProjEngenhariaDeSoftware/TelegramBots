/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 05 15:03:18 GMT 2018
 */

package org.telegram.telegrambots.extensions.bots.commandbot.commands;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.telegram.telegrambots.extensions.bots.commandbot.commands.helpCommand.HelpCommand;
import org.telegram.telegrambots.meta.api.objects.Chat;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.User;
import org.telegram.telegrambots.meta.bots.AbsSender;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BotCommand_ESTest extends BotCommand_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HelpCommand helpCommand0 = new HelpCommand();
      AbsSender absSender0 = mock(AbsSender.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[3];
      helpCommand0.execute(absSender0, (User) null, (Chat) null, stringArray0);
      assertEquals("help", helpCommand0.getCommandIdentifier());
      assertEquals("shows all commands. Use /help [command] for more info", helpCommand0.getDescription());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HelpCommand helpCommand0 = new HelpCommand("ak", "L*;,;sF%NE", "ak");
      Message message0 = new Message();
      String[] stringArray0 = new String[2];
      helpCommand0.processMessage((AbsSender) null, message0, stringArray0);
      assertEquals("L*;,;sF%NE", helpCommand0.getDescription());
      assertEquals("ak", helpCommand0.getCommandIdentifier());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HelpCommand helpCommand0 = new HelpCommand("x4(@jO!", (String) null, (String) null);
      String string0 = helpCommand0.getDescription();
      assertNull(string0);
      assertEquals("x4(@jo!", helpCommand0.getCommandIdentifier());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HelpCommand helpCommand0 = new HelpCommand("lFw>4(Ft|IJ8/:>4", "", "lFw>4(Ft|IJ8/:>4");
      String string0 = helpCommand0.getDescription();
      assertEquals("", string0);
      assertEquals("lfw>4(ft|ij8/:>4", helpCommand0.getCommandIdentifier());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HelpCommand helpCommand0 = new HelpCommand("/", "", "= fD6|9GT`");
      String string0 = helpCommand0.getCommandIdentifier();
      assertEquals("", string0);
      assertEquals("", helpCommand0.getDescription());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HelpCommand helpCommand0 = new HelpCommand();
      String string0 = helpCommand0.getDescription();
      assertEquals("help", helpCommand0.getCommandIdentifier());
      assertEquals("shows all commands. Use /help [command] for more info", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HelpCommand helpCommand0 = new HelpCommand();
      String string0 = helpCommand0.getCommandIdentifier();
      assertEquals("help", string0);
      assertEquals("shows all commands. Use /help [command] for more info", helpCommand0.getDescription());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HelpCommand helpCommand0 = null;
      try {
        helpCommand0 = new HelpCommand("<b>/help</b>\nshows all commands. Use /help [command] for more info", "/", "<b>/help</b>\nshows all commands. Use /help [command] for more info");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // commandIdentifier cannot be longer than 32 (including /)
         //
         verifyException("org.telegram.telegrambots.extensions.bots.commandbot.commands.BotCommand", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HelpCommand helpCommand0 = null;
      try {
        helpCommand0 = new HelpCommand("", "", "s+");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // commandIdentifier for command cannot be null or empty
         //
         verifyException("org.telegram.telegrambots.extensions.bots.commandbot.commands.BotCommand", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HelpCommand helpCommand0 = null;
      try {
        helpCommand0 = new HelpCommand((String) null, (String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // commandIdentifier for command cannot be null or empty
         //
         verifyException("org.telegram.telegrambots.extensions.bots.commandbot.commands.BotCommand", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HelpCommand helpCommand0 = new HelpCommand();
      AbsSender absSender0 = mock(AbsSender.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[3];
      // Undeclared exception!
      try { 
        helpCommand0.processMessage(absSender0, (Message) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.telegram.telegrambots.extensions.bots.commandbot.commands.BotCommand", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HelpCommand helpCommand0 = new HelpCommand();
      String string0 = helpCommand0.toString();
      assertEquals("<b>/help</b>\nshows all commands. Use /help [command] for more info", string0);
  }
}
